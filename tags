!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ALT	kbd.h	11;"	d
ASSERT	lapic.c	22;"	d	file:
Align	kalloc.c	/^typedef long Align;$/;"	t	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	119;"	d	file:
BBLOCK	fs.h	42;"	d
BCAST	lapic.c	24;"	d	file:
BPB	fs.h	39;"	d
BSIZE	fs.h	9;"	d
B_BUSY	buf.h	10;"	d
B_DIRTY	buf.h	12;"	d
B_VALID	buf.h	11;"	d
C	console.c	177;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
COM1	uart.c	14;"	d	file:
CONSOLE	dev.h	8;"	d
CONSOLE	file.h	41;"	d
CR0_PE	bootasm.S	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PE	bootblock.asm	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PE	bootother.S	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PE	bootother.asm	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PG	page.h	45;"	d
CR0_WP	page.h	46;"	d
CRTPORT	console.c	120;"	d	file:
CTL	kbd.h	10;"	d
DELIVS	lapic.c	21;"	d	file:
DIRSIZ	fs.h	45;"	d
DIR_L	page.h	53;"	d
DPL_USER	mmu.h	55;"	d
Disassembly	args.asm	/^Disassembly of section .text:$/;"	l
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	bootother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	hello.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	16;"	d	file:
EOI	lapic.c	14;"	d	file:
ERROR	lapic.c	32;"	d	file:
ESR	lapic.c	17;"	d	file:
EXEC	sh.c	8;"	d	file:
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
Header	kalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	36;"	d
ICRHI	lapic.c	25;"	d	file:
ICRLO	lapic.c	18;"	d	file:
ID	lapic.c	11;"	d	file:
IDE_BSY	ide.c	13;"	d	file:
IDE_CMD_READ	ide.c	18;"	d	file:
IDE_CMD_WRITE	ide.c	19;"	d	file:
IDE_DF	ide.c	15;"	d	file:
IDE_DRDY	ide.c	14;"	d	file:
IDE_ERR	ide.c	16;"	d	file:
INIT	lapic.c	19;"	d	file:
INPUT_BUF	console.c	168;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	8;"	d	file:
IO_PIC2	picirq.c	9;"	d	file:
IO_RTC	lapic.c	129;"	d	file:
IO_TIMER1	timer.c	10;"	d	file:
IPB	fs.h	33;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SLAVE	picirq.c	11;"	d	file:
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_BUSY	file.h	28;"	d
I_BUSY	fsvar.h	17;"	d
I_VALID	file.h	29;"	d
I_VALID	fsvar.h	18;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	3;"	d
LEVEL	lapic.c	23;"	d	file:
LINT0	lapic.c	30;"	d	file:
LINT1	lapic.c	31;"	d	file:
LIST	sh.c	11;"	d	file:
MASKED	lapic.c	33;"	d	file:
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	20;"	d
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
NBUF	param.h	7;"	d
NCPU	param.h	4;"	d
NDEV	param.h	9;"	d
NDIRECT	fs.h	18;"	d
NELEM	defs.h	166;"	d
NFILE	param.h	6;"	d
NINDIRECT	fs.h	19;"	d
NINODE	param.h	8;"	d
NO	kbd.h	7;"	d
NOFILE	param.h	5;"	d
NPROC	param.h	1;"	d
NSEGS	proc.h	9;"	d
NUMLOCK	kbd.h	14;"	d
OFFSET_L	page.h	55;"	d
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
PAGE	param.h	2;"	d
PAGE_H	page.h	2;"	d
PAGE_L	page.h	54;"	d
PCINT	lapic.c	29;"	d	file:
PERIODIC	lapic.c	28;"	d	file:
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	10;"	d	file:
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	10;"	d
ROOTINO	fs.h	8;"	d
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECTSIZE	bootmain.c	12;"	d	file:
SEG	mmu.h	45;"	d
SEG16	mmu.h	50;"	d
SEG_ASM	asm.h	9;"	d
SEG_KCODE	bootasm.S	/^#define SEG_KCODE 1  \/\/ kernel code$/;"	d
SEG_KCODE	bootother.S	/^#define SEG_KCODE 1  \/\/ kernel code$/;"	d
SEG_KCODE	proc.h	3;"	d
SEG_KCODE	trapasm.S	/^#define SEG_KCODE 1  \/\/ kernel code$/;"	d
SEG_KCPU	proc.h	5;"	d
SEG_KCPU	trapasm.S	/^#define SEG_KCPU  3  \/\/ kernel per-cpu data$/;"	d
SEG_KDATA	bootasm.S	/^#define SEG_KDATA 2  \/\/ kernel data+stack$/;"	d
SEG_KDATA	bootother.S	/^#define SEG_KDATA 2  \/\/ kernel data+stack$/;"	d
SEG_KDATA	proc.h	4;"	d
SEG_KDATA	trapasm.S	/^#define SEG_KDATA 2  \/\/ kernel data+stack$/;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	proc.h	8;"	d
SEG_UCODE	proc.h	6;"	d
SEG_UDATA	proc.h	7;"	d
SETGATE	mmu.h	141;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	20;"	d	file:
STA_A	asm.h	19;"	d
STA_A	mmu.h	63;"	d
STA_C	asm.h	16;"	d
STA_C	mmu.h	60;"	d
STA_E	asm.h	15;"	d
STA_E	mmu.h	59;"	d
STA_R	asm.h	18;"	d
STA_R	mmu.h	62;"	d
STA_W	asm.h	17;"	d
STA_W	mmu.h	61;"	d
STA_X	asm.h	14;"	d
STA_X	mmu.h	58;"	d
STS_CG16	mmu.h	69;"	d
STS_CG32	mmu.h	75;"	d
STS_IG16	mmu.h	71;"	d
STS_IG32	mmu.h	76;"	d
STS_LDT	mmu.h	67;"	d
STS_T16A	mmu.h	66;"	d
STS_T16B	mmu.h	68;"	d
STS_T32A	mmu.h	73;"	d
STS_T32B	mmu.h	74;"	d
STS_TG	mmu.h	70;"	d
STS_TG16	mmu.h	72;"	d
STS_TG32	mmu.h	77;"	d
SVR	lapic.c	15;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	17;"	d
SYS_close	syscall.h	8;"	d
SYS_dup	syscall.h	18;"	d
SYS_exec	syscall.h	10;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	14;"	d
SYS_getpid	syscall.h	19;"	d
SYS_kill	syscall.h	9;"	d
SYS_link	syscall.h	15;"	d
SYS_mkdir	syscall.h	16;"	d
SYS_mknod	syscall.h	12;"	d
SYS_open	syscall.h	11;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	7;"	d
SYS_sbrk	syscall.h	20;"	d
SYS_sleep	syscall.h	21;"	d
SYS_unlink	syscall.h	13;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	6;"	d
TCCR	lapic.c	35;"	d	file:
TDCR	lapic.c	36;"	d	file:
TICR	lapic.c	34;"	d	file:
TIMER	lapic.c	26;"	d	file:
TIMER_16BIT	kernel.asm	/^#define TIMER_16BIT     0x30    \/\/ r\/w counter 16 bits, LSB first$/;"	d
TIMER_16BIT	timer.c	22;"	d	file:
TIMER_DIV	timer.c	17;"	d	file:
TIMER_FREQ	timer.c	16;"	d	file:
TIMER_MODE	timer.c	19;"	d	file:
TIMER_RATEGEN	kernel.asm	/^#define TIMER_RATEGEN   0x04    \/\/ mode 2, rate generator$/;"	d
TIMER_RATEGEN	timer.c	21;"	d	file:
TIMER_SEL0	timer.c	20;"	d	file:
TPR	lapic.c	13;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
VER	lapic.c	12;"	d	file:
X1	lapic.c	27;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_args	args.asm	/^_args:     file format elf32-i386$/;"	l
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_hello	hello.asm	/^_hello:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_vfree	kalloc.c	/^_vfree(void *ap)$/;"	f
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	args.asm	/^   a:	55                   	push   %ebp$/;"	l
a	cat.asm	/^   a:	eb 1c                	jmp    28 <cat+0x28>$/;"	l
a	echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	forktest.asm	/^   a:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
a	hello.asm	/^   a:	55                   	push   %ebp$/;"	l
a	init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ln.asm	/^   a:	55                   	push   %ebp$/;"	l
a	mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	sh.asm	/^       a:	85 db                	test   %ebx,%ebx$/;"	l
a	zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	cat.asm	/^  a0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
a0	echo.asm	/^  a0:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax$/;"	l
a0	forktest.asm	/^  a0:	75 50                	jne    f2 <forktest+0xc2>$/;"	l
a0	hello.asm	/^  a0:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
a0	init.asm	/^  a0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a0	kill.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	ln.asm	/^  a0:	5b                   	pop    %ebx$/;"	l
a0	ls.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	mkdir.asm	/^  a0:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax$/;"	l
a0	rm.asm	/^  a0:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax$/;"	l
a0	usertests.asm	/^      a0:	55                   	push   %ebp$/;"	l
a0	zombie.asm	/^  a0:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
a00	sh.asm	/^     a00:	e8 e3 04 00 00       	call   ee8 <exit>$/;"	l
a01	ls.asm	/^ a01:	74 1d                	je     a20 <malloc+0x70>$/;"	l
a02	usertests.asm	/^     a02:	e8 41 24 00 00       	call   2e48 <exit>$/;"	l
a03	ls.asm	/^ a03:	29 d8                	sub    %ebx,%eax$/;"	l
a04	grep.asm	/^ a04:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
a05	ls.asm	/^ a05:	8d 14 c1             	lea    (%ecx,%eax,8),%edx$/;"	l
a05	sh.asm	/^     a05:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
a07	grep.asm	/^ a07:	74 18                	je     a21 <malloc+0xb1>$/;"	l
a07	usertests.asm	/^     a07:	8d 4d d4             	lea    -0x2c(%ebp),%ecx$/;"	l
a08	ls.asm	/^ a08:	89 41 04             	mov    %eax,0x4(%ecx)$/;"	l
a08	sh.asm	/^     a08:	8b 03                	mov    (%ebx),%eax$/;"	l
a09	grep.asm	/^ a09:	89 78 04             	mov    %edi,0x4(%eax)$/;"	l
a0a	sh.asm	/^     a0a:	ff 24 85 f0 13 00 00 	jmp    *0x13f0(,%eax,4)$/;"	l
a0a	usertests.asm	/^     a0a:	89 4c 24 08          	mov    %ecx,0x8(%esp)$/;"	l
a0b	ls.asm	/^ a0b:	89 5a 04             	mov    %ebx,0x4(%edx)$/;"	l
a0c	grep.asm	/^ a0c:	83 c0 08             	add    $0x8,%eax$/;"	l
a0e	ls.asm	/^ a0e:	89 35 14 0b 00 00    	mov    %esi,0xb14$/;"	l
a0e	usertests.asm	/^     a0e:	c7 44 24 04 f0 41 00 	movl   $0x41f0,0x4(%esp)$/;"	l
a0f	grep.asm	/^ a0f:	89 04 24             	mov    %eax,(%esp)$/;"	l
a1	args.asm	/^  a1:	84 c0                	test   %al,%al$/;"	l
a1	grep.asm	/^  a1:	8d 43 01             	lea    0x1(%ebx),%eax$/;"	l
a1	kill.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	ln.asm	/^  a1:	5d                   	pop    %ebp$/;"	l
a1	ls.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	sh.asm	/^      a1:	83 c2 04             	add    $0x4,%edx$/;"	l
a1	usertests.asm	/^      a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	wc.asm	/^  a1:	c7 44 24 04 ed 08 00 	movl   $0x8ed,0x4(%esp)$/;"	l
a11	sh.asm	/^     a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a12	grep.asm	/^ a12:	e8 b9 fe ff ff       	call   8d0 <free>$/;"	l
a14	ls.asm	/^ a14:	8d 42 08             	lea    0x8(%edx),%eax$/;"	l
a15	usertests.asm	/^     a15:	00 $/;"	l
a16	usertests.asm	/^     a16:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a17	grep.asm	/^ a17:	8b 15 c8 0a 00 00    	mov    0xac8,%edx$/;"	l
a17	ls.asm	/^ a17:	83 c4 0c             	add    $0xc,%esp$/;"	l
a18	sh.asm	/^     a18:	e8 f3 fe ff ff       	call   910 <fork1>$/;"	l
a1a	ls.asm	/^ a1a:	5b                   	pop    %ebx$/;"	l
a1b	ls.asm	/^ a1b:	5e                   	pop    %esi$/;"	l
a1c	ls.asm	/^ a1c:	5f                   	pop    %edi$/;"	l
a1d	grep.asm	/^ a1d:	85 d2                	test   %edx,%edx$/;"	l
a1d	ls.asm	/^ a1d:	5d                   	pop    %ebp$/;"	l
a1d	sh.asm	/^     a1d:	85 c0                	test   %eax,%eax$/;"	l
a1d	usertests.asm	/^     a1d:	e8 5e 25 00 00       	call   2f80 <printf>$/;"	l
a1e	ls.asm	/^ a1e:	c3                   	ret    $/;"	l
a1f	grep.asm	/^ a1f:	75 91                	jne    9b2 <malloc+0x42>$/;"	l
a1f	ls.asm	/^ a1f:	90                   	nop    $/;"	l
a1f	sh.asm	/^     a1f:	90                   	nop    $/;"	l
a2	forktest.asm	/^  a2:	c7 44 24 04 42 04 00 	movl   $0x442,0x4(%esp)$/;"	l
a2	ln.asm	/^  a2:	c3                   	ret    $/;"	l
a20	ls.asm	/^ a20:	8b 01                	mov    (%ecx),%eax$/;"	l
a20	sh.asm	/^     a20:	75 de                	jne    a00 <runcmd+0x50>$/;"	l
a21	grep.asm	/^ a21:	31 c0                	xor    %eax,%eax$/;"	l
a22	ls.asm	/^ a22:	89 06                	mov    %eax,(%esi)$/;"	l
a22	sh.asm	/^     a22:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
a22	usertests.asm	/^     a22:	e8 21 24 00 00       	call   2e48 <exit>$/;"	l
a23	grep.asm	/^ a23:	eb b2                	jmp    9d7 <malloc+0x67>$/;"	l
a24	ls.asm	/^ a24:	eb e8                	jmp    a0e <malloc+0x5e>$/;"	l
a25	grep.asm	/^ a25:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
a25	sh.asm	/^     a25:	89 04 24             	mov    %eax,(%esp)$/;"	l
a26	ls.asm	/^ a26:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx$/;"	l
a27	usertests.asm	/^     a27:	c7 44 24 04 d4 33 00 	movl   $0x33d4,0x4(%esp)$/;"	l
a28	grep.asm	/^ a28:	c7 05 c8 0a 00 00 c0 	movl   $0xac0,0xac8$/;"	l
a28	sh.asm	/^     a28:	e8 83 ff ff ff       	call   9b0 <runcmd>$/;"	l
a2c	ls.asm	/^ a2c:	bf 00 10 00 00       	mov    $0x1000,%edi$/;"	l
a2d	sh.asm	/^     a2d:	e8 b6 04 00 00       	call   ee8 <exit>$/;"	l
a2e	usertests.asm	/^     a2e:	00 $/;"	l
a2f	grep.asm	/^ a2f:	0a 00 00 $/;"	l
a2f	usertests.asm	/^     a2f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a3	args.asm	/^  a3:	74 1b                	je     c0 <strcmp+0x40>$/;"	l
a3	hello.asm	/^  a3:	31 d2                	xor    %edx,%edx$/;"	l
a3	kill.asm	/^  a3:	53                   	push   %ebx$/;"	l
a3	ln.asm	/^  a3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a3	ls.asm	/^  a3:	57                   	push   %edi$/;"	l
a3	usertests.asm	/^      a3:	53                   	push   %ebx$/;"	l
a3	zombie.asm	/^  a3:	31 d2                	xor    %edx,%edx$/;"	l
a31	ls.asm	/^ a31:	b8 00 80 00 00       	mov    $0x8000,%eax$/;"	l
a32	grep.asm	/^ a32:	be c0 0a 00 00       	mov    $0xac0,%esi$/;"	l
a32	sh.asm	/^     a32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a36	ls.asm	/^ a36:	76 04                	jbe    a3c <malloc+0x8c>$/;"	l
a36	usertests.asm	/^     a36:	e8 45 25 00 00       	call   2f80 <printf>$/;"	l
a37	grep.asm	/^ a37:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0$/;"	l
a38	ls.asm	/^ a38:	89 df                	mov    %ebx,%edi$/;"	l
a38	sh.asm	/^     a38:	e8 d3 fe ff ff       	call   910 <fork1>$/;"	l
a3a	ls.asm	/^ a3a:	89 f0                	mov    %esi,%eax$/;"	l
a3b	usertests.asm	/^     a3b:	e8 08 24 00 00       	call   2e48 <exit>$/;"	l
a3c	ls.asm	/^ a3c:	89 04 24             	mov    %eax,(%esp)$/;"	l
a3d	sh.asm	/^     a3d:	85 c0                	test   %eax,%eax$/;"	l
a3e	grep.asm	/^ a3e:	0a 00 00 $/;"	l
a3f	ls.asm	/^ a3f:	e8 ec fb ff ff       	call   630 <sbrk>$/;"	l
a3f	sh.asm	/^     a3f:	90                   	nop    $/;"	l
a4	echo.asm	/^  a4:	88 04 13             	mov    %al,(%ebx,%edx,1)$/;"	l
a4	grep.asm	/^  a4:	80 fa 2a             	cmp    $0x2a,%dl$/;"	l
a4	kill.asm	/^  a4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a4	ls.asm	/^  a4:	56                   	push   %esi$/;"	l
a4	mkdir.asm	/^  a4:	88 04 13             	mov    %al,(%ebx,%edx,1)$/;"	l
a4	rm.asm	/^  a4:	88 04 13             	mov    %al,(%ebx,%edx,1)$/;"	l
a4	sh.asm	/^      a4:	85 c0                	test   %eax,%eax$/;"	l
a4	usertests.asm	/^      a4:	31 db                	xor    %ebx,%ebx$/;"	l
a40	sh.asm	/^     a40:	0f 84 c2 00 00 00    	je     b08 <runcmd+0x158>$/;"	l
a40	usertests.asm	/^     a40:	55                   	push   %ebp$/;"	l
a41	grep.asm	/^ a41:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4$/;"	l
a41	usertests.asm	/^     a41:	89 e5                	mov    %esp,%ebp$/;"	l
a43	usertests.asm	/^     a43:	83 ec 08             	sub    $0x8,%esp$/;"	l
a44	ls.asm	/^ a44:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
a46	sh.asm	/^     a46:	66 90                	xchg   %ax,%ax$/;"	l
a46	usertests.asm	/^     a46:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
a47	ls.asm	/^ a47:	74 18                	je     a61 <malloc+0xb1>$/;"	l
a48	grep.asm	/^ a48:	00 00 00 $/;"	l
a48	sh.asm	/^     a48:	e8 a3 04 00 00       	call   ef0 <wait>$/;"	l
a49	ls.asm	/^ a49:	89 78 04             	mov    %edi,0x4(%eax)$/;"	l
a4b	grep.asm	/^ a4b:	e9 43 ff ff ff       	jmp    993 <malloc+0x23>$/;"	l
a4b	usertests.asm	/^     a4b:	c7 44 24 04 ff 35 00 	movl   $0x35ff,0x4(%esp)$/;"	l
a4c	ls.asm	/^ a4c:	83 c0 08             	add    $0x8,%eax$/;"	l
a4d	sh.asm	/^     a4d:	8b 43 08             	mov    0x8(%ebx),%eax$/;"	l
a4f	ls.asm	/^ a4f:	89 04 24             	mov    %eax,(%esp)$/;"	l
a5	args.asm	/^  a5:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
a5	hello.asm	/^  a5:	0f b6 c3             	movzbl %bl,%eax$/;"	l
a5	ls.asm	/^  a5:	53                   	push   %ebx$/;"	l
a5	zombie.asm	/^  a5:	0f b6 c3             	movzbl %bl,%eax$/;"	l
a50	grep.asm	/^ a50:	89 ca                	mov    %ecx,%edx$/;"	l
a50	sh.asm	/^     a50:	89 04 24             	mov    %eax,(%esp)$/;"	l
a52	grep.asm	/^ a52:	e9 68 ff ff ff       	jmp    9bf <malloc+0x4f>$/;"	l
a52	ls.asm	/^ a52:	e8 b9 fe ff ff       	call   910 <free>$/;"	l
a52	usertests.asm	/^     a52:	00 $/;"	l
a53	sh.asm	/^     a53:	e8 58 ff ff ff       	call   9b0 <runcmd>$/;"	l
a53	usertests.asm	/^     a53:	89 04 24             	mov    %eax,(%esp)$/;"	l
a56	usertests.asm	/^     a56:	e8 25 25 00 00       	call   2f80 <printf>$/;"	l
a57	ls.asm	/^ a57:	8b 15 14 0b 00 00    	mov    0xb14,%edx$/;"	l
a58	sh.asm	/^     a58:	e8 8b 04 00 00       	call   ee8 <exit>$/;"	l
a5b	usertests.asm	/^     a5b:	c7 04 24 0b 36 00 00 	movl   $0x360b,(%esp)$/;"	l
a5d	ls.asm	/^ a5d:	85 d2                	test   %edx,%edx$/;"	l
a5d	sh.asm	/^     a5d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
a5f	ls.asm	/^ a5f:	75 91                	jne    9f2 <malloc+0x42>$/;"	l
a6	ls.asm	/^  a6:	81 ec 5c 02 00 00    	sub    $0x25c,%esp$/;"	l
a6	sh.asm	/^      a6:	75 f0                	jne    98 <nulterminate+0x98>$/;"	l
a6	usertests.asm	/^      a6:	83 ec 14             	sub    $0x14,%esp$/;"	l
a60	sh.asm	/^     a60:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
a61	ls.asm	/^ a61:	31 c0                	xor    %eax,%eax$/;"	l
a62	usertests.asm	/^     a62:	e8 49 24 00 00       	call   2eb0 <mkdir>$/;"	l
a63	ls.asm	/^ a63:	eb b2                	jmp    a17 <malloc+0x67>$/;"	l
a63	sh.asm	/^     a63:	89 04 24             	mov    %eax,(%esp)$/;"	l
a65	ls.asm	/^ a65:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
a66	sh.asm	/^     a66:	e8 8d 04 00 00       	call   ef8 <pipe>$/;"	l
a67	usertests.asm	/^     a67:	85 c0                	test   %eax,%eax$/;"	l
a68	ls.asm	/^ a68:	c7 05 14 0b 00 00 0c 	movl   $0xb0c,0xb14$/;"	l
a69	usertests.asm	/^     a69:	78 47                	js     ab2 <dirtest+0x72>$/;"	l
a6b	sh.asm	/^     a6b:	85 c0                	test   %eax,%eax$/;"	l
a6b	usertests.asm	/^     a6b:	c7 04 24 0b 36 00 00 	movl   $0x360b,(%esp)$/;"	l
a6d	sh.asm	/^     a6d:	0f 88 25 01 00 00    	js     b98 <runcmd+0x1e8>$/;"	l
a6f	ls.asm	/^ a6f:	0b 00 00 $/;"	l
a7	cat.asm	/^  a7:	00 $/;"	l
a7	echo.asm	/^  a7:	83 c2 01             	add    $0x1,%edx$/;"	l
a7	grep.asm	/^  a7:	74 37                	je     e0 <matchhere+0x80>$/;"	l
a7	init.asm	/^  a7:	e8 f4 03 00 00       	call   4a0 <printf>$/;"	l
a7	kill.asm	/^  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
a7	mkdir.asm	/^  a7:	83 c2 01             	add    $0x1,%edx$/;"	l
a7	rm.asm	/^  a7:	83 c2 01             	add    $0x1,%edx$/;"	l
a72	ls.asm	/^ a72:	be 0c 0b 00 00       	mov    $0xb0c,%esi$/;"	l
a72	usertests.asm	/^     a72:	e8 41 24 00 00       	call   2eb8 <chdir>$/;"	l
a73	sh.asm	/^     a73:	e8 98 fe ff ff       	call   910 <fork1>$/;"	l
a77	ls.asm	/^ a77:	c7 05 0c 0b 00 00 0c 	movl   $0xb0c,0xb0c$/;"	l
a77	usertests.asm	/^     a77:	85 c0                	test   %eax,%eax$/;"	l
a78	sh.asm	/^     a78:	85 c0                	test   %eax,%eax$/;"	l
a79	usertests.asm	/^     a79:	78 51                	js     acc <dirtest+0x8c>$/;"	l
a7a	sh.asm	/^     a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a7b	usertests.asm	/^     a7b:	c7 04 24 23 39 00 00 	movl   $0x3923,(%esp)$/;"	l
a7e	ls.asm	/^ a7e:	0b 00 00 $/;"	l
a8	args.asm	/^  a8:	38 d8                	cmp    %bl,%al$/;"	l
a8	cat.asm	/^  a8:	8b 07                	mov    (%edi),%eax$/;"	l
a8	hello.asm	/^  a8:	29 c2                	sub    %eax,%edx$/;"	l
a8	sh.asm	/^      a8:	89 d8                	mov    %ebx,%eax$/;"	l
a8	wc.asm	/^  a8:	00 $/;"	l
a8	zombie.asm	/^  a8:	29 c2                	sub    %eax,%edx$/;"	l
a80	sh.asm	/^     a80:	0f 84 d2 00 00 00    	je     b58 <runcmd+0x1a8>$/;"	l
a81	ls.asm	/^ a81:	c7 05 10 0b 00 00 00 	movl   $0x0,0xb10$/;"	l
a82	usertests.asm	/^     a82:	e8 31 24 00 00       	call   2eb8 <chdir>$/;"	l
a86	sh.asm	/^     a86:	66 90                	xchg   %ax,%ax$/;"	l
a87	usertests.asm	/^     a87:	85 c0                	test   %eax,%eax$/;"	l
a88	ls.asm	/^ a88:	00 00 00 $/;"	l
a88	sh.asm	/^     a88:	e8 83 fe ff ff       	call   910 <fork1>$/;"	l
a89	usertests.asm	/^     a89:	78 5b                	js     ae6 <dirtest+0xa6>$/;"	l
a8b	ls.asm	/^ a8b:	e9 43 ff ff ff       	jmp    9d3 <malloc+0x23>$/;"	l
a8b	usertests.asm	/^     a8b:	c7 04 24 0b 36 00 00 	movl   $0x360b,(%esp)$/;"	l
a8d	sh.asm	/^     a8d:	85 c0                	test   %eax,%eax$/;"	l
a8f	sh.asm	/^     a8f:	90                   	nop    $/;"	l
a9	forktest.asm	/^  a9:	00 $/;"	l
a9	grep.asm	/^  a9:	80 f9 24             	cmp    $0x24,%cl$/;"	l
a9	ln.asm	/^  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
a9	usertests.asm	/^      a9:	c7 44 24 04 94 33 00 	movl   $0x3394,0x4(%esp)$/;"	l
a9	wc.asm	/^  a9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a90	ls.asm	/^ a90:	89 ca                	mov    %ecx,%edx$/;"	l
a90	sh.asm	/^     a90:	0f 84 82 00 00 00    	je     b18 <runcmd+0x168>$/;"	l
a92	ls.asm	/^ a92:	e9 68 ff ff ff       	jmp    9ff <malloc+0x4f>$/;"	l
a92	usertests.asm	/^     a92:	e8 01 24 00 00       	call   2e98 <unlink>$/;"	l
a96	sh.asm	/^     a96:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a97	usertests.asm	/^     a97:	85 c0                	test   %eax,%eax$/;"	l
a99	sh.asm	/^     a99:	89 04 24             	mov    %eax,(%esp)$/;"	l
a99	usertests.asm	/^     a99:	78 65                	js     b00 <dirtest+0xc0>$/;"	l
a9b	usertests.asm	/^     a9b:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
a9c	sh.asm	/^     a9c:	e8 6f 04 00 00       	call   f10 <close>$/;"	l
aa	args.asm	/^  aa:	74 ec                	je     98 <strcmp+0x18>$/;"	l
aa	cat.asm	/^  aa:	89 04 24             	mov    %eax,(%esp)$/;"	l
aa	echo.asm	/^  aa:	84 c0                	test   %al,%al$/;"	l
aa	forktest.asm	/^  aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
aa	hello.asm	/^  aa:	89 d0                	mov    %edx,%eax$/;"	l
aa	kill.asm	/^  aa:	0f b6 02             	movzbl (%edx),%eax$/;"	l
aa	mkdir.asm	/^  aa:	84 c0                	test   %al,%al$/;"	l
aa	rm.asm	/^  aa:	84 c0                	test   %al,%al$/;"	l
aa	sh.asm	/^      aa:	83 c4 04             	add    $0x4,%esp$/;"	l
aa	zombie.asm	/^  aa:	89 d0                	mov    %edx,%eax$/;"	l
aa0	usertests.asm	/^     aa0:	c7 44 24 04 ff 35 00 	movl   $0x35ff,0x4(%esp)$/;"	l
aa1	sh.asm	/^     aa1:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
aa4	sh.asm	/^     aa4:	89 04 24             	mov    %eax,(%esp)$/;"	l
aa7	sh.asm	/^     aa7:	e8 64 04 00 00       	call   f10 <close>$/;"	l
aa7	usertests.asm	/^     aa7:	00 $/;"	l
aa8	usertests.asm	/^     aa8:	89 04 24             	mov    %eax,(%esp)$/;"	l
aab	usertests.asm	/^     aab:	e8 d0 24 00 00       	call   2f80 <printf>$/;"	l
aac	sh.asm	/^     aac:	e8 3f 04 00 00       	call   ef0 <wait>$/;"	l
ab0	usertests.asm	/^     ab0:	c9                   	leave  $/;"	l
ab1	sh.asm	/^     ab1:	e8 3a 04 00 00       	call   ef0 <wait>$/;"	l
ab1	usertests.asm	/^     ab1:	c3                   	ret    $/;"	l
ab2	usertests.asm	/^     ab2:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
ab6	sh.asm	/^     ab6:	66 90                	xchg   %ax,%ax$/;"	l
ab7	usertests.asm	/^     ab7:	c7 44 24 04 10 36 00 	movl   $0x3610,0x4(%esp)$/;"	l
ab8	sh.asm	/^     ab8:	e8 2b 04 00 00       	call   ee8 <exit>$/;"	l
abd	sh.asm	/^     abd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
abe	usertests.asm	/^     abe:	00 $/;"	l
abf	usertests.asm	/^     abf:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac	args.asm	/^  ac:	0f b6 d0             	movzbl %al,%edx$/;"	l
ac	echo.asm	/^  ac:	75 f2                	jne    a0 <strcpy+0x10>$/;"	l
ac	grep.asm	/^  ac:	89 c3                	mov    %eax,%ebx$/;"	l
ac	hello.asm	/^  ac:	5b                   	pop    %ebx$/;"	l
ac	init.asm	/^  ac:	e8 b7 02 00 00       	call   368 <exit>$/;"	l
ac	ls.asm	/^  ac:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
ac	mkdir.asm	/^  ac:	75 f2                	jne    a0 <strcpy+0x10>$/;"	l
ac	rm.asm	/^  ac:	75 f2                	jne    a0 <strcpy+0x10>$/;"	l
ac	zombie.asm	/^  ac:	5b                   	pop    %ebx$/;"	l
ac0	sh.asm	/^     ac0:	8b 43 14             	mov    0x14(%ebx),%eax$/;"	l
ac2	usertests.asm	/^     ac2:	e8 b9 24 00 00       	call   2f80 <printf>$/;"	l
ac3	sh.asm	/^     ac3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac6	sh.asm	/^     ac6:	e8 45 04 00 00       	call   f10 <close>$/;"	l
ac7	usertests.asm	/^     ac7:	e8 7c 23 00 00       	call   2e48 <exit>$/;"	l
acb	sh.asm	/^     acb:	8b 43 10             	mov    0x10(%ebx),%eax$/;"	l
acc	usertests.asm	/^     acc:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
accessed	page.h	/^	unsigned int accessed: 1;$/;"	m	struct:page
ace	sh.asm	/^     ace:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
ad	cat.asm	/^  ad:	e8 e6 02 00 00       	call   398 <open>$/;"	l
ad	hello.asm	/^  ad:	5d                   	pop    %ebp$/;"	l
ad	kill.asm	/^  ad:	84 c0                	test   %al,%al$/;"	l
ad	sh.asm	/^      ad:	5b                   	pop    %ebx$/;"	l
ad	zombie.asm	/^  ad:	5d                   	pop    %ebp$/;"	l
ad1	usertests.asm	/^     ad1:	c7 44 24 04 1e 36 00 	movl   $0x361e,0x4(%esp)$/;"	l
ad2	sh.asm	/^     ad2:	8b 43 08             	mov    0x8(%ebx),%eax$/;"	l
ad5	sh.asm	/^     ad5:	89 04 24             	mov    %eax,(%esp)$/;"	l
ad8	sh.asm	/^     ad8:	e8 4b 04 00 00       	call   f28 <open>$/;"	l
ad8	usertests.asm	/^     ad8:	00 $/;"	l
ad9	usertests.asm	/^     ad9:	89 04 24             	mov    %eax,(%esp)$/;"	l
adc	usertests.asm	/^     adc:	e8 9f 24 00 00       	call   2f80 <printf>$/;"	l
add	sh.asm	/^     add:	85 c0                	test   %eax,%eax$/;"	l
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
addrs	fsvar.h	/^  uint addrs[NADDRS];$/;"	m	struct:inode
adf	sh.asm	/^     adf:	0f 89 3d ff ff ff    	jns    a22 <runcmd+0x72>$/;"	l
ae	echo.asm	/^  ae:	89 d8                	mov    %ebx,%eax$/;"	l
ae	grep.asm	/^  ae:	75 c8                	jne    78 <matchhere+0x18>$/;"	l
ae	hello.asm	/^  ae:	c3                   	ret    $/;"	l
ae	mkdir.asm	/^  ae:	89 d8                	mov    %ebx,%eax$/;"	l
ae	rm.asm	/^  ae:	89 d8                	mov    %ebx,%eax$/;"	l
ae	sh.asm	/^      ae:	5d                   	pop    %ebp$/;"	l
ae	zombie.asm	/^  ae:	c3                   	ret    $/;"	l
ae1	usertests.asm	/^     ae1:	e8 62 23 00 00       	call   2e48 <exit>$/;"	l
ae5	sh.asm	/^     ae5:	8b 43 08             	mov    0x8(%ebx),%eax$/;"	l
ae6	usertests.asm	/^     ae6:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
ae8	sh.asm	/^     ae8:	c7 44 24 04 94 14 00 	movl   $0x1494,0x4(%esp)$/;"	l
aeb	usertests.asm	/^     aeb:	c7 44 24 04 31 36 00 	movl   $0x3631,0x4(%esp)$/;"	l
aef	sh.asm	/^     aef:	00 $/;"	l
af	args.asm	/^  af:	0f b6 c3             	movzbl %bl,%eax$/;"	l
af	hello.asm	/^  af:	90                   	nop    $/;"	l
af	kill.asm	/^  af:	75 14                	jne    c5 <strcmp+0x25>$/;"	l
af	ls.asm	/^  af:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
af	sh.asm	/^      af:	c3                   	ret    $/;"	l
af	zombie.asm	/^  af:	90                   	nop    $/;"	l
af0	sh.asm	/^     af0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
af2	usertests.asm	/^     af2:	00 $/;"	l
af3	usertests.asm	/^     af3:	89 04 24             	mov    %eax,(%esp)$/;"	l
af6	usertests.asm	/^     af6:	e8 85 24 00 00       	call   2f80 <printf>$/;"	l
af7	sh.asm	/^     af7:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
afb	sh.asm	/^     afb:	e8 20 05 00 00       	call   1020 <printf>$/;"	l
afb	usertests.asm	/^     afb:	e8 48 23 00 00       	call   2e48 <exit>$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
alltraps	trapasm.S	/^alltraps:$/;"	l
ap	args.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	hello.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
arglen	kernel.asm	/^  arglen = 0;$/;"	d
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argp	kernel.asm	/^  argp = sz - arglen - 4*(argc+1);$/;"	d
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	args.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	hello.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	kernel.asm	/^  b = bget(dev, sector);$/;"	d
b	kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ln.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ls.asm	/^   b:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b	mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^       b:	c7 44 24 04 38 33 00 	movl   $0x3338,0x4(%esp)$/;"	l
b	wc.asm	/^   b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)$/;"	l
b	zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	echo.asm	/^  b0:	5b                   	pop    %ebx$/;"	l
b0	grep.asm	/^  b0:	84 d2                	test   %dl,%dl$/;"	l
b0	hello.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	ln.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	mkdir.asm	/^  b0:	5b                   	pop    %ebx$/;"	l
b0	rm.asm	/^  b0:	5b                   	pop    %ebx$/;"	l
b0	sh.asm	/^      b0:	55                   	push   %ebp$/;"	l
b0	usertests.asm	/^      b0:	00 $/;"	l
b0	wc.asm	/^  b0:	89 44 24 14          	mov    %eax,0x14(%esp)$/;"	l
b0	zombie.asm	/^  b0:	55                   	push   %ebp$/;"	l
b00	sh.asm	/^     b00:	e8 e3 03 00 00       	call   ee8 <exit>$/;"	l
b00	usertests.asm	/^     b00:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
b05	sh.asm	/^     b05:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
b05	usertests.asm	/^     b05:	c7 44 24 04 42 36 00 	movl   $0x3642,0x4(%esp)$/;"	l
b08	sh.asm	/^     b08:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
b0b	sh.asm	/^     b0b:	89 04 24             	mov    %eax,(%esp)$/;"	l
b0c	usertests.asm	/^     b0c:	00 $/;"	l
b0d	usertests.asm	/^     b0d:	89 04 24             	mov    %eax,(%esp)$/;"	l
b0e	sh.asm	/^     b0e:	e8 9d fe ff ff       	call   9b0 <runcmd>$/;"	l
b1	echo.asm	/^  b1:	5d                   	pop    %ebp$/;"	l
b1	forktest.asm	/^  b1:	e8 4a ff ff ff       	call   0 <printf>$/;"	l
b1	hello.asm	/^  b1:	31 c0                	xor    %eax,%eax$/;"	l
b1	init.asm	/^  b1:	c7 44 24 04 c0 08 00 	movl   $0x8c0,0x4(%esp)$/;"	l
b1	kill.asm	/^  b1:	eb 2d                	jmp    e0 <strcmp+0x40>$/;"	l
b1	ln.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	mkdir.asm	/^  b1:	5d                   	pop    %ebp$/;"	l
b1	rm.asm	/^  b1:	5d                   	pop    %ebp$/;"	l
b1	sh.asm	/^      b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	usertests.asm	/^      b1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b1	zombie.asm	/^  b1:	31 c0                	xor    %eax,%eax$/;"	l
b10	usertests.asm	/^     b10:	e8 6b 24 00 00       	call   2f80 <printf>$/;"	l
b13	sh.asm	/^     b13:	e9 2e ff ff ff       	jmp    a46 <runcmd+0x96>$/;"	l
b15	usertests.asm	/^     b15:	e8 2e 23 00 00       	call   2e48 <exit>$/;"	l
b18	sh.asm	/^     b18:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)$/;"	l
b1a	usertests.asm	/^     b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b1f	sh.asm	/^     b1f:	e8 ec 03 00 00       	call   f10 <close>$/;"	l
b2	args.asm	/^  b2:	29 c2                	sub    %eax,%edx$/;"	l
b2	cat.asm	/^  b2:	85 c0                	test   %eax,%eax$/;"	l
b2	echo.asm	/^  b2:	c3                   	ret    $/;"	l
b2	grep.asm	/^  b2:	75 c4                	jne    78 <matchhere+0x18>$/;"	l
b2	mkdir.asm	/^  b2:	c3                   	ret    $/;"	l
b2	rm.asm	/^  b2:	c3                   	ret    $/;"	l
b20	usertests.asm	/^     b20:	55                   	push   %ebp$/;"	l
b21	usertests.asm	/^     b21:	89 e5                	mov    %esp,%ebp$/;"	l
b23	usertests.asm	/^     b23:	53                   	push   %ebx$/;"	l
b24	sh.asm	/^     b24:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b24	usertests.asm	/^     b24:	bb 30 00 00 00       	mov    $0x30,%ebx$/;"	l
b27	sh.asm	/^     b27:	89 04 24             	mov    %eax,(%esp)$/;"	l
b29	usertests.asm	/^     b29:	83 ec 14             	sub    $0x14,%esp$/;"	l
b2a	sh.asm	/^     b2a:	e8 31 04 00 00       	call   f60 <dup>$/;"	l
b2c	usertests.asm	/^     b2c:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
b2f	sh.asm	/^     b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b3	echo.asm	/^  b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b3	hello.asm	/^  b3:	89 e5                	mov    %esp,%ebp$/;"	l
b3	kill.asm	/^  b3:	90                   	nop    $/;"	l
b3	ln.asm	/^  b3:	53                   	push   %ebx$/;"	l
b3	mkdir.asm	/^  b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b3	rm.asm	/^  b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b3	sh.asm	/^      b3:	57                   	push   %edi$/;"	l
b3	zombie.asm	/^  b3:	89 e5                	mov    %esp,%ebp$/;"	l
b31	usertests.asm	/^     b31:	c7 44 24 04 34 42 00 	movl   $0x4234,0x4(%esp)$/;"	l
b32	sh.asm	/^     b32:	89 04 24             	mov    %eax,(%esp)$/;"	l
b35	sh.asm	/^     b35:	e8 d6 03 00 00       	call   f10 <close>$/;"	l
b38	usertests.asm	/^     b38:	00 $/;"	l
b39	usertests.asm	/^     b39:	89 04 24             	mov    %eax,(%esp)$/;"	l
b3a	sh.asm	/^     b3a:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
b3c	usertests.asm	/^     b3c:	e8 3f 24 00 00       	call   2f80 <printf>$/;"	l
b3d	sh.asm	/^     b3d:	89 04 24             	mov    %eax,(%esp)$/;"	l
b4	args.asm	/^  b4:	89 d0                	mov    %edx,%eax$/;"	l
b4	cat.asm	/^  b4:	89 c3                	mov    %eax,%ebx$/;"	l
b4	grep.asm	/^  b4:	31 c0                	xor    %eax,%eax$/;"	l
b4	kill.asm	/^  b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b4	ln.asm	/^  b4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b4	sh.asm	/^      b4:	56                   	push   %esi$/;"	l
b4	wc.asm	/^  b4:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b40	sh.asm	/^     b40:	e8 cb 03 00 00       	call   f10 <close>$/;"	l
b41	usertests.asm	/^     b41:	c6 05 e0 4d 00 00 61 	movb   $0x61,0x4de0$/;"	l
b45	sh.asm	/^     b45:	8b 43 08             	mov    0x8(%ebx),%eax$/;"	l
b48	sh.asm	/^     b48:	89 04 24             	mov    %eax,(%esp)$/;"	l
b48	usertests.asm	/^     b48:	c6 05 e2 4d 00 00 00 	movb   $0x0,0x4de2$/;"	l
b4b	sh.asm	/^     b4b:	e8 60 fe ff ff       	call   9b0 <runcmd>$/;"	l
b4f	usertests.asm	/^     b4f:	90                   	nop    $/;"	l
b5	hello.asm	/^  b5:	31 c9                	xor    %ecx,%ecx$/;"	l
b5	sh.asm	/^      b5:	53                   	push   %ebx$/;"	l
b5	zombie.asm	/^  b5:	31 c9                	xor    %ecx,%ecx$/;"	l
b50	sh.asm	/^     b50:	e9 41 ff ff ff       	jmp    a96 <runcmd+0xe6>$/;"	l
b50	usertests.asm	/^     b50:	88 1d e1 4d 00 00    	mov    %bl,0x4de1$/;"	l
b55	sh.asm	/^     b55:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
b56	usertests.asm	/^     b56:	83 c3 01             	add    $0x1,%ebx$/;"	l
b58	sh.asm	/^     b58:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b59	usertests.asm	/^     b59:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
b5f	sh.asm	/^     b5f:	e8 ac 03 00 00       	call   f10 <close>$/;"	l
b6	args.asm	/^  b6:	5b                   	pop    %ebx$/;"	l
b6	cat.asm	/^  b6:	78 20                	js     d8 <main+0x68>$/;"	l
b6	forktest.asm	/^  b6:	83 c4 14             	add    $0x14,%esp$/;"	l
b6	grep.asm	/^  b6:	80 3e 00             	cmpb   $0x0,(%esi)$/;"	l
b6	ls.asm	/^  b6:	00 $/;"	l
b6	sh.asm	/^      b6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b60	usertests.asm	/^     b60:	00 $/;"	l
b61	usertests.asm	/^     b61:	c7 04 24 e0 4d 00 00 	movl   $0x4de0,(%esp)$/;"	l
b64	sh.asm	/^     b64:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
b67	sh.asm	/^     b67:	89 04 24             	mov    %eax,(%esp)$/;"	l
b68	usertests.asm	/^     b68:	e8 1b 23 00 00       	call   2e88 <open>$/;"	l
b6a	sh.asm	/^     b6a:	e8 f1 03 00 00       	call   f60 <dup>$/;"	l
b6d	usertests.asm	/^     b6d:	89 04 24             	mov    %eax,(%esp)$/;"	l
b6f	sh.asm	/^     b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b7	args.asm	/^  b7:	5d                   	pop    %ebp$/;"	l
b7	hello.asm	/^  b7:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b7	ln.asm	/^  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b7	ls.asm	/^  b7:	89 34 24             	mov    %esi,(%esp)$/;"	l
b7	wc.asm	/^  b7:	89 44 24 10          	mov    %eax,0x10(%esp)$/;"	l
b7	zombie.asm	/^  b7:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b70	usertests.asm	/^     b70:	e8 fb 22 00 00       	call   2e70 <close>$/;"	l
b72	sh.asm	/^     b72:	89 04 24             	mov    %eax,(%esp)$/;"	l
b75	sh.asm	/^     b75:	e8 96 03 00 00       	call   f10 <close>$/;"	l
b75	usertests.asm	/^     b75:	80 fb 64             	cmp    $0x64,%bl$/;"	l
b78	usertests.asm	/^     b78:	75 d6                	jne    b50 <createtest+0x30>$/;"	l
b7a	sh.asm	/^     b7a:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
b7a	usertests.asm	/^     b7a:	c6 05 e0 4d 00 00 61 	movb   $0x61,0x4de0$/;"	l
b7d	sh.asm	/^     b7d:	89 04 24             	mov    %eax,(%esp)$/;"	l
b8	args.asm	/^  b8:	c3                   	ret    $/;"	l
b8	cat.asm	/^  b8:	89 04 24             	mov    %eax,(%esp)$/;"	l
b8	init.asm	/^  b8:	00 $/;"	l
b8	kill.asm	/^  b8:	83 c2 01             	add    $0x1,%edx$/;"	l
b8	usertests.asm	/^      b8:	e8 c3 2e 00 00       	call   2f80 <printf>$/;"	l
b80	sh.asm	/^     b80:	e8 8b 03 00 00       	call   f10 <close>$/;"	l
b81	usertests.asm	/^     b81:	bb 30 00 00 00       	mov    $0x30,%ebx$/;"	l
b85	sh.asm	/^     b85:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
b86	usertests.asm	/^     b86:	c6 05 e2 4d 00 00 00 	movb   $0x0,0x4de2$/;"	l
b88	sh.asm	/^     b88:	89 04 24             	mov    %eax,(%esp)$/;"	l
b8b	sh.asm	/^     b8b:	e8 20 fe ff ff       	call   9b0 <runcmd>$/;"	l
b8d	usertests.asm	/^     b8d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
b9	args.asm	/^  b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b9	echo.asm	/^  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
b9	forktest.asm	/^  b9:	5b                   	pop    %ebx$/;"	l
b9	grep.asm	/^  b9:	0f 94 c0             	sete   %al$/;"	l
b9	init.asm	/^  b9:	c7 04 24 85 08 00 00 	movl   $0x885,(%esp)$/;"	l
b9	mkdir.asm	/^  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
b9	rm.asm	/^  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
b9	sh.asm	/^      b9:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
b90	sh.asm	/^     b90:	e9 f1 fe ff ff       	jmp    a86 <runcmd+0xd6>$/;"	l
b90	usertests.asm	/^     b90:	88 1d e1 4d 00 00    	mov    %bl,0x4de1$/;"	l
b95	sh.asm	/^     b95:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
b96	usertests.asm	/^     b96:	83 c3 01             	add    $0x1,%ebx$/;"	l
b98	sh.asm	/^     b98:	c7 04 24 a4 14 00 00 	movl   $0x14a4,(%esp)$/;"	l
b99	usertests.asm	/^     b99:	c7 04 24 e0 4d 00 00 	movl   $0x4de0,(%esp)$/;"	l
b9f	sh.asm	/^     b9f:	e8 7c f8 ff ff       	call   420 <panic>$/;"	l
ba	forktest.asm	/^  ba:	5d                   	pop    %ebp$/;"	l
ba	hello.asm	/^  ba:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
ba	ln.asm	/^  ba:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ba	ls.asm	/^  ba:	e8 29 05 00 00       	call   5e8 <open>$/;"	l
ba	zombie.asm	/^  ba:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
ba0	usertests.asm	/^     ba0:	e8 f3 22 00 00       	call   2e98 <unlink>$/;"	l
ba4	sh.asm	/^     ba4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ba5	usertests.asm	/^     ba5:	80 fb 64             	cmp    $0x64,%bl$/;"	l
ba8	sh.asm	/^     ba8:	e9 c6 fe ff ff       	jmp    a73 <runcmd+0xc3>$/;"	l
ba8	usertests.asm	/^     ba8:	75 e6                	jne    b90 <createtest+0x70>$/;"	l
baa	usertests.asm	/^     baa:	a1 a0 45 00 00       	mov    0x45a0,%eax$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	sh.asm	/^     bad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
baf	usertests.asm	/^     baf:	c7 44 24 04 5c 42 00 	movl   $0x425c,0x4(%esp)$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	kalloc.c	/^static Header base;$/;"	v	file:
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	cat.asm	/^  bb:	83 c6 01             	add    $0x1,%esi$/;"	l
bb	forktest.asm	/^  bb:	c3                   	ret    $/;"	l
bb	kill.asm	/^  bb:	83 c1 01             	add    $0x1,%ecx$/;"	l
bb	wc.asm	/^  bb:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bb0	sh.asm	/^     bb0:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
bb4	sh.asm	/^     bb4:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
bb6	usertests.asm	/^     bb6:	00 $/;"	l
bb7	sh.asm	/^     bb7:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
bb7	usertests.asm	/^     bb7:	89 04 24             	mov    %eax,(%esp)$/;"	l
bba	sh.asm	/^     bba:	55                   	push   %ebp$/;"	l
bba	usertests.asm	/^     bba:	e8 c1 23 00 00       	call   2f80 <printf>$/;"	l
bbb	sh.asm	/^     bbb:	89 e5                	mov    %esp,%ebp$/;"	l
bbd	sh.asm	/^     bbd:	51                   	push   %ecx$/;"	l
bbe	sh.asm	/^     bbe:	83 ec 14             	sub    $0x14,%esp$/;"	l
bbf	usertests.asm	/^     bbf:	83 c4 14             	add    $0x14,%esp$/;"	l
bc	forktest.asm	/^  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bc	grep.asm	/^  bc:	eb 04                	jmp    c2 <matchhere+0x62>$/;"	l
bc	sh.asm	/^      bc:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
bc1	sh.asm	/^     bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bc2	usertests.asm	/^     bc2:	5b                   	pop    %ebx$/;"	l
bc3	usertests.asm	/^     bc3:	5d                   	pop    %ebp$/;"	l
bc4	usertests.asm	/^     bc4:	c3                   	ret    $/;"	l
bc5	usertests.asm	/^     bc5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bc8	sh.asm	/^     bc8:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)$/;"	l
bc9	usertests.asm	/^     bc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon1
bcf	sh.asm	/^     bcf:	00 $/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bcpu	kernel.asm	/^        bcpu = &cpus[ncpu];$/;"	d
bcpu	kernel.asm	/^  bcpu = &cpus[0];$/;"	d
bcpu	mp.c	/^static struct cpu *bcpu;$/;"	v	typeref:struct:cpu	file:
bd	hello.asm	/^  bd:	74 0c                	je     cb <strlen+0x1b>$/;"	l
bd	ln.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	usertests.asm	/^      bd:	eb 13                	jmp    d2 <forktest+0x32>$/;"	l
bd	zombie.asm	/^  bd:	74 0c                	je     cb <strlen+0x1b>$/;"	l
bd0	sh.asm	/^     bd0:	c7 04 24 a9 14 00 00 	movl   $0x14a9,(%esp)$/;"	l
bd0	usertests.asm	/^     bd0:	55                   	push   %ebp$/;"	l
bd1	usertests.asm	/^     bd1:	89 e5                	mov    %esp,%ebp$/;"	l
bd3	usertests.asm	/^     bd3:	53                   	push   %ebx$/;"	l
bd4	usertests.asm	/^     bd4:	83 ec 14             	sub    $0x14,%esp$/;"	l
bd7	sh.asm	/^     bd7:	e8 4c 03 00 00       	call   f28 <open>$/;"	l
bd7	usertests.asm	/^     bd7:	c7 44 24 04 56 36 00 	movl   $0x3656,0x4(%esp)$/;"	l
bda	kernel.asm	/^  bda = (uchar*)0x400;$/;"	d
bdc	sh.asm	/^     bdc:	85 c0                	test   %eax,%eax$/;"	l
bde	sh.asm	/^     bde:	78 2b                	js     c0b <main+0x5b>$/;"	l
bde	usertests.asm	/^     bde:	00 $/;"	l
bdf	usertests.asm	/^     bdf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
be	cat.asm	/^  be:	83 c7 04             	add    $0x4,%edi$/;"	l
be	grep.asm	/^  be:	66 90                	xchg   %ax,%ax$/;"	l
be	kill.asm	/^  be:	0f b6 02             	movzbl (%edx),%eax$/;"	l
be	wc.asm	/^  be:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
be0	sh.asm	/^     be0:	83 f8 02             	cmp    $0x2,%eax$/;"	l
be3	sh.asm	/^     be3:	7e e3                	jle    bc8 <main+0x18>$/;"	l
be5	sh.asm	/^     be5:	89 04 24             	mov    %eax,(%esp)$/;"	l
be6	usertests.asm	/^     be6:	e8 95 23 00 00       	call   2f80 <printf>$/;"	l
be8	sh.asm	/^     be8:	e8 23 03 00 00       	call   f10 <close>$/;"	l
beb	usertests.asm	/^     beb:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)$/;"	l
bed	sh.asm	/^     bed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
bf	hello.asm	/^  bf:	90                   	nop    $/;"	l
bf	ln.asm	/^  bf:	75 14                	jne    d5 <strcmp+0x25>$/;"	l
bf	ls.asm	/^  bf:	85 c0                	test   %eax,%eax$/;"	l
bf	sh.asm	/^      bf:	8b 1f                	mov    (%edi),%ebx$/;"	l
bf	usertests.asm	/^      bf:	90                   	nop    $/;"	l
bf	zombie.asm	/^  bf:	90                   	nop    $/;"	l
bf0	sh.asm	/^     bf0:	eb 19                	jmp    c0b <main+0x5b>$/;"	l
bf2	sh.asm	/^     bf2:	c7 04 24 00 15 00 00 	movl   $0x1500,(%esp)$/;"	l
bf2	usertests.asm	/^     bf2:	00 $/;"	l
bf3	usertests.asm	/^     bf3:	c7 04 24 63 36 00 00 	movl   $0x3663,(%esp)$/;"	l
bf9	sh.asm	/^     bf9:	e8 92 fc ff ff       	call   890 <parsecmd>$/;"	l
bfa	usertests.asm	/^     bfa:	e8 89 22 00 00       	call   2e88 <open>$/;"	l
bfe	sh.asm	/^     bfe:	89 04 24             	mov    %eax,(%esp)$/;"	l
bff	usertests.asm	/^     bff:	85 c0                	test   %eax,%eax$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint sector)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
bitblocks	mkfs.c	/^uint bitblocks;$/;"	v
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
booted	proc.h	/^  volatile uint booted;        \/\/ Has the CPU started?$/;"	m	struct:cpu
bootmain	bootmain.c	/^bootmain(int memsize)$/;"	f
bootothers	main.c	/^bootothers(void)$/;"	f	file:
bp	args.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	cat.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	hello.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum));$/;"	d
bp	kernel.asm	/^    bp = bread(dp->dev, bmap(dp, off \/ BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kernel.asm	/^ bp = (Header*) ap - 1;$/;"	d
bp	kill.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*) ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint sector)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon3	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	usertests.c	/^char buf[2048];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	args.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	bootother.asm	/^   c:	64 00 0f             	add    %cl,%fs:(%edi)$/;"	l
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	cat.asm	/^   c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^   c:	8b 7d 0c             	mov    0xc(%ebp),%edi$/;"	l
c	hello.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	74 05                	je     13 <nulterminate+0x13>$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	args.asm	/^  c0:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c0	echo.asm	/^  c0:	55                   	push   %ebp$/;"	l
c0	forktest.asm	/^  c0:	c7 44 24 04 50 04 00 	movl   $0x450,0x4(%esp)$/;"	l
c0	grep.asm	/^  c0:	31 c0                	xor    %eax,%eax$/;"	l
c0	hello.asm	/^  c0:	83 c0 01             	add    $0x1,%eax$/;"	l
c0	init.asm	/^  c0:	e8 db 02 00 00       	call   3a0 <exec>$/;"	l
c0	mkdir.asm	/^  c0:	55                   	push   %ebp$/;"	l
c0	rm.asm	/^  c0:	55                   	push   %ebp$/;"	l
c0	usertests.asm	/^      c0:	0f 84 7e 00 00 00    	je     144 <forktest+0xa4>$/;"	l
c0	zombie.asm	/^  c0:	83 c0 01             	add    $0x1,%eax$/;"	l
c01	sh.asm	/^     c01:	e8 aa fd ff ff       	call   9b0 <runcmd>$/;"	l
c01	usertests.asm	/^     c01:	0f 88 3a 01 00 00    	js     d41 <dirfile+0x171>$/;"	l
c06	sh.asm	/^     c06:	e8 e5 02 00 00       	call   ef0 <wait>$/;"	l
c07	usertests.asm	/^     c07:	89 04 24             	mov    %eax,(%esp)$/;"	l
c0a	usertests.asm	/^     c0a:	e8 61 22 00 00       	call   2e70 <close>$/;"	l
c0b	sh.asm	/^     c0b:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)$/;"	l
c0f	usertests.asm	/^     c0f:	c7 04 24 63 36 00 00 	movl   $0x3663,(%esp)$/;"	l
c1	cat.asm	/^  c1:	e8 3a ff ff ff       	call   0 <cat>$/;"	l
c1	echo.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c1	kill.asm	/^  c1:	84 c0                	test   %al,%al$/;"	l
c1	ln.asm	/^  c1:	eb 2d                	jmp    f0 <strcmp+0x40>$/;"	l
c1	ls.asm	/^  c1:	89 c7                	mov    %eax,%edi$/;"	l
c1	mkdir.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c1	rm.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c1	sh.asm	/^      c1:	39 f3                	cmp    %esi,%ebx$/;"	l
c12	sh.asm	/^     c12:	00 $/;"	l
c13	sh.asm	/^     c13:	c7 04 24 00 15 00 00 	movl   $0x1500,(%esp)$/;"	l
c16	usertests.asm	/^     c16:	e8 9d 22 00 00       	call   2eb8 <chdir>$/;"	l
c1a	sh.asm	/^     c1a:	e8 31 fd ff ff       	call   950 <getcmd>$/;"	l
c1b	usertests.asm	/^     c1b:	85 c0                	test   %eax,%eax$/;"	l
c1d	usertests.asm	/^     c1d:	0f 84 37 01 00 00    	je     d5a <dirfile+0x18a>$/;"	l
c1f	sh.asm	/^     c1f:	85 c0                	test   %eax,%eax$/;"	l
c2	grep.asm	/^  c2:	83 c4 10             	add    $0x10,%esp$/;"	l
c2	wc.asm	/^  c2:	e8 59 04 00 00       	call   520 <printf>$/;"	l
c21	sh.asm	/^     c21:	78 75                	js     c98 <main+0xe8>$/;"	l
c23	sh.asm	/^     c23:	80 3d 00 15 00 00 63 	cmpb   $0x63,0x1500$/;"	l
c23	usertests.asm	/^     c23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
c2a	sh.asm	/^     c2a:	75 09                	jne    c35 <main+0x85>$/;"	l
c2a	usertests.asm	/^     c2a:	00 $/;"	l
c2b	usertests.asm	/^     c2b:	c7 04 24 9c 36 00 00 	movl   $0x369c,(%esp)$/;"	l
c2c	sh.asm	/^     c2c:	80 3d 01 15 00 00 64 	cmpb   $0x64,0x1501$/;"	l
c3	args.asm	/^  c3:	31 d2                	xor    %edx,%edx$/;"	l
c3	echo.asm	/^  c3:	53                   	push   %ebx$/;"	l
c3	hello.asm	/^  c3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)$/;"	l
c3	kill.asm	/^  c3:	74 1b                	je     e0 <strcmp+0x40>$/;"	l
c3	ln.asm	/^  c3:	90                   	nop    $/;"	l
c3	ls.asm	/^  c3:	0f 88 8f 01 00 00    	js     258 <ls+0x1b8>$/;"	l
c3	mkdir.asm	/^  c3:	53                   	push   %ebx$/;"	l
c3	rm.asm	/^  c3:	53                   	push   %ebx$/;"	l
c3	sh.asm	/^      c3:	72 0a                	jb     cf <peek+0x1f>$/;"	l
c3	zombie.asm	/^  c3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)$/;"	l
c32	usertests.asm	/^     c32:	e8 51 22 00 00       	call   2e88 <open>$/;"	l
c33	sh.asm	/^     c33:	74 13                	je     c48 <main+0x98>$/;"	l
c35	sh.asm	/^     c35:	e8 d6 fc ff ff       	call   910 <fork1>$/;"	l
c37	usertests.asm	/^     c37:	85 c0                	test   %eax,%eax$/;"	l
c39	usertests.asm	/^     c39:	0f 89 e9 00 00 00    	jns    d28 <dirfile+0x158>$/;"	l
c3a	sh.asm	/^     c3a:	85 c0                	test   %eax,%eax$/;"	l
c3c	sh.asm	/^     c3c:	75 c8                	jne    c06 <main+0x56>$/;"	l
c3e	sh.asm	/^     c3e:	66 90                	xchg   %ax,%ax$/;"	l
c3f	usertests.asm	/^     c3f:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)$/;"	l
c4	echo.asm	/^  c4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c4	ln.asm	/^  c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c4	mkdir.asm	/^  c4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c4	rm.asm	/^  c4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c40	sh.asm	/^     c40:	eb b0                	jmp    bf2 <main+0x42>$/;"	l
c42	sh.asm	/^     c42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
c46	usertests.asm	/^     c46:	00 $/;"	l
c47	usertests.asm	/^     c47:	c7 04 24 9c 36 00 00 	movl   $0x369c,(%esp)$/;"	l
c48	sh.asm	/^     c48:	80 3d 02 15 00 00 20 	cmpb   $0x20,0x1502$/;"	l
c4e	usertests.asm	/^     c4e:	e8 35 22 00 00       	call   2e88 <open>$/;"	l
c4f	sh.asm	/^     c4f:	90                   	nop    $/;"	l
c5	args.asm	/^  c5:	0f b6 c3             	movzbl %bl,%eax$/;"	l
c5	grep.asm	/^  c5:	5b                   	pop    %ebx$/;"	l
c5	init.asm	/^  c5:	c7 44 24 04 88 08 00 	movl   $0x888,0x4(%esp)$/;"	l
c5	kill.asm	/^  c5:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c5	sh.asm	/^      c5:	eb 1f                	jmp    e6 <peek+0x36>$/;"	l
c50	sh.asm	/^     c50:	75 e3                	jne    c35 <main+0x85>$/;"	l
c52	sh.asm	/^     c52:	c7 04 24 00 15 00 00 	movl   $0x1500,(%esp)$/;"	l
c53	usertests.asm	/^     c53:	85 c0                	test   %eax,%eax$/;"	l
c55	usertests.asm	/^     c55:	0f 89 cd 00 00 00    	jns    d28 <dirfile+0x158>$/;"	l
c59	sh.asm	/^     c59:	e8 c2 00 00 00       	call   d20 <strlen>$/;"	l
c5b	usertests.asm	/^     c5b:	c7 04 24 9c 36 00 00 	movl   $0x369c,(%esp)$/;"	l
c5e	sh.asm	/^     c5e:	c7 04 24 03 15 00 00 	movl   $0x1503,(%esp)$/;"	l
c6	cat.asm	/^  c6:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
c6	grep.asm	/^  c6:	5e                   	pop    %esi$/;"	l
c6	usertests.asm	/^      c6:	83 c3 01             	add    $0x1,%ebx$/;"	l
c62	usertests.asm	/^     c62:	e8 49 22 00 00       	call   2eb0 <mkdir>$/;"	l
c65	sh.asm	/^     c65:	c6 80 ff 14 00 00 00 	movb   $0x0,0x14ff(%eax)$/;"	l
c67	usertests.asm	/^     c67:	85 c0                	test   %eax,%eax$/;"	l
c69	usertests.asm	/^     c69:	0f 84 04 01 00 00    	je     d73 <dirfile+0x1a3>$/;"	l
c6c	sh.asm	/^     c6c:	e8 e7 02 00 00       	call   f58 <chdir>$/;"	l
c6f	usertests.asm	/^     c6f:	c7 04 24 9c 36 00 00 	movl   $0x369c,(%esp)$/;"	l
c7	echo.asm	/^  c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
c7	forktest.asm	/^  c7:	00 $/;"	l
c7	grep.asm	/^  c7:	5d                   	pop    %ebp$/;"	l
c7	hello.asm	/^  c7:	75 f7                	jne    c0 <strlen+0x10>$/;"	l
c7	mkdir.asm	/^  c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
c7	rm.asm	/^  c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
c7	sh.asm	/^      c7:	90                   	nop    $/;"	l
c7	wc.asm	/^  c7:	83 c4 2c             	add    $0x2c,%esp$/;"	l
c7	zombie.asm	/^  c7:	75 f7                	jne    c0 <strlen+0x10>$/;"	l
c71	sh.asm	/^     c71:	85 c0                	test   %eax,%eax$/;"	l
c73	sh.asm	/^     c73:	79 96                	jns    c0b <main+0x5b>$/;"	l
c75	sh.asm	/^     c75:	c7 44 24 08 03 15 00 	movl   $0x1503,0x8(%esp)$/;"	l
c76	usertests.asm	/^     c76:	e8 1d 22 00 00       	call   2e98 <unlink>$/;"	l
c7b	usertests.asm	/^     c7b:	85 c0                	test   %eax,%eax$/;"	l
c7c	sh.asm	/^     c7c:	00 $/;"	l
c7d	sh.asm	/^     c7d:	c7 44 24 04 b1 14 00 	movl   $0x14b1,0x4(%esp)$/;"	l
c7d	usertests.asm	/^     c7d:	0f 84 09 01 00 00    	je     d8c <dirfile+0x1bc>$/;"	l
c8	args.asm	/^  c8:	29 c2                	sub    %eax,%edx$/;"	l
c8	forktest.asm	/^  c8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c8	grep.asm	/^  c8:	c3                   	ret    $/;"	l
c8	kill.asm	/^  c8:	38 d8                	cmp    %bl,%al$/;"	l
c8	ln.asm	/^  c8:	83 c2 01             	add    $0x1,%edx$/;"	l
c8	sh.asm	/^      c8:	83 c3 01             	add    $0x1,%ebx$/;"	l
c83	usertests.asm	/^     c83:	c7 44 24 04 9c 36 00 	movl   $0x369c,0x4(%esp)$/;"	l
c84	sh.asm	/^     c84:	00 $/;"	l
c85	sh.asm	/^     c85:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
c8a	usertests.asm	/^     c8a:	00 $/;"	l
c8b	usertests.asm	/^     c8b:	c7 04 24 94 34 00 00 	movl   $0x3494,(%esp)$/;"	l
c8c	sh.asm	/^     c8c:	e8 8f 03 00 00       	call   1020 <printf>$/;"	l
c9	cat.asm	/^  c9:	e8 b2 02 00 00       	call   380 <close>$/;"	l
c9	grep.asm	/^  c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c9	hello.asm	/^  c9:	89 c1                	mov    %eax,%ecx$/;"	l
c9	ls.asm	/^  c9:	8d 45 d0             	lea    -0x30(%ebp),%eax$/;"	l
c9	usertests.asm	/^      c9:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx$/;"	l
c9	zombie.asm	/^  c9:	89 c1                	mov    %eax,%ecx$/;"	l
c91	sh.asm	/^     c91:	e9 75 ff ff ff       	jmp    c0b <main+0x5b>$/;"	l
c92	usertests.asm	/^     c92:	e8 11 22 00 00       	call   2ea8 <link>$/;"	l
c96	sh.asm	/^     c96:	66 90                	xchg   %ax,%ax$/;"	l
c97	usertests.asm	/^     c97:	85 c0                	test   %eax,%eax$/;"	l
c98	sh.asm	/^     c98:	e8 4b 02 00 00       	call   ee8 <exit>$/;"	l
c99	usertests.asm	/^     c99:	0f 84 06 01 00 00    	je     da5 <dirfile+0x1d5>$/;"	l
c9d	sh.asm	/^     c9d:	90                   	nop    $/;"	l
c9e	sh.asm	/^     c9e:	90                   	nop    $/;"	l
c9f	sh.asm	/^     c9f:	90                   	nop    $/;"	l
c9f	usertests.asm	/^     c9f:	c7 04 24 63 36 00 00 	movl   $0x3663,(%esp)$/;"	l
ca	args.asm	/^  ca:	89 d0                	mov    %edx,%eax$/;"	l
ca	echo.asm	/^  ca:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ca	kill.asm	/^  ca:	74 ec                	je     b8 <strcmp+0x18>$/;"	l
ca	mkdir.asm	/^  ca:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ca	rm.asm	/^  ca:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ca	wc.asm	/^  ca:	5b                   	pop    %ebx$/;"	l
ca0	sh.asm	/^     ca0:	55                   	push   %ebp$/;"	l
ca1	sh.asm	/^     ca1:	31 d2                	xor    %edx,%edx$/;"	l
ca3	sh.asm	/^     ca3:	89 e5                	mov    %esp,%ebp$/;"	l
ca5	sh.asm	/^     ca5:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
ca6	usertests.asm	/^     ca6:	e8 ed 21 00 00       	call   2e98 <unlink>$/;"	l
ca8	sh.asm	/^     ca8:	53                   	push   %ebx$/;"	l
ca9	sh.asm	/^     ca9:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
cab	usertests.asm	/^     cab:	85 c0                	test   %eax,%eax$/;"	l
cac	sh.asm	/^     cac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
cad	usertests.asm	/^     cad:	0f 85 0b 01 00 00    	jne    dbe <dirfile+0x1ee>$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	hello.asm	/^  cb:	89 c8                	mov    %ecx,%eax$/;"	l
cb	ln.asm	/^  cb:	83 c1 01             	add    $0x1,%ecx$/;"	l
cb	sh.asm	/^      cb:	39 de                	cmp    %ebx,%esi$/;"	l
cb	wc.asm	/^  cb:	5e                   	pop    %esi$/;"	l
cb	zombie.asm	/^  cb:	89 c8                	mov    %ecx,%eax$/;"	l
cb0	sh.asm	/^     cb0:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax$/;"	l
cb3	usertests.asm	/^     cb3:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)$/;"	l
cb4	sh.asm	/^     cb4:	88 04 13             	mov    %al,(%ebx,%edx,1)$/;"	l
cb7	sh.asm	/^     cb7:	83 c2 01             	add    $0x1,%edx$/;"	l
cba	sh.asm	/^     cba:	84 c0                	test   %al,%al$/;"	l
cba	usertests.asm	/^     cba:	00 $/;"	l
cbb	usertests.asm	/^     cbb:	c7 04 24 24 39 00 00 	movl   $0x3924,(%esp)$/;"	l
cbc	sh.asm	/^     cbc:	75 f2                	jne    cb0 <strcpy+0x10>$/;"	l
cbe	sh.asm	/^     cbe:	89 d8                	mov    %ebx,%eax$/;"	l
cc	args.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	args.asm	/^  cc:	5b                   	pop    %ebx$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	hello.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^  cc:	00 $/;"	l
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	0f b6 d0             	movzbl %al,%edx$/;"	l
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^  cc:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	wc.asm	/^  cc:	5f                   	pop    %edi$/;"	l
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	sh.asm	/^     cc0:	5b                   	pop    %ebx$/;"	l
cc1	sh.asm	/^     cc1:	5d                   	pop    %ebp$/;"	l
cc2	sh.asm	/^     cc2:	c3                   	ret    $/;"	l
cc2	usertests.asm	/^     cc2:	e8 c1 21 00 00       	call   2e88 <open>$/;"	l
cc3	sh.asm	/^     cc3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
cc7	usertests.asm	/^     cc7:	85 c0                	test   %eax,%eax$/;"	l
cc9	sh.asm	/^     cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
cc9	usertests.asm	/^     cc9:	0f 89 08 01 00 00    	jns    dd7 <dirfile+0x207>$/;"	l
ccf	usertests.asm	/^     ccf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
cd	args.asm	/^  cd:	5d                   	pop    %ebp$/;"	l
cd	echo.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd	hello.asm	/^  cd:	5d                   	pop    %ebp$/;"	l
cd	init.asm	/^  cd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
cd	mkdir.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd	rm.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd	sh.asm	/^      cd:	76 17                	jbe    e6 <peek+0x36>$/;"	l
cd	wc.asm	/^  cd:	5d                   	pop    %ebp$/;"	l
cd	zombie.asm	/^  cd:	5d                   	pop    %ebp$/;"	l
cd0	sh.asm	/^     cd0:	55                   	push   %ebp$/;"	l
cd1	sh.asm	/^     cd1:	89 e5                	mov    %esp,%ebp$/;"	l
cd3	sh.asm	/^     cd3:	53                   	push   %ebx$/;"	l
cd4	sh.asm	/^     cd4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
cd6	usertests.asm	/^     cd6:	00 $/;"	l
cd7	sh.asm	/^     cd7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
cd7	usertests.asm	/^     cd7:	c7 04 24 24 39 00 00 	movl   $0x3924,(%esp)$/;"	l
cda	sh.asm	/^     cda:	0f b6 02             	movzbl (%edx),%eax$/;"	l
cdd	sh.asm	/^     cdd:	84 c0                	test   %al,%al$/;"	l
cde	usertests.asm	/^     cde:	e8 a5 21 00 00       	call   2e88 <open>$/;"	l
cdf	sh.asm	/^     cdf:	75 14                	jne    cf5 <strcmp+0x25>$/;"	l
ce	args.asm	/^  ce:	c3                   	ret    $/;"	l
ce	cat.asm	/^  ce:	39 75 ec             	cmp    %esi,-0x14(%ebp)$/;"	l
ce	hello.asm	/^  ce:	c3                   	ret    $/;"	l
ce	ln.asm	/^  ce:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ce	wc.asm	/^  ce:	c3                   	ret    $/;"	l
ce	zombie.asm	/^  ce:	c3                   	ret    $/;"	l
ce1	sh.asm	/^     ce1:	eb 2d                	jmp    d10 <strcmp+0x40>$/;"	l
ce3	sh.asm	/^     ce3:	90                   	nop    $/;"	l
ce3	usertests.asm	/^     ce3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
ce4	sh.asm	/^     ce4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ce8	sh.asm	/^     ce8:	83 c2 01             	add    $0x1,%edx$/;"	l
cea	usertests.asm	/^     cea:	00 $/;"	l
ceb	sh.asm	/^     ceb:	83 c1 01             	add    $0x1,%ecx$/;"	l
ceb	usertests.asm	/^     ceb:	c7 44 24 04 07 3a 00 	movl   $0x3a07,0x4(%esp)$/;"	l
cee	sh.asm	/^     cee:	0f b6 02             	movzbl (%edx),%eax$/;"	l
cf	args.asm	/^  cf:	90                   	nop    $/;"	l
cf	echo.asm	/^  cf:	75 14                	jne    e5 <strcmp+0x25>$/;"	l
cf	forktest.asm	/^  cf:	e8 2c ff ff ff       	call   0 <printf>$/;"	l
cf	hello.asm	/^  cf:	90                   	nop    $/;"	l
cf	kill.asm	/^  cf:	0f b6 c3             	movzbl %bl,%eax$/;"	l
cf	mkdir.asm	/^  cf:	75 14                	jne    e5 <strcmp+0x25>$/;"	l
cf	rm.asm	/^  cf:	75 14                	jne    e5 <strcmp+0x25>$/;"	l
cf	sh.asm	/^      cf:	0f be 03             	movsbl (%ebx),%eax$/;"	l
cf	usertests.asm	/^      cf:	90                   	nop    $/;"	l
cf	wc.asm	/^  cf:	c7 44 24 04 dd 08 00 	movl   $0x8dd,0x4(%esp)$/;"	l
cf	zombie.asm	/^  cf:	90                   	nop    $/;"	l
cf1	sh.asm	/^     cf1:	84 c0                	test   %al,%al$/;"	l
cf2	usertests.asm	/^     cf2:	00 $/;"	l
cf3	sh.asm	/^     cf3:	74 1b                	je     d10 <strcmp+0x40>$/;"	l
cf3	usertests.asm	/^     cf3:	89 c3                	mov    %eax,%ebx$/;"	l
cf5	sh.asm	/^     cf5:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
cf5	usertests.asm	/^     cf5:	89 04 24             	mov    %eax,(%esp)$/;"	l
cf8	sh.asm	/^     cf8:	38 d8                	cmp    %bl,%al$/;"	l
cf8	usertests.asm	/^     cf8:	e8 6b 21 00 00       	call   2e68 <write>$/;"	l
cfa	sh.asm	/^     cfa:	74 ec                	je     ce8 <strcmp+0x18>$/;"	l
cfc	sh.asm	/^     cfc:	0f b6 d0             	movzbl %al,%edx$/;"	l
cfd	usertests.asm	/^     cfd:	85 c0                	test   %eax,%eax$/;"	l
cff	sh.asm	/^     cff:	0f b6 c3             	movzbl %bl,%eax$/;"	l
cff	usertests.asm	/^     cff:	0f 8f eb 00 00 00    	jg     df0 <dirfile+0x220>$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
code	kernel.asm	/^  code = (uchar*)0x7000;$/;"	d
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*)mp->physaddr;$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon2	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ Switch here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^  struct cpu *cpu;$/;"	m	struct:cpu	typeref:struct:cpu::cpu
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)0xb8000;  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
current_dir	kernel.asm	/^	current_dir = kernel_dir;$/;"	d
current_dir	page.c	/^page_dir_t *current_dir = 0;$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	args.asm	/^   d:	57                   	push   %edi$/;"	l
d	echo.asm	/^   d:	57                   	push   %edi$/;"	l
d	forktest.asm	/^   d:	e8 9e 01 00 00       	call   1b0 <strlen>$/;"	l
d	hello.asm	/^   d:	51                   	push   %ecx$/;"	l
d	init.asm	/^   d:	53                   	push   %ebx$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	83 ec 18             	sub    $0x18,%esp$/;"	l
d	ln.asm	/^   d:	83 ec 18             	sub    $0x18,%esp$/;"	l
d	mkdir.asm	/^   d:	83 ec 28             	sub    $0x28,%esp$/;"	l
d	rm.asm	/^   d:	83 ec 28             	sub    $0x28,%esp$/;"	l
d	zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	args.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	grep.asm	/^  d0:	83 c4 10             	add    $0x10,%esp$/;"	l
d0	hello.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	ls.asm	/^  d0:	89 3c 24             	mov    %edi,(%esp)$/;"	l
d0	usertests.asm	/^      d0:	74 5e                	je     130 <forktest+0x90>$/;"	l
d0	zombie.asm	/^  d0:	55                   	push   %ebp$/;"	l
d02	sh.asm	/^     d02:	29 c2                	sub    %eax,%edx$/;"	l
d04	sh.asm	/^     d04:	89 d0                	mov    %edx,%eax$/;"	l
d05	usertests.asm	/^     d05:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d06	sh.asm	/^     d06:	5b                   	pop    %ebx$/;"	l
d07	sh.asm	/^     d07:	5d                   	pop    %ebp$/;"	l
d08	sh.asm	/^     d08:	c3                   	ret    $/;"	l
d08	usertests.asm	/^     d08:	e8 63 21 00 00       	call   2e70 <close>$/;"	l
d09	sh.asm	/^     d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d0d	usertests.asm	/^     d0d:	c7 44 24 04 2c 37 00 	movl   $0x372c,0x4(%esp)$/;"	l
d1	args.asm	/^  d1:	31 c0                	xor    %eax,%eax$/;"	l
d1	cat.asm	/^  d1:	7f cd                	jg     a0 <main+0x30>$/;"	l
d1	echo.asm	/^  d1:	eb 2d                	jmp    100 <strcmp+0x40>$/;"	l
d1	hello.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	ln.asm	/^  d1:	84 c0                	test   %al,%al$/;"	l
d1	mkdir.asm	/^  d1:	eb 2d                	jmp    100 <strcmp+0x40>$/;"	l
d1	rm.asm	/^  d1:	eb 2d                	jmp    100 <strcmp+0x40>$/;"	l
d1	zombie.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d10	sh.asm	/^     d10:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
d13	sh.asm	/^     d13:	31 d2                	xor    %edx,%edx$/;"	l
d14	usertests.asm	/^     d14:	00 $/;"	l
d15	sh.asm	/^     d15:	0f b6 c3             	movzbl %bl,%eax$/;"	l
d15	usertests.asm	/^     d15:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d18	sh.asm	/^     d18:	29 c2                	sub    %eax,%edx$/;"	l
d1a	sh.asm	/^     d1a:	89 d0                	mov    %edx,%eax$/;"	l
d1c	sh.asm	/^     d1c:	5b                   	pop    %ebx$/;"	l
d1c	usertests.asm	/^     d1c:	e8 5f 22 00 00       	call   2f80 <printf>$/;"	l
d1d	sh.asm	/^     d1d:	5d                   	pop    %ebp$/;"	l
d1e	sh.asm	/^     d1e:	c3                   	ret    $/;"	l
d1f	sh.asm	/^     d1f:	90                   	nop    $/;"	l
d2	kill.asm	/^  d2:	29 c2                	sub    %eax,%edx$/;"	l
d2	sh.asm	/^      d2:	c7 04 24 d8 14 00 00 	movl   $0x14d8,(%esp)$/;"	l
d2	usertests.asm	/^      d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
d20	sh.asm	/^     d20:	55                   	push   %ebp$/;"	l
d21	sh.asm	/^     d21:	31 c0                	xor    %eax,%eax$/;"	l
d21	usertests.asm	/^     d21:	83 c4 14             	add    $0x14,%esp$/;"	l
d23	sh.asm	/^     d23:	89 e5                	mov    %esp,%ebp$/;"	l
d24	usertests.asm	/^     d24:	5b                   	pop    %ebx$/;"	l
d25	sh.asm	/^     d25:	31 c9                	xor    %ecx,%ecx$/;"	l
d25	usertests.asm	/^     d25:	5d                   	pop    %ebp$/;"	l
d26	usertests.asm	/^     d26:	c3                   	ret    $/;"	l
d27	sh.asm	/^     d27:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d27	usertests.asm	/^     d27:	90                   	nop    $/;"	l
d28	usertests.asm	/^     d28:	c7 44 24 04 a7 36 00 	movl   $0x36a7,0x4(%esp)$/;"	l
d2a	sh.asm	/^     d2a:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
d2d	sh.asm	/^     d2d:	74 0c                	je     d3b <strlen+0x1b>$/;"	l
d2f	sh.asm	/^     d2f:	90                   	nop    $/;"	l
d2f	usertests.asm	/^     d2f:	00 $/;"	l
d3	args.asm	/^  d3:	89 e5                	mov    %esp,%ebp$/;"	l
d3	cat.asm	/^  d3:	e8 80 02 00 00       	call   358 <exit>$/;"	l
d3	echo.asm	/^  d3:	90                   	nop    $/;"	l
d3	grep.asm	/^  d3:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
d3	hello.asm	/^  d3:	83 ec 08             	sub    $0x8,%esp$/;"	l
d3	ln.asm	/^  d3:	74 1b                	je     f0 <strcmp+0x40>$/;"	l
d3	ls.asm	/^  d3:	e8 28 05 00 00       	call   600 <fstat>$/;"	l
d3	mkdir.asm	/^  d3:	90                   	nop    $/;"	l
d3	rm.asm	/^  d3:	90                   	nop    $/;"	l
d3	zombie.asm	/^  d3:	83 ec 08             	sub    $0x8,%esp$/;"	l
d30	sh.asm	/^     d30:	83 c0 01             	add    $0x1,%eax$/;"	l
d30	usertests.asm	/^     d30:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d33	sh.asm	/^     d33:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)$/;"	l
d37	sh.asm	/^     d37:	75 f7                	jne    d30 <strlen+0x10>$/;"	l
d37	usertests.asm	/^     d37:	e8 44 22 00 00       	call   2f80 <printf>$/;"	l
d39	sh.asm	/^     d39:	89 c1                	mov    %eax,%ecx$/;"	l
d3b	sh.asm	/^     d3b:	89 c8                	mov    %ecx,%eax$/;"	l
d3c	usertests.asm	/^     d3c:	e8 07 21 00 00       	call   2e48 <exit>$/;"	l
d3d	sh.asm	/^     d3d:	5d                   	pop    %ebp$/;"	l
d3e	sh.asm	/^     d3e:	c3                   	ret    $/;"	l
d3f	sh.asm	/^     d3f:	90                   	nop    $/;"	l
d4	echo.asm	/^  d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d4	forktest.asm	/^  d4:	e8 9f 02 00 00       	call   378 <exit>$/;"	l
d4	init.asm	/^  d4:	e8 c7 03 00 00       	call   4a0 <printf>$/;"	l
d4	kill.asm	/^  d4:	89 d0                	mov    %edx,%eax$/;"	l
d4	mkdir.asm	/^  d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d4	rm.asm	/^  d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d40	sh.asm	/^     d40:	55                   	push   %ebp$/;"	l
d41	sh.asm	/^     d41:	89 e5                	mov    %esp,%ebp$/;"	l
d41	usertests.asm	/^     d41:	c7 44 24 04 6b 36 00 	movl   $0x366b,0x4(%esp)$/;"	l
d43	sh.asm	/^     d43:	83 ec 08             	sub    $0x8,%esp$/;"	l
d46	sh.asm	/^     d46:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d48	usertests.asm	/^     d48:	00 $/;"	l
d49	sh.asm	/^     d49:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
d49	usertests.asm	/^     d49:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d4c	sh.asm	/^     d4c:	89 7c 24 04          	mov    %edi,0x4(%esp)$/;"	l
d5	args.asm	/^  d5:	31 c9                	xor    %ecx,%ecx$/;"	l
d5	ln.asm	/^  d5:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
d50	sh.asm	/^     d50:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d50	usertests.asm	/^     d50:	e8 2b 22 00 00       	call   2f80 <printf>$/;"	l
d53	sh.asm	/^     d53:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d55	usertests.asm	/^     d55:	e8 ee 20 00 00       	call   2e48 <exit>$/;"	l
d56	sh.asm	/^     d56:	89 df                	mov    %ebx,%edi$/;"	l
d58	sh.asm	/^     d58:	fc                   	cld    $/;"	l
d59	sh.asm	/^     d59:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
d5a	usertests.asm	/^     d5a:	c7 44 24 04 82 36 00 	movl   $0x3682,0x4(%esp)$/;"	l
d5b	sh.asm	/^     d5b:	89 d8                	mov    %ebx,%eax$/;"	l
d5d	sh.asm	/^     d5d:	8b 7c 24 04          	mov    0x4(%esp),%edi$/;"	l
d6	hello.asm	/^  d6:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d6	kill.asm	/^  d6:	5b                   	pop    %ebx$/;"	l
d6	wc.asm	/^  d6:	00 $/;"	l
d6	zombie.asm	/^  d6:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d61	sh.asm	/^     d61:	8b 1c 24             	mov    (%esp),%ebx$/;"	l
d61	usertests.asm	/^     d61:	00 $/;"	l
d62	usertests.asm	/^     d62:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d64	sh.asm	/^     d64:	89 ec                	mov    %ebp,%esp$/;"	l
d66	sh.asm	/^     d66:	5d                   	pop    %ebp$/;"	l
d67	sh.asm	/^     d67:	c3                   	ret    $/;"	l
d68	sh.asm	/^     d68:	90                   	nop    $/;"	l
d69	sh.asm	/^     d69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d69	usertests.asm	/^     d69:	e8 12 22 00 00       	call   2f80 <printf>$/;"	l
d6e	usertests.asm	/^     d6e:	e8 d5 20 00 00       	call   2e48 <exit>$/;"	l
d7	args.asm	/^  d7:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d7	kill.asm	/^  d7:	5d                   	pop    %ebp$/;"	l
d7	wc.asm	/^  d7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d70	sh.asm	/^     d70:	55                   	push   %ebp$/;"	l
d71	sh.asm	/^     d71:	89 e5                	mov    %esp,%ebp$/;"	l
d73	sh.asm	/^     d73:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d73	usertests.asm	/^     d73:	c7 44 24 04 c5 36 00 	movl   $0x36c5,0x4(%esp)$/;"	l
d76	sh.asm	/^     d76:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
d7a	sh.asm	/^     d7a:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d7a	usertests.asm	/^     d7a:	00 $/;"	l
d7b	usertests.asm	/^     d7b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d7d	sh.asm	/^     d7d:	84 d2                	test   %dl,%dl$/;"	l
d7f	sh.asm	/^     d7f:	75 11                	jne    d92 <strchr+0x22>$/;"	l
d8	cat.asm	/^  d8:	8b 07                	mov    (%edi),%eax$/;"	l
d8	echo.asm	/^  d8:	83 c2 01             	add    $0x1,%edx$/;"	l
d8	grep.asm	/^  d8:	5b                   	pop    %ebx$/;"	l
d8	kill.asm	/^  d8:	c3                   	ret    $/;"	l
d8	ln.asm	/^  d8:	38 d8                	cmp    %bl,%al$/;"	l
d8	ls.asm	/^  d8:	85 c0                	test   %eax,%eax$/;"	l
d8	mkdir.asm	/^  d8:	83 c2 01             	add    $0x1,%edx$/;"	l
d8	rm.asm	/^  d8:	83 c2 01             	add    $0x1,%edx$/;"	l
d8	usertests.asm	/^      d8:	e8 63 2d 00 00       	call   2e40 <fork>$/;"	l
d81	sh.asm	/^     d81:	eb 25                	jmp    da8 <strchr+0x38>$/;"	l
d82	usertests.asm	/^     d82:	e8 f9 21 00 00       	call   2f80 <printf>$/;"	l
d83	sh.asm	/^     d83:	90                   	nop    $/;"	l
d84	sh.asm	/^     d84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d87	usertests.asm	/^     d87:	e8 bc 20 00 00       	call   2e48 <exit>$/;"	l
d88	sh.asm	/^     d88:	83 c0 01             	add    $0x1,%eax$/;"	l
d8b	sh.asm	/^     d8b:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d8c	usertests.asm	/^     d8c:	c7 44 24 04 e2 36 00 	movl   $0x36e2,0x4(%esp)$/;"	l
d8e	sh.asm	/^     d8e:	84 d2                	test   %dl,%dl$/;"	l
d9	forktest.asm	/^  d9:	c7 44 24 04 1b 04 00 	movl   $0x41b,0x4(%esp)$/;"	l
d9	grep.asm	/^  d9:	5e                   	pop    %esi$/;"	l
d9	hello.asm	/^  d9:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
d9	init.asm	/^  d9:	e8 8a 02 00 00       	call   368 <exit>$/;"	l
d9	kill.asm	/^  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d9	sh.asm	/^      d9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d9	zombie.asm	/^  d9:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
d90	sh.asm	/^     d90:	74 16                	je     da8 <strchr+0x38>$/;"	l
d92	sh.asm	/^     d92:	38 ca                	cmp    %cl,%dl$/;"	l
d93	usertests.asm	/^     d93:	00 $/;"	l
d94	sh.asm	/^     d94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d94	usertests.asm	/^     d94:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d98	sh.asm	/^     d98:	75 ee                	jne    d88 <strchr+0x18>$/;"	l
d9a	sh.asm	/^     d9a:	5d                   	pop    %ebp$/;"	l
d9b	sh.asm	/^     d9b:	90                   	nop    $/;"	l
d9b	usertests.asm	/^     d9b:	e8 e0 21 00 00       	call   2f80 <printf>$/;"	l
d9c	sh.asm	/^     d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
da	args.asm	/^  da:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
da	cat.asm	/^  da:	c7 44 24 04 58 08 00 	movl   $0x858,0x4(%esp)$/;"	l
da	grep.asm	/^  da:	5d                   	pop    %ebp$/;"	l
da	ln.asm	/^  da:	74 ec                	je     c8 <strcmp+0x18>$/;"	l
da	ls.asm	/^  da:	0f 88 c0 01 00 00    	js     2a0 <ls+0x200>$/;"	l
da0	sh.asm	/^     da0:	c3                   	ret    $/;"	l
da0	usertests.asm	/^     da0:	e8 a3 20 00 00       	call   2e48 <exit>$/;"	l
da1	sh.asm	/^     da1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
da5	usertests.asm	/^     da5:	c7 44 24 04 84 42 00 	movl   $0x4284,0x4(%esp)$/;"	l
da8	sh.asm	/^     da8:	31 c0                	xor    %eax,%eax$/;"	l
daa	sh.asm	/^     daa:	5d                   	pop    %ebp$/;"	l
dab	sh.asm	/^     dab:	90                   	nop    $/;"	l
dac	sh.asm	/^     dac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dac	usertests.asm	/^     dac:	00 $/;"	l
dad	usertests.asm	/^     dad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
data	buf.h	/^  uchar data[512];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
db	echo.asm	/^  db:	83 c1 01             	add    $0x1,%ecx$/;"	l
db	grep.asm	/^  db:	c3                   	ret    $/;"	l
db	mkdir.asm	/^  db:	83 c1 01             	add    $0x1,%ecx$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	rm.asm	/^  db:	83 c1 01             	add    $0x1,%ecx$/;"	l
db0	sh.asm	/^     db0:	c3                   	ret    $/;"	l
db1	sh.asm	/^     db1:	eb 0d                	jmp    dc0 <atoi>$/;"	l
db3	sh.asm	/^     db3:	90                   	nop    $/;"	l
db4	sh.asm	/^     db4:	90                   	nop    $/;"	l
db4	usertests.asm	/^     db4:	e8 c7 21 00 00       	call   2f80 <printf>$/;"	l
db5	sh.asm	/^     db5:	90                   	nop    $/;"	l
db6	sh.asm	/^     db6:	90                   	nop    $/;"	l
db7	sh.asm	/^     db7:	90                   	nop    $/;"	l
db8	sh.asm	/^     db8:	90                   	nop    $/;"	l
db9	sh.asm	/^     db9:	90                   	nop    $/;"	l
db9	usertests.asm	/^     db9:	e8 8a 20 00 00       	call   2e48 <exit>$/;"	l
dba	sh.asm	/^     dba:	90                   	nop    $/;"	l
dbb	sh.asm	/^     dbb:	90                   	nop    $/;"	l
dbc	sh.asm	/^     dbc:	90                   	nop    $/;"	l
dbd	sh.asm	/^     dbd:	90                   	nop    $/;"	l
dbe	sh.asm	/^     dbe:	90                   	nop    $/;"	l
dbe	usertests.asm	/^     dbe:	c7 44 24 04 00 37 00 	movl   $0x3700,0x4(%esp)$/;"	l
dbf	sh.asm	/^     dbf:	90                   	nop    $/;"	l
dc	grep.asm	/^  dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dc	hello.asm	/^  dc:	89 7c 24 04          	mov    %edi,0x4(%esp)$/;"	l
dc	ln.asm	/^  dc:	0f b6 d0             	movzbl %al,%edx$/;"	l
dc	zombie.asm	/^  dc:	89 7c 24 04          	mov    %edi,0x4(%esp)$/;"	l
dc0	sh.asm	/^     dc0:	55                   	push   %ebp$/;"	l
dc1	sh.asm	/^     dc1:	31 c9                	xor    %ecx,%ecx$/;"	l
dc3	sh.asm	/^     dc3:	89 e5                	mov    %esp,%ebp$/;"	l
dc5	sh.asm	/^     dc5:	53                   	push   %ebx$/;"	l
dc5	usertests.asm	/^     dc5:	00 $/;"	l
dc6	sh.asm	/^     dc6:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
dc6	usertests.asm	/^     dc6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
dc9	sh.asm	/^     dc9:	0f b6 13             	movzbl (%ebx),%edx$/;"	l
dcc	sh.asm	/^     dcc:	8d 42 d0             	lea    -0x30(%edx),%eax$/;"	l
dcd	usertests.asm	/^     dcd:	e8 ae 21 00 00       	call   2f80 <printf>$/;"	l
dcf	sh.asm	/^     dcf:	3c 09                	cmp    $0x9,%al$/;"	l
dd	args.asm	/^  dd:	74 0c                	je     eb <strlen+0x1b>$/;"	l
dd	sh.asm	/^      dd:	e8 8e 0c 00 00       	call   d70 <strchr>$/;"	l
dd	usertests.asm	/^      dd:	83 f8 00             	cmp    $0x0,%eax$/;"	l
dd1	sh.asm	/^     dd1:	77 1c                	ja     def <atoi+0x2f>$/;"	l
dd2	usertests.asm	/^     dd2:	e8 71 20 00 00       	call   2e48 <exit>$/;"	l
dd3	sh.asm	/^     dd3:	90                   	nop    $/;"	l
dd4	sh.asm	/^     dd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dd7	usertests.asm	/^     dd7:	c7 44 24 04 a4 42 00 	movl   $0x42a4,0x4(%esp)$/;"	l
dd8	sh.asm	/^     dd8:	8d 04 89             	lea    (%ecx,%ecx,4),%eax$/;"	l
ddb	sh.asm	/^     ddb:	0f be d2             	movsbl %dl,%edx$/;"	l
dde	sh.asm	/^     dde:	83 c3 01             	add    $0x1,%ebx$/;"	l
dde	usertests.asm	/^     dde:	00 $/;"	l
ddf	usertests.asm	/^     ddf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
de	echo.asm	/^  de:	0f b6 02             	movzbl (%edx),%eax$/;"	l
de	init.asm	/^  de:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
de	mkdir.asm	/^  de:	0f b6 02             	movzbl (%edx),%eax$/;"	l
de	rm.asm	/^  de:	0f b6 02             	movzbl (%edx),%eax$/;"	l
de	wc.asm	/^  de:	e8 3d 04 00 00       	call   520 <printf>$/;"	l
de1	sh.asm	/^     de1:	8d 4c 42 d0          	lea    -0x30(%edx,%eax,2),%ecx$/;"	l
de5	sh.asm	/^     de5:	0f b6 13             	movzbl (%ebx),%edx$/;"	l
de6	usertests.asm	/^     de6:	e8 95 21 00 00       	call   2f80 <printf>$/;"	l
de8	sh.asm	/^     de8:	8d 42 d0             	lea    -0x30(%edx),%eax$/;"	l
deb	sh.asm	/^     deb:	3c 09                	cmp    $0x9,%al$/;"	l
deb	usertests.asm	/^     deb:	e8 58 20 00 00       	call   2e48 <exit>$/;"	l
ded	sh.asm	/^     ded:	76 e9                	jbe    dd8 <atoi+0x18>$/;"	l
def	sh.asm	/^     def:	89 c8                	mov    %ecx,%eax$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	fsvar.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	stat.h	/^  int dev;     \/\/ Device number$/;"	m	struct:stat
devsw	dev.h	/^struct devsw {$/;"	s
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	args.asm	/^  df:	90                   	nop    $/;"	l
df	ln.asm	/^  df:	0f b6 c3             	movzbl %bl,%eax$/;"	l
df0	usertests.asm	/^     df0:	c7 44 24 04 18 37 00 	movl   $0x3718,0x4(%esp)$/;"	l
df1	sh.asm	/^     df1:	5b                   	pop    %ebx$/;"	l
df2	sh.asm	/^     df2:	5d                   	pop    %ebp$/;"	l
df3	sh.asm	/^     df3:	c3                   	ret    $/;"	l
df4	sh.asm	/^     df4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
df7	usertests.asm	/^     df7:	00 $/;"	l
df8	usertests.asm	/^     df8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
dfa	sh.asm	/^     dfa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
dff	usertests.asm	/^     dff:	e8 7c 21 00 00       	call   2f80 <printf>$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirs	page.h	/^	uint dirs[1024];		\/\/ the array of directory entries$/;"	m	struct:page_dir
dirtest	usertests.c	/^void dirtest(void)$/;"	f
dirty	page.h	/^	unsigned int dirty	 : 1;$/;"	m	struct:page
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	args.asm	/^  dst = vdst;$/;"	d
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	hello.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	args.asm	/^   e:	56                   	push   %esi$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon3	file:
e	echo.asm	/^   e:	56                   	push   %esi$/;"	l
e	hello.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	init.asm	/^   e:	51                   	push   %ecx$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	ls.asm	/^   e:	e8 cd 03 00 00       	call   3e0 <strlen>$/;"	l
e	sh.asm	/^       e:	83 3b 05             	cmpl   $0x5,(%ebx)$/;"	l
e	zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	args.asm	/^  e0:	83 c0 01             	add    $0x1,%eax$/;"	l
e0	forktest.asm	/^  e0:	00 $/;"	l
e0	grep.asm	/^  e0:	8d 43 02             	lea    0x2(%ebx),%eax$/;"	l
e0	hello.asm	/^  e0:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e0	kill.asm	/^  e0:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
e0	ls.asm	/^  e0:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax$/;"	l
e0	usertests.asm	/^      e0:	7d de                	jge    c0 <forktest+0x20>$/;"	l
e0	zombie.asm	/^  e0:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e00	sh.asm	/^     e00:	55                   	push   %ebp$/;"	l
e01	sh.asm	/^     e01:	89 e5                	mov    %esp,%ebp$/;"	l
e03	sh.asm	/^     e03:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e04	usertests.asm	/^     e04:	e8 3f 20 00 00       	call   2e48 <exit>$/;"	l
e06	sh.asm	/^     e06:	56                   	push   %esi$/;"	l
e07	sh.asm	/^     e07:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
e09	usertests.asm	/^     e09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e0a	sh.asm	/^     e0a:	53                   	push   %ebx$/;"	l
e0b	sh.asm	/^     e0b:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
e0e	sh.asm	/^     e0e:	85 c9                	test   %ecx,%ecx$/;"	l
e1	cat.asm	/^  e1:	00 $/;"	l
e1	echo.asm	/^  e1:	84 c0                	test   %al,%al$/;"	l
e1	forktest.asm	/^  e1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e1	mkdir.asm	/^  e1:	84 c0                	test   %al,%al$/;"	l
e1	rm.asm	/^  e1:	84 c0                	test   %al,%al$/;"	l
e10	sh.asm	/^     e10:	7e 14                	jle    e26 <memmove+0x26>$/;"	l
e10	usertests.asm	/^     e10:	55                   	push   %ebp$/;"	l
e11	usertests.asm	/^     e11:	89 e5                	mov    %esp,%ebp$/;"	l
e12	sh.asm	/^     e12:	31 d2                	xor    %edx,%edx$/;"	l
e13	usertests.asm	/^     e13:	57                   	push   %edi$/;"	l
e14	sh.asm	/^     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e14	usertests.asm	/^     e14:	56                   	push   %esi$/;"	l
e15	usertests.asm	/^     e15:	53                   	push   %ebx$/;"	l
e16	usertests.asm	/^     e16:	31 db                	xor    %ebx,%ebx$/;"	l
e18	sh.asm	/^     e18:	0f b6 04 13          	movzbl (%ebx,%edx,1),%eax$/;"	l
e18	usertests.asm	/^     e18:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e1b	usertests.asm	/^     e1b:	c7 44 24 04 3c 37 00 	movl   $0x373c,0x4(%esp)$/;"	l
e1c	sh.asm	/^     e1c:	88 04 16             	mov    %al,(%esi,%edx,1)$/;"	l
e1f	sh.asm	/^     e1f:	83 c2 01             	add    $0x1,%edx$/;"	l
e2	cat.asm	/^  e2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e2	ln.asm	/^  e2:	29 c2                	sub    %eax,%edx$/;"	l
e2	sh.asm	/^      e2:	85 c0                	test   %eax,%eax$/;"	l
e2	usertests.asm	/^      e2:	85 db                	test   %ebx,%ebx$/;"	l
e22	sh.asm	/^     e22:	39 ca                	cmp    %ecx,%edx$/;"	l
e22	usertests.asm	/^     e22:	00 $/;"	l
e23	usertests.asm	/^     e23:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e24	sh.asm	/^     e24:	75 f2                	jne    e18 <memmove+0x18>$/;"	l
e26	sh.asm	/^     e26:	89 f0                	mov    %esi,%eax$/;"	l
e28	sh.asm	/^     e28:	5b                   	pop    %ebx$/;"	l
e29	sh.asm	/^     e29:	5e                   	pop    %esi$/;"	l
e2a	sh.asm	/^     e2a:	5d                   	pop    %ebp$/;"	l
e2a	usertests.asm	/^     e2a:	e8 51 21 00 00       	call   2f80 <printf>$/;"	l
e2b	sh.asm	/^     e2b:	c3                   	ret    $/;"	l
e2c	sh.asm	/^     e2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e2f	usertests.asm	/^     e2f:	c7 04 24 58 37 00 00 	movl   $0x3758,(%esp)$/;"	l
e3	args.asm	/^  e3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)$/;"	l
e3	echo.asm	/^  e3:	74 1b                	je     100 <strcmp+0x40>$/;"	l
e3	grep.asm	/^  e3:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e3	hello.asm	/^  e3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e3	kill.asm	/^  e3:	31 d2                	xor    %edx,%edx$/;"	l
e3	mkdir.asm	/^  e3:	74 1b                	je     100 <strcmp+0x40>$/;"	l
e3	rm.asm	/^  e3:	74 1b                	je     100 <strcmp+0x40>$/;"	l
e3	wc.asm	/^  e3:	e8 00 03 00 00       	call   3e8 <exit>$/;"	l
e3	zombie.asm	/^  e3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e30	sh.asm	/^     e30:	55                   	push   %ebp$/;"	l
e31	sh.asm	/^     e31:	89 e5                	mov    %esp,%ebp$/;"	l
e33	sh.asm	/^     e33:	83 ec 18             	sub    $0x18,%esp$/;"	l
e36	sh.asm	/^     e36:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e36	usertests.asm	/^     e36:	e8 5d 20 00 00       	call   2e98 <unlink>$/;"	l
e39	sh.asm	/^     e39:	89 5d f8             	mov    %ebx,-0x8(%ebp)$/;"	l
e3b	usertests.asm	/^     e3b:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
e3c	sh.asm	/^     e3c:	89 75 fc             	mov    %esi,-0x4(%ebp)$/;"	l
e3f	sh.asm	/^     e3f:	be ff ff ff ff       	mov    $0xffffffff,%esi$/;"	l
e4	ln.asm	/^  e4:	89 d0                	mov    %edx,%eax$/;"	l
e4	ls.asm	/^  e4:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
e4	sh.asm	/^      e4:	75 e2                	jne    c8 <peek+0x18>$/;"	l
e4	usertests.asm	/^      e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e42	usertests.asm	/^     e42:	00 $/;"	l
e43	usertests.asm	/^     e43:	c7 04 24 58 37 00 00 	movl   $0x3758,(%esp)$/;"	l
e44	sh.asm	/^     e44:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
e4a	usertests.asm	/^     e4a:	e8 39 20 00 00       	call   2e88 <open>$/;"	l
e4b	sh.asm	/^     e4b:	00 $/;"	l
e4c	sh.asm	/^     e4c:	89 04 24             	mov    %eax,(%esp)$/;"	l
e4f	sh.asm	/^     e4f:	e8 d4 00 00 00       	call   f28 <open>$/;"	l
e4f	usertests.asm	/^     e4f:	85 c0                	test   %eax,%eax$/;"	l
e5	echo.asm	/^  e5:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
e5	init.asm	/^  e5:	00 $/;"	l
e5	kill.asm	/^  e5:	0f b6 c3             	movzbl %bl,%eax$/;"	l
e5	mkdir.asm	/^  e5:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
e5	rm.asm	/^  e5:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
e51	usertests.asm	/^     e51:	89 c6                	mov    %eax,%esi$/;"	l
e53	usertests.asm	/^     e53:	0f 88 73 01 00 00    	js     fcc <bigfile+0x1bc>$/;"	l
e54	sh.asm	/^     e54:	85 c0                	test   %eax,%eax$/;"	l
e56	sh.asm	/^     e56:	89 c3                	mov    %eax,%ebx$/;"	l
e58	sh.asm	/^     e58:	78 19                	js     e73 <stat+0x43>$/;"	l
e59	usertests.asm	/^     e59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e5a	sh.asm	/^     e5a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e5d	sh.asm	/^     e5d:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
e6	hello.asm	/^  e6:	89 df                	mov    %ebx,%edi$/;"	l
e6	init.asm	/^  e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)$/;"	l
e6	ln.asm	/^  e6:	5b                   	pop    %ebx$/;"	l
e6	sh.asm	/^      e6:	89 1f                	mov    %ebx,(%edi)$/;"	l
e6	zombie.asm	/^  e6:	89 df                	mov    %ebx,%edi$/;"	l
e60	sh.asm	/^     e60:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e60	usertests.asm	/^     e60:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)$/;"	l
e64	sh.asm	/^     e64:	e8 d7 00 00 00       	call   f40 <fstat>$/;"	l
e67	usertests.asm	/^     e67:	00 $/;"	l
e68	usertests.asm	/^     e68:	89 5c 24 04          	mov    %ebx,0x4(%esp)$/;"	l
e69	sh.asm	/^     e69:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
e6c	sh.asm	/^     e6c:	89 c6                	mov    %eax,%esi$/;"	l
e6c	usertests.asm	/^     e6c:	c7 04 24 e0 45 00 00 	movl   $0x45e0,(%esp)$/;"	l
e6e	sh.asm	/^     e6e:	e8 9d 00 00 00       	call   f10 <close>$/;"	l
e7	args.asm	/^  e7:	75 f7                	jne    e0 <strlen+0x10>$/;"	l
e7	grep.asm	/^  e7:	0f be c1             	movsbl %cl,%eax$/;"	l
e7	ln.asm	/^  e7:	5d                   	pop    %ebp$/;"	l
e73	sh.asm	/^     e73:	89 f0                	mov    %esi,%eax$/;"	l
e73	usertests.asm	/^     e73:	e8 28 1e 00 00       	call   2ca0 <memset>$/;"	l
e75	sh.asm	/^     e75:	8b 5d f8             	mov    -0x8(%ebp),%ebx$/;"	l
e78	sh.asm	/^     e78:	8b 75 fc             	mov    -0x4(%ebp),%esi$/;"	l
e78	usertests.asm	/^     e78:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)$/;"	l
e7b	sh.asm	/^     e7b:	89 ec                	mov    %ebp,%esp$/;"	l
e7d	sh.asm	/^     e7d:	5d                   	pop    %ebp$/;"	l
e7e	sh.asm	/^     e7e:	c3                   	ret    $/;"	l
e7f	sh.asm	/^     e7f:	90                   	nop    $/;"	l
e7f	usertests.asm	/^     e7f:	00 $/;"	l
e8	echo.asm	/^  e8:	38 d8                	cmp    %bl,%al$/;"	l
e8	forktest.asm	/^  e8:	e8 13 ff ff ff       	call   0 <printf>$/;"	l
e8	hello.asm	/^  e8:	fc                   	cld    $/;"	l
e8	kill.asm	/^  e8:	29 c2                	sub    %eax,%edx$/;"	l
e8	ln.asm	/^  e8:	c3                   	ret    $/;"	l
e8	ls.asm	/^  e8:	74 5e                	je     148 <ls+0xa8>$/;"	l
e8	mkdir.asm	/^  e8:	38 d8                	cmp    %bl,%al$/;"	l
e8	rm.asm	/^  e8:	38 d8                	cmp    %bl,%al$/;"	l
e8	sh.asm	/^      e8:	0f b6 03             	movzbl (%ebx),%eax$/;"	l
e8	usertests.asm	/^      e8:	74 18                	je     102 <forktest+0x62>$/;"	l
e8	wc.asm	/^  e8:	90                   	nop    $/;"	l
e8	zombie.asm	/^  e8:	fc                   	cld    $/;"	l
e80	sh.asm	/^     e80:	55                   	push   %ebp$/;"	l
e80	usertests.asm	/^     e80:	c7 44 24 04 e0 45 00 	movl   $0x45e0,0x4(%esp)$/;"	l
e81	sh.asm	/^     e81:	89 e5                	mov    %esp,%ebp$/;"	l
e83	sh.asm	/^     e83:	57                   	push   %edi$/;"	l
e84	sh.asm	/^     e84:	56                   	push   %esi$/;"	l
e85	sh.asm	/^     e85:	31 f6                	xor    %esi,%esi$/;"	l
e87	sh.asm	/^     e87:	53                   	push   %ebx$/;"	l
e87	usertests.asm	/^     e87:	00 $/;"	l
e88	sh.asm	/^     e88:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
e88	usertests.asm	/^     e88:	89 34 24             	mov    %esi,(%esp)$/;"	l
e8b	sh.asm	/^     e8b:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
e8b	usertests.asm	/^     e8b:	e8 d8 1f 00 00       	call   2e68 <write>$/;"	l
e8e	sh.asm	/^     e8e:	eb 06                	jmp    e96 <gets+0x16>$/;"	l
e9	args.asm	/^  e9:	89 c1                	mov    %eax,%ecx$/;"	l
e9	cat.asm	/^  e9:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e9	hello.asm	/^  e9:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e9	ln.asm	/^  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e9	wc.asm	/^  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e9	zombie.asm	/^  e9:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e90	sh.asm	/^     e90:	3c 0d                	cmp    $0xd,%al$/;"	l
e90	usertests.asm	/^     e90:	3d 58 02 00 00       	cmp    $0x258,%eax$/;"	l
e92	sh.asm	/^     e92:	74 39                	je     ecd <gets+0x4d>$/;"	l
e94	sh.asm	/^     e94:	89 de                	mov    %ebx,%esi$/;"	l
e95	usertests.asm	/^     e95:	0f 85 e6 00 00 00    	jne    f81 <bigfile+0x171>$/;"	l
e96	sh.asm	/^     e96:	8d 5e 01             	lea    0x1(%esi),%ebx$/;"	l
e99	sh.asm	/^     e99:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
e9b	usertests.asm	/^     e9b:	83 c3 01             	add    $0x1,%ebx$/;"	l
e9c	sh.asm	/^     e9c:	7d 31                	jge    ecf <gets+0x4f>$/;"	l
e9e	sh.asm	/^     e9e:	8d 45 f3             	lea    -0xd(%ebp),%eax$/;"	l
e9e	usertests.asm	/^     e9e:	83 fb 14             	cmp    $0x14,%ebx$/;"	l
ea	echo.asm	/^  ea:	74 ec                	je     d8 <strcmp+0x18>$/;"	l
ea	grep.asm	/^  ea:	89 74 24 08          	mov    %esi,0x8(%esp)$/;"	l
ea	kill.asm	/^  ea:	89 d0                	mov    %edx,%eax$/;"	l
ea	ls.asm	/^  ea:	66 83 f8 02          	cmp    $0x2,%ax$/;"	l
ea	mkdir.asm	/^  ea:	74 ec                	je     d8 <strcmp+0x18>$/;"	l
ea	rm.asm	/^  ea:	74 ec                	je     d8 <strcmp+0x18>$/;"	l
ea	usertests.asm	/^      ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ea1	sh.asm	/^     ea1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
ea1	usertests.asm	/^     ea1:	75 bd                	jne    e60 <bigfile+0x50>$/;"	l
ea3	usertests.asm	/^     ea3:	89 34 24             	mov    %esi,(%esp)$/;"	l
ea6	usertests.asm	/^     ea6:	30 db                	xor    %bl,%bl$/;"	l
ea8	sh.asm	/^     ea8:	00 $/;"	l
ea8	usertests.asm	/^     ea8:	31 f6                	xor    %esi,%esi$/;"	l
ea9	sh.asm	/^     ea9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
eaa	usertests.asm	/^     eaa:	e8 c1 1f 00 00       	call   2e70 <close>$/;"	l
ead	sh.asm	/^     ead:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)$/;"	l
eaf	usertests.asm	/^     eaf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	args.asm	/^  eb:	89 c8                	mov    %ecx,%eax$/;"	l
eb	hello.asm	/^  eb:	89 d8                	mov    %ebx,%eax$/;"	l
eb	sh.asm	/^      eb:	31 d2                	xor    %edx,%edx$/;"	l
eb	zombie.asm	/^  eb:	89 d8                	mov    %ebx,%eax$/;"	l
eb4	sh.asm	/^     eb4:	e8 47 00 00 00       	call   f00 <read>$/;"	l
eb6	usertests.asm	/^     eb6:	00 $/;"	l
eb7	usertests.asm	/^     eb7:	c7 04 24 58 37 00 00 	movl   $0x3758,(%esp)$/;"	l
eb9	sh.asm	/^     eb9:	85 c0                	test   %eax,%eax$/;"	l
ebb	sh.asm	/^     ebb:	7e 12                	jle    ecf <gets+0x4f>$/;"	l
ebd	sh.asm	/^     ebd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax$/;"	l
ebe	usertests.asm	/^     ebe:	e8 c5 1f 00 00       	call   2e88 <open>$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	echo.asm	/^  ec:	0f b6 d0             	movzbl %al,%edx$/;"	l
ec	kill.asm	/^  ec:	5b                   	pop    %ebx$/;"	l
ec	mkdir.asm	/^  ec:	0f b6 d0             	movzbl %al,%edx$/;"	l
ec	rm.asm	/^  ec:	0f b6 d0             	movzbl %al,%edx$/;"	l
ec1	sh.asm	/^     ec1:	88 44 1f ff          	mov    %al,-0x1(%edi,%ebx,1)$/;"	l
ec3	usertests.asm	/^     ec3:	85 c0                	test   %eax,%eax$/;"	l
ec5	sh.asm	/^     ec5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax$/;"	l
ec5	usertests.asm	/^     ec5:	89 c7                	mov    %eax,%edi$/;"	l
ec7	usertests.asm	/^     ec7:	79 38                	jns    f01 <bigfile+0xf1>$/;"	l
ec9	sh.asm	/^     ec9:	3c 0a                	cmp    $0xa,%al$/;"	l
ec9	usertests.asm	/^     ec9:	e9 17 01 00 00       	jmp    fe5 <bigfile+0x1d5>$/;"	l
ecb	sh.asm	/^     ecb:	75 c3                	jne    e90 <gets+0x10>$/;"	l
ecd	sh.asm	/^     ecd:	89 de                	mov    %ebx,%esi$/;"	l
ece	usertests.asm	/^     ece:	66 90                	xchg   %ax,%ax$/;"	l
ecf	sh.asm	/^     ecf:	c6 04 37 00          	movb   $0x0,(%edi,%esi,1)$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	args.asm	/^  ed:	5d                   	pop    %ebp$/;"	l
ed	cat.asm	/^  ed:	e8 9e 03 00 00       	call   490 <printf>$/;"	l
ed	forktest.asm	/^  ed:	e8 86 02 00 00       	call   378 <exit>$/;"	l
ed	hello.asm	/^  ed:	8b 7c 24 04          	mov    0x4(%esp),%edi$/;"	l
ed	init.asm	/^  ed:	00 $/;"	l
ed	kill.asm	/^  ed:	5d                   	pop    %ebp$/;"	l
ed	sh.asm	/^      ed:	84 c0                	test   %al,%al$/;"	l
ed	zombie.asm	/^  ed:	8b 7c 24 04          	mov    0x4(%esp),%edi$/;"	l
ed0	usertests.asm	/^     ed0:	3d 2c 01 00 00       	cmp    $0x12c,%eax$/;"	l
ed3	sh.asm	/^     ed3:	89 f8                	mov    %edi,%eax$/;"	l
ed5	sh.asm	/^     ed5:	83 c4 1c             	add    $0x1c,%esp$/;"	l
ed5	usertests.asm	/^     ed5:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed8	sh.asm	/^     ed8:	5b                   	pop    %ebx$/;"	l
ed8	usertests.asm	/^     ed8:	0f 85 d5 00 00 00    	jne    fb3 <bigfile+0x1a3>$/;"	l
ed9	sh.asm	/^     ed9:	5e                   	pop    %esi$/;"	l
eda	sh.asm	/^     eda:	5f                   	pop    %edi$/;"	l
edb	sh.asm	/^     edb:	5d                   	pop    %ebp$/;"	l
edc	sh.asm	/^     edc:	c3                   	ret    $/;"	l
edd	sh.asm	/^     edd:	90                   	nop    $/;"	l
ede	sh.asm	/^     ede:	90                   	nop    $/;"	l
ede	usertests.asm	/^     ede:	0f be 15 e0 45 00 00 	movsbl 0x45e0,%edx$/;"	l
edf	sh.asm	/^     edf:	90                   	nop    $/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	args.asm	/^  ee:	c3                   	ret    $/;"	l
ee	grep.asm	/^  ee:	89 04 24             	mov    %eax,(%esp)$/;"	l
ee	init.asm	/^  ee:	c7 04 24 57 08 00 00 	movl   $0x857,(%esp)$/;"	l
ee	kill.asm	/^  ee:	c3                   	ret    $/;"	l
ee	ls.asm	/^  ee:	66 90                	xchg   %ax,%ax$/;"	l
ee0	sh.asm	/^     ee0:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ee5	sh.asm	/^     ee5:	cd 40                	int    $0x40$/;"	l
ee5	usertests.asm	/^     ee5:	89 d8                	mov    %ebx,%eax$/;"	l
ee7	sh.asm	/^     ee7:	c3                   	ret    $/;"	l
ee7	usertests.asm	/^     ee7:	d1 f8                	sar    %eax$/;"	d
ee8	sh.asm	/^     ee8:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
ee9	usertests.asm	/^     ee9:	39 c2                	cmp    %eax,%edx$/;"	l
eeb	usertests.asm	/^     eeb:	75 7b                	jne    f68 <bigfile+0x158>$/;"	l
eed	sh.asm	/^     eed:	cd 40                	int    $0x40$/;"	l
eed	usertests.asm	/^     eed:	0f be 05 0b 47 00 00 	movsbl 0x470b,%eax$/;"	l
eef	sh.asm	/^     eef:	c3                   	ret    $/;"	l
ef	args.asm	/^  ef:	90                   	nop    $/;"	l
ef	echo.asm	/^  ef:	0f b6 c3             	movzbl %bl,%eax$/;"	l
ef	kill.asm	/^  ef:	90                   	nop    $/;"	l
ef	mkdir.asm	/^  ef:	0f b6 c3             	movzbl %bl,%eax$/;"	l
ef	rm.asm	/^  ef:	0f b6 c3             	movzbl %bl,%eax$/;"	l
ef	sh.asm	/^      ef:	75 0f                	jne    100 <peek+0x50>$/;"	l
ef0	sh.asm	/^     ef0:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
ef4	usertests.asm	/^     ef4:	39 c2                	cmp    %eax,%edx$/;"	l
ef5	sh.asm	/^     ef5:	cd 40                	int    $0x40$/;"	l
ef6	usertests.asm	/^     ef6:	75 70                	jne    f68 <bigfile+0x158>$/;"	l
ef7	sh.asm	/^     ef7:	c3                   	ret    $/;"	l
ef8	sh.asm	/^     ef8:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
ef8	usertests.asm	/^     ef8:	81 c6 2c 01 00 00    	add    $0x12c,%esi$/;"	l
efd	sh.asm	/^     efd:	cd 40                	int    $0x40$/;"	l
efe	usertests.asm	/^     efe:	83 c3 01             	add    $0x1,%ebx$/;"	l
eff	sh.asm	/^     eff:	c3                   	ret    $/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry & 0xFFFFFF);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
ep	kernel.asm	/^  ep = p->mem + p->sz;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
eva	bootblock.asm	/^  eva = va + count;$/;"	d
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
extern	kernel.asm	/^extern char end[];$/;"	l
extern	kernel.asm	/^extern void forkret(void);$/;"	l
extern	kernel.asm	/^extern void trapret(void);$/;"	l
f	args.asm	/^   f:	53                   	push   %ebx$/;"	l
f	bootother.asm	/^   f:	20 c0                	and    %al,%al$/;"	l
f	echo.asm	/^   f:	53                   	push   %ebx$/;"	l
f	grep.asm	/^   f:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
f	init.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f0	args.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	kill.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	ln.asm	/^  f0:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
f0	ls.asm	/^  f0:	75 42                	jne    134 <ls+0x94>$/;"	l
f0	usertests.asm	/^      f0:	e8 5b 2d 00 00       	call   2e50 <wait>$/;"	l
f0	wc.asm	/^  f0:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
f00	sh.asm	/^     f00:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
f01	usertests.asm	/^     f01:	c7 44 24 08 2c 01 00 	movl   $0x12c,0x8(%esp)$/;"	l
f05	sh.asm	/^     f05:	cd 40                	int    $0x40$/;"	l
f07	sh.asm	/^     f07:	c3                   	ret    $/;"	l
f08	sh.asm	/^     f08:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
f08	usertests.asm	/^     f08:	00 $/;"	l
f09	usertests.asm	/^     f09:	c7 44 24 04 e0 45 00 	movl   $0x45e0,0x4(%esp)$/;"	l
f0d	sh.asm	/^     f0d:	cd 40                	int    $0x40$/;"	l
f0f	sh.asm	/^     f0f:	c3                   	ret    $/;"	l
f1	args.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	grep.asm	/^  f1:	e8 0a ff ff ff       	call   0 <matchstar>$/;"	l
f1	hello.asm	/^  f1:	8b 1c 24             	mov    (%esp),%ebx$/;"	l
f1	kill.asm	/^  f1:	31 c0                	xor    %eax,%eax$/;"	l
f1	sh.asm	/^      f1:	83 c4 0c             	add    $0xc,%esp$/;"	l
f1	zombie.asm	/^  f1:	8b 1c 24             	mov    (%esp),%ebx$/;"	l
f10	sh.asm	/^     f10:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
f10	usertests.asm	/^     f10:	00 $/;"	l
f11	usertests.asm	/^     f11:	89 3c 24             	mov    %edi,(%esp)$/;"	l
f14	usertests.asm	/^     f14:	e8 47 1f 00 00       	call   2e60 <read>$/;"	l
f15	sh.asm	/^     f15:	cd 40                	int    $0x40$/;"	l
f17	sh.asm	/^     f17:	c3                   	ret    $/;"	l
f18	sh.asm	/^     f18:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
f19	usertests.asm	/^     f19:	83 f8 00             	cmp    $0x0,%eax$/;"	l
f1c	usertests.asm	/^     f1c:	7c 7c                	jl     f9a <bigfile+0x18a>$/;"	l
f1d	sh.asm	/^     f1d:	cd 40                	int    $0x40$/;"	l
f1e	usertests.asm	/^     f1e:	75 b0                	jne    ed0 <bigfile+0xc0>$/;"	l
f1f	sh.asm	/^     f1f:	c3                   	ret    $/;"	l
f2	cat.asm	/^  f2:	e8 61 02 00 00       	call   358 <exit>$/;"	l
f2	echo.asm	/^  f2:	29 c2                	sub    %eax,%edx$/;"	l
f2	forktest.asm	/^  f2:	c7 44 24 04 2f 04 00 	movl   $0x42f,0x4(%esp)$/;"	l
f2	ls.asm	/^  f2:	8b 55 d8             	mov    -0x28(%ebp),%edx$/;"	l
f2	mkdir.asm	/^  f2:	29 c2                	sub    %eax,%edx$/;"	l
f2	rm.asm	/^  f2:	29 c2                	sub    %eax,%edx$/;"	l
f20	sh.asm	/^     f20:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
f20	usertests.asm	/^     f20:	89 3c 24             	mov    %edi,(%esp)$/;"	l
f23	usertests.asm	/^     f23:	90                   	nop    $/;"	l
f24	usertests.asm	/^     f24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f25	sh.asm	/^     f25:	cd 40                	int    $0x40$/;"	l
f27	sh.asm	/^     f27:	c3                   	ret    $/;"	l
f28	sh.asm	/^     f28:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
f28	usertests.asm	/^     f28:	e8 43 1f 00 00       	call   2e70 <close>$/;"	l
f2d	sh.asm	/^     f2d:	cd 40                	int    $0x40$/;"	l
f2d	usertests.asm	/^     f2d:	81 fe e0 2e 00 00    	cmp    $0x2ee0,%esi$/;"	l
f2f	sh.asm	/^     f2f:	c3                   	ret    $/;"	l
f3	args.asm	/^  f3:	83 ec 08             	sub    $0x8,%esp$/;"	l
f3	kill.asm	/^  f3:	89 e5                	mov    %esp,%ebp$/;"	l
f3	ln.asm	/^  f3:	31 d2                	xor    %edx,%edx$/;"	l
f30	sh.asm	/^     f30:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
f33	usertests.asm	/^     f33:	90                   	nop    $/;"	l
f34	usertests.asm	/^     f34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f35	sh.asm	/^     f35:	cd 40                	int    $0x40$/;"	l
f37	sh.asm	/^     f37:	c3                   	ret    $/;"	l
f38	sh.asm	/^     f38:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
f38	usertests.asm	/^     f38:	0f 85 c0 00 00 00    	jne    ffe <bigfile+0x1ee>$/;"	l
f3d	sh.asm	/^     f3d:	cd 40                	int    $0x40$/;"	l
f3e	usertests.asm	/^     f3e:	c7 04 24 58 37 00 00 	movl   $0x3758,(%esp)$/;"	l
f3f	sh.asm	/^     f3f:	c3                   	ret    $/;"	l
f4	echo.asm	/^  f4:	89 d0                	mov    %edx,%eax$/;"	l
f4	hello.asm	/^  f4:	89 ec                	mov    %ebp,%esp$/;"	l
f4	mkdir.asm	/^  f4:	89 d0                	mov    %edx,%eax$/;"	l
f4	rm.asm	/^  f4:	89 d0                	mov    %edx,%eax$/;"	l
f4	sh.asm	/^      f4:	89 d0                	mov    %edx,%eax$/;"	l
f4	wc.asm	/^  f4:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
f4	zombie.asm	/^  f4:	89 ec                	mov    %ebp,%esp$/;"	l
f40	sh.asm	/^     f40:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
f45	sh.asm	/^     f45:	cd 40                	int    $0x40$/;"	l
f45	usertests.asm	/^     f45:	e8 4e 1f 00 00       	call   2e98 <unlink>$/;"	l
f47	sh.asm	/^     f47:	c3                   	ret    $/;"	l
f48	sh.asm	/^     f48:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
f4a	usertests.asm	/^     f4a:	c7 44 24 04 e7 37 00 	movl   $0x37e7,0x4(%esp)$/;"	l
f4d	sh.asm	/^     f4d:	cd 40                	int    $0x40$/;"	l
f4f	sh.asm	/^     f4f:	c3                   	ret    $/;"	l
f5	init.asm	/^  f5:	e8 b6 02 00 00       	call   3b0 <mknod>$/;"	l
f5	kill.asm	/^  f5:	31 c9                	xor    %ecx,%ecx$/;"	l
f5	ln.asm	/^  f5:	0f b6 c3             	movzbl %bl,%eax$/;"	l
f5	ls.asm	/^  f5:	8b 5d e0             	mov    -0x20(%ebp),%ebx$/;"	l
f5	usertests.asm	/^      f5:	85 c0                	test   %eax,%eax$/;"	l
f50	sh.asm	/^     f50:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
f51	usertests.asm	/^     f51:	00 $/;"	l
f52	usertests.asm	/^     f52:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f55	sh.asm	/^     f55:	cd 40                	int    $0x40$/;"	l
f57	sh.asm	/^     f57:	c3                   	ret    $/;"	l
f58	sh.asm	/^     f58:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
f59	usertests.asm	/^     f59:	e8 22 20 00 00       	call   2f80 <printf>$/;"	l
f5d	sh.asm	/^     f5d:	cd 40                	int    $0x40$/;"	l
f5e	usertests.asm	/^     f5e:	83 c4 0c             	add    $0xc,%esp$/;"	l
f5f	sh.asm	/^     f5f:	c3                   	ret    $/;"	l
f6	args.asm	/^  f6:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
f6	echo.asm	/^  f6:	5b                   	pop    %ebx$/;"	l
f6	grep.asm	/^  f6:	83 c4 10             	add    $0x10,%esp$/;"	l
f6	hello.asm	/^  f6:	5d                   	pop    %ebp$/;"	l
f6	mkdir.asm	/^  f6:	5b                   	pop    %ebx$/;"	l
f6	rm.asm	/^  f6:	5b                   	pop    %ebx$/;"	l
f6	sh.asm	/^      f6:	5b                   	pop    %ebx$/;"	l
f6	zombie.asm	/^  f6:	5d                   	pop    %ebp$/;"	l
f60	sh.asm	/^     f60:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
f61	usertests.asm	/^     f61:	5b                   	pop    %ebx$/;"	l
f62	usertests.asm	/^     f62:	5e                   	pop    %esi$/;"	l
f63	usertests.asm	/^     f63:	5f                   	pop    %edi$/;"	l
f64	usertests.asm	/^     f64:	5d                   	pop    %ebp$/;"	l
f65	sh.asm	/^     f65:	cd 40                	int    $0x40$/;"	l
f65	usertests.asm	/^     f65:	c3                   	ret    $/;"	l
f66	usertests.asm	/^     f66:	66 90                	xchg   %ax,%ax$/;"	l
f67	sh.asm	/^     f67:	c3                   	ret    $/;"	l
f68	sh.asm	/^     f68:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
f68	usertests.asm	/^     f68:	c7 44 24 04 b4 37 00 	movl   $0x37b4,0x4(%esp)$/;"	l
f6d	sh.asm	/^     f6d:	cd 40                	int    $0x40$/;"	l
f6f	sh.asm	/^     f6f:	c3                   	ret    $/;"	l
f6f	usertests.asm	/^     f6f:	00 $/;"	l
f7	cat.asm	/^  f7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)$/;"	l
f7	echo.asm	/^  f7:	5d                   	pop    %ebp$/;"	l
f7	hello.asm	/^  f7:	c3                   	ret    $/;"	l
f7	kill.asm	/^  f7:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f7	mkdir.asm	/^  f7:	5d                   	pop    %ebp$/;"	l
f7	rm.asm	/^  f7:	5d                   	pop    %ebp$/;"	l
f7	sh.asm	/^      f7:	5e                   	pop    %esi$/;"	l
f7	usertests.asm	/^      f7:	90                   	nop    $/;"	l
f7	wc.asm	/^  f7:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
f7	zombie.asm	/^  f7:	c3                   	ret    $/;"	l
f70	sh.asm	/^     f70:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
f70	usertests.asm	/^     f70:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f75	sh.asm	/^     f75:	cd 40                	int    $0x40$/;"	l
f77	sh.asm	/^     f77:	c3                   	ret    $/;"	l
f77	usertests.asm	/^     f77:	e8 04 20 00 00       	call   2f80 <printf>$/;"	l
f78	sh.asm	/^     f78:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
f7c	usertests.asm	/^     f7c:	e8 c7 1e 00 00       	call   2e48 <exit>$/;"	l
f7d	sh.asm	/^     f7d:	cd 40                	int    $0x40$/;"	l
f7f	sh.asm	/^     f7f:	c3                   	ret    $/;"	l
f8	echo.asm	/^  f8:	c3                   	ret    $/;"	l
f8	hello.asm	/^  f8:	90                   	nop    $/;"	l
f8	ln.asm	/^  f8:	29 c2                	sub    %eax,%edx$/;"	l
f8	ls.asm	/^  f8:	89 95 b8 fd ff ff    	mov    %edx,-0x248(%ebp)$/;"	l
f8	mkdir.asm	/^  f8:	c3                   	ret    $/;"	l
f8	rm.asm	/^  f8:	c3                   	ret    $/;"	l
f8	sh.asm	/^      f8:	5f                   	pop    %edi$/;"	l
f8	usertests.asm	/^      f8:	78 4f                	js     149 <forktest+0xa9>$/;"	l
f8	zombie.asm	/^  f8:	90                   	nop    $/;"	l
f80	sh.asm	/^     f80:	55                   	push   %ebp$/;"	l
f81	sh.asm	/^     f81:	89 e5                	mov    %esp,%ebp$/;"	l
f81	usertests.asm	/^     f81:	c7 44 24 04 60 37 00 	movl   $0x3760,0x4(%esp)$/;"	l
f83	sh.asm	/^     f83:	57                   	push   %edi$/;"	l
f84	sh.asm	/^     f84:	56                   	push   %esi$/;"	l
f85	sh.asm	/^     f85:	89 ce                	mov    %ecx,%esi$/;"	l
f87	sh.asm	/^     f87:	53                   	push   %ebx$/;"	l
f88	sh.asm	/^     f88:	83 ec 3c             	sub    $0x3c,%esp$/;"	l
f88	usertests.asm	/^     f88:	00 $/;"	l
f89	usertests.asm	/^     f89:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f8b	sh.asm	/^     f8b:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
f8e	sh.asm	/^     f8e:	89 45 cc             	mov    %eax,-0x34(%ebp)$/;"	l
f9	args.asm	/^  f9:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
f9	echo.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f9	forktest.asm	/^  f9:	00 $/;"	l
f9	grep.asm	/^  f9:	5b                   	pop    %ebx$/;"	l
f9	hello.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f9	mkdir.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f9	rm.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f9	sh.asm	/^      f9:	5d                   	pop    %ebp$/;"	l
f9	zombie.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f90	usertests.asm	/^     f90:	e8 eb 1f 00 00       	call   2f80 <printf>$/;"	l
f91	sh.asm	/^     f91:	85 c9                	test   %ecx,%ecx$/;"	l
f93	sh.asm	/^     f93:	74 04                	je     f99 <printint+0x19>$/;"	l
f95	sh.asm	/^     f95:	85 d2                	test   %edx,%edx$/;"	l
f95	usertests.asm	/^     f95:	e8 ae 1e 00 00       	call   2e48 <exit>$/;"	l
f97	sh.asm	/^     f97:	78 73                	js     100c <printint+0x8c>$/;"	l
f99	sh.asm	/^     f99:	89 d0                	mov    %edx,%eax$/;"	l
f9a	usertests.asm	/^     f9a:	c7 44 24 04 8b 37 00 	movl   $0x378b,0x4(%esp)$/;"	l
f9b	sh.asm	/^     f9b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)$/;"	l
fa	forktest.asm	/^  fa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fa	grep.asm	/^  fa:	5e                   	pop    %esi$/;"	l
fa	init.asm	/^  fa:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)$/;"	l
fa	kill.asm	/^  fa:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
fa	ln.asm	/^  fa:	89 d0                	mov    %edx,%eax$/;"	l
fa	sh.asm	/^      fa:	c3                   	ret    $/;"	l
fa	usertests.asm	/^      fa:	83 eb 01             	sub    $0x1,%ebx$/;"	l
fa	wc.asm	/^  fa:	55                   	push   %ebp$/;"	l
fa1	usertests.asm	/^     fa1:	00 $/;"	l
fa2	sh.asm	/^     fa2:	31 db                	xor    %ebx,%ebx$/;"	l
fa2	usertests.asm	/^     fa2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fa4	sh.asm	/^     fa4:	8d 7d e3             	lea    -0x1d(%ebp),%edi$/;"	l
fa7	sh.asm	/^     fa7:	90                   	nop    $/;"	l
fa8	sh.asm	/^     fa8:	31 d2                	xor    %edx,%edx$/;"	l
fa9	usertests.asm	/^     fa9:	e8 d2 1f 00 00       	call   2f80 <printf>$/;"	l
faa	sh.asm	/^     faa:	f7 f6                	div    %esi$/;"	l
fac	sh.asm	/^     fac:	89 c1                	mov    %eax,%ecx$/;"	l
fae	sh.asm	/^     fae:	0f b6 82 c6 14 00 00 	movzbl 0x14c6(%edx),%eax$/;"	l
fae	usertests.asm	/^     fae:	e8 95 1e 00 00       	call   2e48 <exit>$/;"	l
fb	grep.asm	/^  fb:	5d                   	pop    %ebp$/;"	l
fb	sh.asm	/^      fb:	90                   	nop    $/;"	l
fb	wc.asm	/^  fb:	89 e5                	mov    %esp,%ebp$/;"	l
fb3	usertests.asm	/^     fb3:	c7 44 24 04 a0 37 00 	movl   $0x37a0,0x4(%esp)$/;"	l
fb5	sh.asm	/^     fb5:	88 04 1f             	mov    %al,(%edi,%ebx,1)$/;"	l
fb8	sh.asm	/^     fb8:	83 c3 01             	add    $0x1,%ebx$/;"	l
fba	usertests.asm	/^     fba:	00 $/;"	l
fbb	sh.asm	/^     fbb:	85 c9                	test   %ecx,%ecx$/;"	l
fbb	usertests.asm	/^     fbb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fbd	sh.asm	/^     fbd:	89 c8                	mov    %ecx,%eax$/;"	l
fbf	sh.asm	/^     fbf:	75 e7                	jne    fa8 <printint+0x28>$/;"	l
fc	args.asm	/^  fc:	89 7c 24 04          	mov    %edi,0x4(%esp)$/;"	l
fc	grep.asm	/^  fc:	c3                   	ret    $/;"	l
fc	ln.asm	/^  fc:	5b                   	pop    %ebx$/;"	l
fc	sh.asm	/^      fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
fc1	sh.asm	/^     fc1:	8b 45 d0             	mov    -0x30(%ebp),%eax$/;"	l
fc2	usertests.asm	/^     fc2:	e8 b9 1f 00 00       	call   2f80 <printf>$/;"	l
fc4	sh.asm	/^     fc4:	85 c0                	test   %eax,%eax$/;"	l
fc6	sh.asm	/^     fc6:	74 08                	je     fd0 <printint+0x50>$/;"	l
fc7	usertests.asm	/^     fc7:	e8 7c 1e 00 00       	call   2e48 <exit>$/;"	l
fc8	sh.asm	/^     fc8:	c6 44 1d e3 2d       	movb   $0x2d,-0x1d(%ebp,%ebx,1)$/;"	l
fcc	usertests.asm	/^     fcc:	c7 44 24 04 4a 37 00 	movl   $0x374a,0x4(%esp)$/;"	l
fcd	sh.asm	/^     fcd:	83 c3 01             	add    $0x1,%ebx$/;"	l
fd	args.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fd	hello.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	74 0c                	je     10b <strlen+0x1b>$/;"	l
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	5d                   	pop    %ebp$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	usertests.asm	/^      fd = open(file, 0);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(i?"f1":"f2", 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	57                   	push   %edi$/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	sh.asm	/^     fd0:	8d 5c 1f ff          	lea    -0x1(%edi,%ebx,1),%ebx$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd3	usertests.asm	/^     fd3:	00 $/;"	l
fd4	sh.asm	/^     fd4:	8d 75 e2             	lea    -0x1e(%ebp),%esi$/;"	l
fd4	usertests.asm	/^     fd4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fd7	sh.asm	/^     fd7:	8d 7d f3             	lea    -0xd(%ebp),%edi$/;"	l
fda	sh.asm	/^     fda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdb	usertests.asm	/^     fdb:	e8 a0 1f 00 00       	call   2f80 <printf>$/;"	l
fe	cat.asm	/^  fe:	e8 fd fe ff ff       	call   0 <cat>$/;"	l
fe	ln.asm	/^  fe:	c3                   	ret    $/;"	l
fe	ls.asm	/^  fe:	89 34 24             	mov    %esi,(%esp)$/;"	l
fe	wc.asm	/^  fe:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
fe0	sh.asm	/^     fe0:	0f b6 03             	movzbl (%ebx),%eax$/;"	l
fe0	usertests.asm	/^     fe0:	e8 63 1e 00 00       	call   2e48 <exit>$/;"	l
fe3	sh.asm	/^     fe3:	83 eb 01             	sub    $0x1,%ebx$/;"	l
fe5	usertests.asm	/^     fe5:	c7 44 24 04 76 37 00 	movl   $0x3776,0x4(%esp)$/;"	l
fe6	sh.asm	/^     fe6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
fec	usertests.asm	/^     fec:	00 $/;"	l
fed	sh.asm	/^     fed:	00 $/;"	l
fed	usertests.asm	/^     fed:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fee	sh.asm	/^     fee:	89 7c 24 04          	mov    %edi,0x4(%esp)$/;"	l
fetchint	syscall.c	/^fetchint(struct proc *p, uint addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(struct proc *p, uint addr, char **pp)$/;"	f
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	kill.asm	/^  ff:	90                   	nop    $/;"	l
ff	ln.asm	/^  ff:	90                   	nop    $/;"	l
ff2	sh.asm	/^     ff2:	88 45 f3             	mov    %al,-0xd(%ebp)$/;"	l
ff4	usertests.asm	/^     ff4:	e8 87 1f 00 00       	call   2f80 <printf>$/;"	l
ff5	sh.asm	/^     ff5:	8b 45 cc             	mov    -0x34(%ebp),%eax$/;"	l
ff8	sh.asm	/^     ff8:	89 04 24             	mov    %eax,(%esp)$/;"	l
ff9	usertests.asm	/^     ff9:	e8 4a 1e 00 00       	call   2e48 <exit>$/;"	l
ffb	sh.asm	/^     ffb:	e8 08 ff ff ff       	call   f08 <write>$/;"	l
ffe	usertests.asm	/^     ffe:	c7 44 24 04 cd 37 00 	movl   $0x37cd,0x4(%esp)$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon4	typeref:struct:__anon4::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
flags	fsvar.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^  fname = pid ? "f1" : "f2";$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon7	typeref:struct:__anon7::run	file:
freep	args.asm	/^      freep = prevp;$/;"	d
freep	args.asm	/^  freep = p;$/;"	d
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	hello.asm	/^      freep = prevp;$/;"	d
freep	hello.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kalloc.c	/^static Header *freep;$/;"	v	file:
freep	kernel.asm	/^     freep = prevp;$/;"	d
freep	kernel.asm	/^ freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon4
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	bootother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	bootother.S	/^gdtdesc:$/;"	l
get_page	page.c	/^page_t *get_page(page_dir_t *dir, uint vaddress, int new) {$/;"	f
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
header	kalloc.c	/^union header {$/;"	u	file:
header	umalloc.c	/^union header {$/;"	u	file:
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
hp	args.asm	/^  hp = (Header*)p;$/;"	d
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	hello.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kernel.asm	/^ hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	args.asm	/^  i = 0;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	hello.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
i2b	mkfs.c	/^i2b(uint inum)$/;"	f
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon6
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;                    \/\/ Local APIC ID; index into cpus[] below$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fs.c	/^iinit(void)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
ino	stat.h	/^  uint ino;    \/\/ Inode number on device$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon6	typeref:struct:__anon6::inode	file:
inode	fsvar.h	/^struct inode {$/;"	s
input	console.c	/^} input;$/;"	v	typeref:struct:__anon3
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
int	args.asm	/^int$/;"	l
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	hello.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int ticks;$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	fsvar.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	kernel.asm	/^        inum = de->inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
irqmask	kernel.asm	/^  irqmask = mask;$/;"	d
irqmask	picirq.c	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	v	file:
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	kernel.asm	/^  ismp = 1;$/;"	d
ismp	mp.c	/^int ismp;$/;"	v
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(int m)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kend	kernel.asm	/^	kend = ((uint)end + PAGE) & ~(PAGE-1);$/;"	d
kend	page.c	/^static uint kend; \/\/= ((uint)end + PAGE) & ~(PAGE-1);$/;"	v	file:
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kernel_dir	kernel.asm	/^	kernel_dir = (page_dir_t *)kalloc(sizeof(page_dir_t));	$/;"	d
kernel_dir	page.c	/^page_dir_t *kernel_dir = 0;$/;"	v
kfree	kalloc.c	/^kfree(char *v, int len)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit	kalloc.c	/^kinit(int len)$/;"	f
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon7
ksegment	proc.c	/^ksegment(void)$/;"	f
ksize	kernel.asm	/^	ksize = kend - 0x00100000;		$/;"	d
ksize	page.c	/^static uint ksize;\/\/ = kend - 0x00100000;		\/\/ the size of kernel (bytes)$/;"	v	file:
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(int c)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kalloc.c	/^  int len; \/\/ bytes$/;"	m	struct:run	file:
len	kernel.asm	/^    len = strlen(argv[i]) + 1;$/;"	d
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	console.c	/^	struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon3	typeref:struct:__anon3::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^	int locking;$/;"	m	struct:__anon2	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
loop	kernel.asm	/^ loop:$/;"	l
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	args.c	/^main(int argc, char *argv[])$/;"	f
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	hello.c	/^main(int argc, char *argv[])$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(int memsize)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
major	fsvar.h	/^  short major;$/;"	m	struct:inode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^  mem = 0;$/;"	d
mem	kernel.asm	/^  mem = kalloc(sz);$/;"	d
mem	proc.h	/^  char *mem;                   \/\/ Start of process memory (kernel address)$/;"	m	struct:proc
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsize	bootblock.asm	/^  memsize = memsize & 0x0000FFFF;$/;"	d
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	240;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minor	fsvar.h	/^  short minor;$/;"	m	struct:inode
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
morecore	kalloc.c	/^morecore(uint nu)$/;"	f	file:
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpbcpu	mp.c	/^mpbcpu(void)$/;"	f
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uchar *addr, int len)$/;"	f	file:
n	args.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	args.asm	/^  n = 0;$/;"	d
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	hello.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	hello.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^	  n = (n + PAGE) & ~(PAGE-1);$/;"	d
n	kernel.asm	/^    n = MAXFILE*BSIZE - off;$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks = 995;$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	args.asm	/^    neg = 1;$/;"	d
neg	args.asm	/^  neg = 0;$/;"	d
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	hello.asm	/^    neg = 1;$/;"	d
neg	hello.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kernel.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
newmem	kernel.asm	/^  newmem = kalloc(proc->sz + n);$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
ninodes	mkfs.c	/^int ninodes = 200;$/;"	v
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	fsvar.h	/^  short nlink;$/;"	m	struct:inode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	args.asm	/^    nu = PAGE;$/;"	d
nu	cat.asm	/^    nu = PAGE;$/;"	d
nu	echo.asm	/^    nu = PAGE;$/;"	d
nu	grep.asm	/^    nu = PAGE;$/;"	d
nu	hello.asm	/^    nu = PAGE;$/;"	d
nu	init.asm	/^    nu = PAGE;$/;"	d
nu	kernel.asm	/^   nu = PAGE;$/;"	d
nu	kill.asm	/^    nu = PAGE;$/;"	d
nu	ln.asm	/^    nu = PAGE;$/;"	d
nu	ls.asm	/^    nu = PAGE;$/;"	d
nu	mkdir.asm	/^    nu = PAGE;$/;"	d
nu	rm.asm	/^    nu = PAGE;$/;"	d
nu	sh.asm	/^    nu = PAGE;$/;"	d
nu	usertests.asm	/^    nu = PAGE;$/;"	d
nu	wc.asm	/^    nu = PAGE;$/;"	d
nu	zombie.asm	/^    nu = PAGE;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = proc->tf->eax;$/;"	d
nunits	args.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	hello.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kernel.asm	/^ nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
offset	elf.h	/^  uint offset;$/;"	m	struct:proghdr
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
opentest	usertests.c	/^opentest(void)$/;"	f
os	args.asm	/^  os = s;$/;"	d
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	hello.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
out	kernel.asm	/^ out:$/;"	l
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	args.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	hello.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^		p = get_page(kernel_dir, addr_i, 1\/*create a page*\/);$/;"	d
p	kernel.asm	/^      p = (char*)r + r->len;$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)(((uint)end + PAGE) & ~(PAGE-1));$/;"	d
p	kernel.asm	/^  p = (struct run*)v;$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kernel.asm	/^ p = kalloc(nu * sizeof(Header));$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	elf.h	/^  uint pa;$/;"	m	struct:proghdr
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
page	page.h	/^struct page {$/;"	s
page_dir	page.h	/^struct page_dir {$/;"	s
page_dir_t	page.h	/^typedef struct page_dir page_dir_t;$/;"	t	typeref:struct:page_dir
page_t	kernel.asm	/^page_t *get_page(page_dir_t *dir, uint vaddress, int new) {$/;"	l
page_t	page.h	/^typedef struct page page_t; $/;"	t	typeref:struct:page
page_table	page.h	/^struct page_table {$/;"	s
page_table_t	page.h	/^typedef struct page_table page_table_t; $/;"	t	typeref:struct:page_table
pageinit	page.c	/^void pageinit() {$/;"	f
pageintr	page.c	/^void pageintr() {$/;"	f
pages	page.h	/^	page_t pages[1024];$/;"	m	struct:page_table
pagetables	page.h	/^	page_table_t *pagetables[1024];$/;"	m	struct:page_dir
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
pend	kernel.asm	/^  pend = (struct run*)(v + len);$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phyaddr	page.h	/^	unsigned int phyaddr : 20; 	\/\/ Physical address$/;"	m	struct:page
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picenable	picirq.c	/^picenable(int irq)$/;"	f
picinit	picirq.c	/^picinit(void)$/;"	f
picsetmask	picirq.c	/^picsetmask(ushort mask)$/;"	f	file:
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  volatile int pid;            \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
popcli	spinlock.c	/^popcli(void)$/;"	f
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
present	page.h	/^	unsigned int present : 1;	$/;"	m	struct:page
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sgn)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon9	typeref:struct:__anon9::proc	file:
proc	proc.h	/^  struct proc *proc;$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon9
ptaddr	kernel.asm	/^		ptaddr = (page_table_t *)kalloc(sizeof(page_table_t));$/;"	d
ptr	kalloc.c	/^   union header *ptr;$/;"	m	struct:header::__anon8	typeref:union:header::__anon8::header	file:
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon10	typeref:union:header::__anon10::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	args.asm	/^  r = fstat(fd, st);$/;"	d
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon3	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	hello.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
r_w	page.h	/^	unsigned int r_w	 : 1;	\/\/ Read\/write$/;"	m	struct:page
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
read	dev.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	file:
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* va, uint count, uint offset)$/;"	f
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
ref	fsvar.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
rend	kernel.asm	/^    rend = (struct run*)((char*)r + r->len);$/;"	d
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	args.asm	/^          s = "(null)";$/;"	d
s	args.asm	/^        s = (char*)*ap;$/;"	d
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	hello.asm	/^          s = "(null)";$/;"	d
s	hello.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kalloc.c	/^ } s;$/;"	m	union:header	typeref:struct:header::__anon8	file:
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon10	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ Switch here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
sector	buf.h	/^  uint sector;$/;"	m	struct:buf
segdesc	mmu.h	/^struct segdesc {$/;"	s
seq	usertests.asm	/^  seq = 0;$/;"	d
set_page	page.c	/^void *set_page(page_t *p, int _r_w, int _u_s) {$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	fsvar.h	/^  uint size;$/;"	m	struct:inode
size	kalloc.c	/^   uint size;$/;"	m	struct:header::__anon8	file:
size	mkfs.c	/^int size = 1024;$/;"	v
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon10	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sp	kernel.asm	/^  sp = argp;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	bootother.S	/^spin:$/;"	l
spin	bootother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	args.asm	/^  src = vsrc;$/;"	d
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	hello.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc(KSTACKSIZE);$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	bootother.S	/^start:$/;"	l
start	bootother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	bootother.S	/^start32:$/;"	l
start32	bootother.asm	/^start32:$/;"	l
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	args.asm	/^        state = '%';$/;"	d
state	args.asm	/^      state = 0;$/;"	d
state	args.asm	/^  state = 0;$/;"	d
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	hello.asm	/^        state = '%';$/;"	d
state	hello.asm	/^      state = 0;$/;"	d
state	hello.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kernel.asm	/^  state = 0;$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	args.asm	/^static Header *freep;$/;"	l
static	args.asm	/^static Header base;$/;"	l
static	args.asm	/^static inline void$/;"	l
static	args.asm	/^static void$/;"	l
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	hello.asm	/^static Header *freep;$/;"	l
static	hello.asm	/^static Header base;$/;"	l
static	hello.asm	/^static inline void$/;"	l
static	hello.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static Header *freep;$/;"	l
static	kernel.asm	/^static Header base;$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode* iget(uint dev, uint inum);$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uint kend; \/\/= ((uint)end + PAGE) & ~(PAGE-1);$/;"	l
static	kernel.asm	/^static uint ksize;\/\/ = kend - 0x00100000;		\/\/ the size of kernel (bytes)$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	l
static	kernel.asm	/^static void itrunc(struct inode*);$/;"	l
static	kernel.asm	/^static void mpmain(void) __attribute__((noreturn));$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switch_dir	page.c	/^void switch_dir(page_dir_t *dir) {$/;"	f
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = (sz+PAGE-1) & ~(PAGE-1);$/;"	d
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^int ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
timerinit	timer.c	/^timerinit(void)$/;"	f
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
twofiles	usertests.c	/^twofiles(void)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon5
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	fsvar.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
u_s	page.h	/^	unsigned int u_s	 : 1;	\/\/ User\/supervisor$/;"	m	struct:page
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	args.asm	/^uint$/;"	l
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	hello.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unused	page.h	/^	unsigned int unused  : 7;$/;"	m	struct:page
usedblocks	mkfs.c	/^uint usedblocks;$/;"	v
usegment	proc.c	/^usegment(void)$/;"	f
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
va	bootblock.asm	/^    va = (uchar*)(ph->va & 0xFFFFFF);$/;"	d
va	elf.h	/^  uint va;$/;"	m	struct:proghdr
vector0	vectors.S	/^vector0:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
vfree	kalloc.c	/^vfree(void *ap) {$/;"	f
vmalloc	kalloc.c	/^vmalloc(uint nbytes)$/;"	f
vmem_lock	kalloc.c	/^struct spinlock vmem_lock;$/;"	v	typeref:struct:spinlock
void	args.asm	/^void$/;"	l
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	hello.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void *set_page(page_t *p, int _r_w, int _u_s) {$/;"	l
void	kernel.asm	/^void pageinit() {$/;"	l
void	kernel.asm	/^void pageintr() {$/;"	l
void	kernel.asm	/^void switch_dir(page_dir_t *dir) {$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon3	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	dev.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)(0x40<<4 | 0x67);  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	args.asm	/^    x = -xx;$/;"	d
x	args.asm	/^    x = xx;$/;"	d
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	hello.asm	/^    x = -xx;$/;"	d
x	hello.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kalloc.c	/^ Align x;$/;"	m	union:header	file:
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[512];$/;"	v
