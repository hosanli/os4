!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ALT	kbd.h	11;"	d
ASSERT	lapic.c	22;"	d	file:
Align	kalloc.c	/^typedef long Align;$/;"	t	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	119;"	d	file:
BBLOCK	fs.h	42;"	d
BCAST	lapic.c	24;"	d	file:
BITMAP_H	bitmap.h	2;"	d
BPB	fs.h	39;"	d
BSIZE	fs.h	9;"	d
B_BUSY	buf.h	10;"	d
B_DIRTY	buf.h	12;"	d
B_VALID	buf.h	11;"	d
C	console.c	177;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
COM1	uart.c	14;"	d	file:
CONSOLE	dev.h	8;"	d
CONSOLE	file.h	41;"	d
CR0_PE	bootasm.S	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PE	bootblock.asm	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PE	bootother.S	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PE	bootother.asm	/^#define CR0_PE    1  \/\/ protected mode enable bit$/;"	d
CR0_PG	page.h	49;"	d
CR0_WP	page.h	50;"	d
CR4_PAE	page.h	51;"	d
CRTPORT	console.c	120;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CTL	kbd.h	10;"	d
DELIVS	lapic.c	21;"	d	file:
DIRSIZ	fs.h	45;"	d
DIR_L	page.h	58;"	d
DPL_USER	mmu.h	55;"	d
Disassembly	args.asm	/^Disassembly of section .text:$/;"	l
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	bootother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	hello.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	16;"	d	file:
EOI	lapic.c	14;"	d	file:
ERROR	lapic.c	32;"	d	file:
ESR	lapic.c	17;"	d	file:
EXEC	sh.c	8;"	d	file:
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
Header	kalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	36;"	d
ICRHI	lapic.c	25;"	d	file:
ICRLO	lapic.c	18;"	d	file:
ID	lapic.c	11;"	d	file:
IDE_BSY	ide.c	13;"	d	file:
IDE_CMD_READ	ide.c	18;"	d	file:
IDE_CMD_WRITE	ide.c	19;"	d	file:
IDE_DF	ide.c	15;"	d	file:
IDE_DRDY	ide.c	14;"	d	file:
IDE_ERR	ide.c	16;"	d	file:
INIT	lapic.c	19;"	d	file:
INPUT_BUF	console.c	168;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	8;"	d	file:
IO_PIC2	picirq.c	9;"	d	file:
IO_RTC	lapic.c	129;"	d	file:
IO_TIMER1	timer.c	10;"	d	file:
IPB	fs.h	33;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SLAVE	picirq.c	11;"	d	file:
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_BUSY	file.h	28;"	d
I_BUSY	fsvar.h	17;"	d
I_VALID	file.h	29;"	d
I_VALID	fsvar.h	18;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	3;"	d
KSTART_A	page.h	63;"	d
LEVEL	lapic.c	23;"	d	file:
LINT0	lapic.c	30;"	d	file:
LINT1	lapic.c	31;"	d	file:
LIST	sh.c	11;"	d	file:
MASKED	lapic.c	33;"	d	file:
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	20;"	d
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
NBUF	param.h	7;"	d
NCPU	param.h	4;"	d
NDEV	param.h	9;"	d
NDIRECT	fs.h	18;"	d
NELEM	defs.h	170;"	d
NFILE	param.h	6;"	d
NINDIRECT	fs.h	19;"	d
NINODE	param.h	8;"	d
NO	kbd.h	7;"	d
NOFILE	param.h	5;"	d
NPROC	param.h	1;"	d
NSEGS	proc.h	9;"	d
NUMLOCK	kbd.h	14;"	d
OFFSET_L	page.h	60;"	d
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
PAGE	param.h	2;"	d
PAGE_H	page.h	2;"	d
PAGE_L	page.h	59;"	d
PCINT	lapic.c	29;"	d	file:
PERIODIC	lapic.c	28;"	d	file:
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	10;"	d	file:
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	10;"	d
ROOTINO	fs.h	8;"	d
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECTOR	swap.c	10;"	d	file:
SECTOR_PAGE	swap.c	11;"	d	file:
SECTSIZE	bootmain.c	12;"	d	file:
SEG	mmu.h	45;"	d
SEG16	mmu.h	50;"	d
SEG_ASM	asm.h	9;"	d
SEG_KCODE	bootasm.S	/^#define SEG_KCODE 1  \/\/ kernel code$/;"	d
SEG_KCODE	bootother.S	/^#define SEG_KCODE 1  \/\/ kernel code$/;"	d
SEG_KCODE	proc.h	3;"	d
SEG_KCODE	trapasm.S	/^#define SEG_KCODE 1  \/\/ kernel code$/;"	d
SEG_KCPU	proc.h	5;"	d
SEG_KCPU	trapasm.S	/^#define SEG_KCPU  3  \/\/ kernel per-cpu data$/;"	d
SEG_KDATA	bootasm.S	/^#define SEG_KDATA 2  \/\/ kernel data+stack$/;"	d
SEG_KDATA	bootother.S	/^#define SEG_KDATA 2  \/\/ kernel data+stack$/;"	d
SEG_KDATA	proc.h	4;"	d
SEG_KDATA	trapasm.S	/^#define SEG_KDATA 2  \/\/ kernel data+stack$/;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	proc.h	8;"	d
SEG_UCODE	proc.h	6;"	d
SEG_UDATA	proc.h	7;"	d
SETGATE	mmu.h	141;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	20;"	d	file:
STA_A	asm.h	19;"	d
STA_A	mmu.h	63;"	d
STA_C	asm.h	16;"	d
STA_C	mmu.h	60;"	d
STA_E	asm.h	15;"	d
STA_E	mmu.h	59;"	d
STA_R	asm.h	18;"	d
STA_R	mmu.h	62;"	d
STA_W	asm.h	17;"	d
STA_W	mmu.h	61;"	d
STA_X	asm.h	14;"	d
STA_X	mmu.h	58;"	d
STS_CG16	mmu.h	69;"	d
STS_CG32	mmu.h	75;"	d
STS_IG16	mmu.h	71;"	d
STS_IG32	mmu.h	76;"	d
STS_LDT	mmu.h	67;"	d
STS_T16A	mmu.h	66;"	d
STS_T16B	mmu.h	68;"	d
STS_T32A	mmu.h	73;"	d
STS_T32B	mmu.h	74;"	d
STS_TG	mmu.h	70;"	d
STS_TG16	mmu.h	72;"	d
STS_TG32	mmu.h	77;"	d
SVR	lapic.c	15;"	d	file:
SWAP_SIZE	swap.c	12;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	17;"	d
SYS_close	syscall.h	8;"	d
SYS_dup	syscall.h	18;"	d
SYS_exec	syscall.h	10;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	14;"	d
SYS_getpid	syscall.h	19;"	d
SYS_kill	syscall.h	9;"	d
SYS_link	syscall.h	15;"	d
SYS_mkdir	syscall.h	16;"	d
SYS_mknod	syscall.h	12;"	d
SYS_open	syscall.h	11;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	7;"	d
SYS_sbrk	syscall.h	20;"	d
SYS_sleep	syscall.h	21;"	d
SYS_unlink	syscall.h	13;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	6;"	d
TCCR	lapic.c	35;"	d	file:
TDCR	lapic.c	36;"	d	file:
TICR	lapic.c	34;"	d	file:
TIMER	lapic.c	26;"	d	file:
TIMER_16BIT	kernel.asm	/^#define TIMER_16BIT     0x30    \/\/ r\/w counter 16 bits, LSB first$/;"	d
TIMER_16BIT	timer.c	22;"	d	file:
TIMER_DIV	timer.c	17;"	d	file:
TIMER_FREQ	timer.c	16;"	d	file:
TIMER_MODE	timer.c	19;"	d	file:
TIMER_RATEGEN	kernel.asm	/^#define TIMER_RATEGEN   0x04    \/\/ mode 2, rate generator$/;"	d
TIMER_RATEGEN	timer.c	21;"	d	file:
TIMER_SEL0	timer.c	20;"	d	file:
TPR	lapic.c	13;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
VER	lapic.c	12;"	d	file:
X1	lapic.c	27;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_args	args.asm	/^_args:     file format elf32-i386$/;"	l
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_hello	hello.asm	/^_hello:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_vfree	kalloc.c	/^_vfree(void *ap)$/;"	f
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	args.asm	/^   a:	55                   	push   %ebp$/;"	l
a	echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	hello.asm	/^   a:	55                   	push   %ebp$/;"	l
a	init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ln.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ls.asm	/^   a:	89 04 24             	mov    %eax,(%esp)$/;"	l
a	mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	args.asm	/^  a0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a0	grep.asm	/^  a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
a0	hello.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	ln.asm	/^  a0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a0	ls.asm	/^  a0:	89 04 24             	mov    %eax,(%esp)$/;"	l
a0	mkdir.asm	/^  a0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a0	rm.asm	/^  a0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a0	usertests.asm	/^      a0:	00 $/;"	l
a0	zombie.asm	/^  a0:	55                   	push   %ebp$/;"	l
a00	ls.asm	/^ a00:	c1 e0 03             	shl    $0x3,%eax$/;"	l
a01	grep.asm	/^ a01:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a03	ls.asm	/^ a03:	89 04 24             	mov    %eax,(%esp)$/;"	l
a03	sh.asm	/^     a03:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a03	usertests.asm	/^     a03:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a04	grep.asm	/^ a04:	c1 e0 03             	shl    $0x3,%eax$/;"	l
a06	ls.asm	/^ a06:	e8 61 fc ff ff       	call   66c <sbrk>$/;"	l
a06	sh.asm	/^     a06:	89 04 24             	mov    %eax,(%esp)$/;"	l
a06	usertests.asm	/^     a06:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)$/;"	l
a07	grep.asm	/^ a07:	89 04 24             	mov    %eax,(%esp)$/;"	l
a09	sh.asm	/^     a09:	e8 ff f9 ff ff       	call   40d <redircmd>$/;"	l
a0a	grep.asm	/^ a0a:	e8 61 fc ff ff       	call   670 <sbrk>$/;"	l
a0a	usertests.asm	/^     a0a:	79 16                	jns    a22 <exitwait+0x33>$/;"	l
a0b	ls.asm	/^ a0b:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
a0c	usertests.asm	/^     a0c:	c7 44 24 04 9d 38 00 	movl   $0x389d,0x4(%esp)$/;"	l
a0e	ls.asm	/^ a0e:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a0e	sh.asm	/^     a0e:	89 45 08             	mov    %eax,0x8(%ebp)$/;"	l
a0f	grep.asm	/^ a0f:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
a1	cat.asm	/^  a1:	c1 e0 02             	shl    $0x2,%eax$/;"	l
a1	hello.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	kill.asm	/^  a1:	c9                   	leave  $/;"	l
a1	usertests.asm	/^      a1:	89 04 24             	mov    %eax,(%esp)$/;"	l
a1	zombie.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a11	ls.asm	/^ a11:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
a11	sh.asm	/^     a11:	c7 44 24 08 d0 15 00 	movl   $0x15d0,0x8(%esp)$/;"	l
a12	grep.asm	/^ a12:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a13	usertests.asm	/^     a13:	00 $/;"	l
a14	usertests.asm	/^     a14:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a15	grep.asm	/^ a15:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
a15	ls.asm	/^ a15:	c7 44 24 04 9b 0b 00 	movl   $0xb9b,0x4(%esp)$/;"	l
a18	sh.asm	/^     a18:	00 $/;"	l
a19	grep.asm	/^ a19:	c7 44 24 04 8d 0b 00 	movl   $0xb8d,0x4(%esp)$/;"	l
a19	sh.asm	/^     a19:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
a1b	usertests.asm	/^     a1b:	e8 a1 26 00 00       	call   30c1 <printf>$/;"	l
a1c	ls.asm	/^ a1c:	00 $/;"	l
a1c	sh.asm	/^     a1c:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a1d	ls.asm	/^ a1d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a2	echo.asm	/^  a2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
a2	init.asm	/^  a2:	e8 52 04 00 00       	call   4f9 <printf>$/;"	l
a2	kill.asm	/^  a2:	c3                   	ret    $/;"	l
a20	grep.asm	/^ a20:	00 $/;"	l
a20	sh.asm	/^     a20:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a20	usertests.asm	/^     a20:	eb 4b                	jmp    a6d <exitwait+0x7e>$/;"	l
a21	grep.asm	/^ a21:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a22	usertests.asm	/^     a22:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)$/;"	l
a23	sh.asm	/^     a23:	89 04 24             	mov    %eax,(%esp)$/;"	l
a24	ls.asm	/^ a24:	e8 34 fd ff ff       	call   75d <printf>$/;"	l
a26	sh.asm	/^     a26:	e8 7f fc ff ff       	call   6aa <peek>$/;"	l
a26	usertests.asm	/^     a26:	74 26                	je     a4e <exitwait+0x5f>$/;"	l
a28	grep.asm	/^ a28:	e8 34 fd ff ff       	call   761 <printf>$/;"	l
a28	usertests.asm	/^     a28:	e8 23 25 00 00       	call   2f50 <wait>$/;"	l
a29	ls.asm	/^ a29:	83 7d f8 ff          	cmpl   $0xffffffff,-0x8(%ebp)$/;"	l
a2b	sh.asm	/^     a2b:	85 c0                	test   %eax,%eax$/;"	l
a2d	grep.asm	/^ a2d:	83 7d f8 ff          	cmpl   $0xffffffff,-0x8(%ebp)$/;"	l
a2d	ls.asm	/^ a2d:	75 09                	jne    a38 <morecore+0x51>$/;"	l
a2d	sh.asm	/^     a2d:	0f 85 e3 fe ff ff    	jne    916 <parseredirs+0xb>$/;"	l
a2d	usertests.asm	/^     a2d:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
a2f	ls.asm	/^ a2f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
a3	args.asm	/^  a3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a3	hello.asm	/^  a3:	83 ec 10             	sub    $0x10,%esp$/;"	l
a3	kill.asm	/^  a3:	55                   	push   %ebp$/;"	l
a3	ln.asm	/^  a3:	0f b6 10             	movzbl (%eax),%edx$/;"	l
a3	ls.asm	/^  a3:	e8 69 03 00 00       	call   411 <memset>$/;"	l
a3	mkdir.asm	/^  a3:	0f b6 10             	movzbl (%eax),%edx$/;"	l
a3	rm.asm	/^  a3:	0f b6 10             	movzbl (%eax),%edx$/;"	l
a3	wc.asm	/^  a3:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a3	zombie.asm	/^  a3:	83 ec 10             	sub    $0x10,%esp$/;"	l
a30	usertests.asm	/^     a30:	74 16                	je     a48 <exitwait+0x59>$/;"	l
a31	grep.asm	/^ a31:	75 09                	jne    a3c <morecore+0x51>$/;"	l
a32	usertests.asm	/^     a32:	c7 44 24 04 aa 38 00 	movl   $0x38aa,0x4(%esp)$/;"	l
a33	grep.asm	/^ a33:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
a33	sh.asm	/^     a33:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a36	ls.asm	/^ a36:	eb 25                	jmp    a5d <morecore+0x76>$/;"	l
a36	sh.asm	/^     a36:	c9                   	leave  $/;"	l
a37	sh.asm	/^     a37:	c3                   	ret    $/;"	l
a38	ls.asm	/^ a38:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a38	sh.asm	/^     a38:	55                   	push   %ebp$/;"	l
a39	sh.asm	/^     a39:	89 e5                	mov    %esp,%ebp$/;"	l
a39	usertests.asm	/^     a39:	00 $/;"	l
a3a	grep.asm	/^ a3a:	eb 25                	jmp    a61 <morecore+0x76>$/;"	l
a3a	usertests.asm	/^     a3a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a3b	ls.asm	/^ a3b:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a3b	sh.asm	/^     a3b:	83 ec 28             	sub    $0x28,%esp$/;"	l
a3c	grep.asm	/^ a3c:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a3e	ls.asm	/^ a3e:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
a3e	sh.asm	/^     a3e:	c7 44 24 08 d3 15 00 	movl   $0x15d3,0x8(%esp)$/;"	l
a3f	grep.asm	/^ a3f:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a4	cat.asm	/^  a4:	8b 55 e8             	mov    -0x18(%ebp),%edx$/;"	l
a4	forktest.asm	/^  a4:	00 $/;"	l
a4	grep.asm	/^  a4:	7e 2b                	jle    d1 <grep+0xd1>$/;"	l
a4	kill.asm	/^  a4:	89 e5                	mov    %esp,%ebp$/;"	l
a4	sh.asm	/^      a4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a4	usertests.asm	/^      a4:	e8 18 30 00 00       	call   30c1 <printf>$/;"	l
a41	ls.asm	/^ a41:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a41	usertests.asm	/^     a41:	e8 7b 26 00 00       	call   30c1 <printf>$/;"	l
a42	grep.asm	/^ a42:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
a44	ls.asm	/^ a44:	89 42 04             	mov    %eax,0x4(%edx)$/;"	l
a45	grep.asm	/^ a45:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a45	sh.asm	/^     a45:	00 $/;"	l
a46	sh.asm	/^     a46:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a46	usertests.asm	/^     a46:	eb 25                	jmp    a6d <exitwait+0x7e>$/;"	l
a47	ls.asm	/^ a47:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a48	grep.asm	/^ a48:	89 42 04             	mov    %eax,0x4(%edx)$/;"	l
a48	usertests.asm	/^     a48:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)$/;"	l
a49	sh.asm	/^     a49:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a4a	ls.asm	/^ a4a:	83 c0 08             	add    $0x8,%eax$/;"	l
a4b	grep.asm	/^ a4b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a4c	usertests.asm	/^     a4c:	eb 05                	jmp    a53 <exitwait+0x64>$/;"	l
a4d	ls.asm	/^ a4d:	89 04 24             	mov    %eax,(%esp)$/;"	l
a4d	sh.asm	/^     a4d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a4e	grep.asm	/^ a4e:	83 c0 08             	add    $0x8,%eax$/;"	l
a4e	usertests.asm	/^     a4e:	e8 f5 24 00 00       	call   2f48 <exit>$/;"	l
a5	forktest.asm	/^  a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a50	ls.asm	/^ a50:	e8 bb fe ff ff       	call   910 <free>$/;"	l
a50	sh.asm	/^     a50:	89 04 24             	mov    %eax,(%esp)$/;"	l
a51	grep.asm	/^ a51:	89 04 24             	mov    %eax,(%esp)$/;"	l
a53	sh.asm	/^     a53:	e8 52 fc ff ff       	call   6aa <peek>$/;"	l
a53	usertests.asm	/^     a53:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)$/;"	l
a54	grep.asm	/^ a54:	e8 bb fe ff ff       	call   914 <free>$/;"	l
a55	ls.asm	/^ a55:	a1 d0 0b 00 00       	mov    0xbd0,%eax$/;"	l
a57	usertests.asm	/^     a57:	7e a5                	jle    9fe <exitwait+0xf>$/;"	l
a58	sh.asm	/^     a58:	85 c0                	test   %eax,%eax$/;"	l
a59	grep.asm	/^ a59:	a1 c8 0b 00 00       	mov    0xbc8,%eax$/;"	l
a59	usertests.asm	/^     a59:	c7 44 24 04 ba 38 00 	movl   $0x38ba,0x4(%esp)$/;"	l
a5a	ls.asm	/^ a5a:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a5a	sh.asm	/^     a5a:	75 0c                	jne    a68 <parseblock+0x30>$/;"	l
a5c	sh.asm	/^     a5c:	c7 04 24 d5 15 00 00 	movl   $0x15d5,(%esp)$/;"	l
a5d	ls.asm	/^ a5d:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
a5e	grep.asm	/^ a5e:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a6	args.asm	/^  a6:	84 c0                	test   %al,%al$/;"	l
a6	echo.asm	/^  a6:	84 c0                	test   %al,%al$/;"	l
a6	grep.asm	/^  a6:	ba e0 0b 00 00       	mov    $0xbe0,%edx$/;"	l
a6	hello.asm	/^  a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
a6	kill.asm	/^  a6:	eb 08                	jmp    b0 <strcmp+0xd>$/;"	l
a6	ln.asm	/^  a6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a6	mkdir.asm	/^  a6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a6	rm.asm	/^  a6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a6	wc.asm	/^  a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
a6	zombie.asm	/^  a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
a60	ls.asm	/^ a60:	c9                   	leave  $/;"	l
a60	usertests.asm	/^     a60:	00 $/;"	l
a61	grep.asm	/^ a61:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
a61	ls.asm	/^ a61:	c3                   	ret    $/;"	l
a61	usertests.asm	/^     a61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
a62	ls.asm	/^ a62:	55                   	push   %ebp$/;"	l
a63	ls.asm	/^ a63:	89 e5                	mov    %esp,%ebp$/;"	l
a63	sh.asm	/^     a63:	e8 1c f9 ff ff       	call   384 <panic>$/;"	l
a64	grep.asm	/^ a64:	c9                   	leave  $/;"	l
a65	grep.asm	/^ a65:	c3                   	ret    $/;"	l
a65	ls.asm	/^ a65:	83 ec 18             	sub    $0x18,%esp$/;"	l
a66	grep.asm	/^ a66:	55                   	push   %ebp$/;"	l
a67	grep.asm	/^ a67:	89 e5                	mov    %esp,%ebp$/;"	l
a68	ls.asm	/^ a68:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a68	sh.asm	/^     a68:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
a68	usertests.asm	/^     a68:	e8 54 26 00 00       	call   30c1 <printf>$/;"	l
a69	grep.asm	/^ a69:	83 ec 18             	sub    $0x18,%esp$/;"	l
a6b	ls.asm	/^ a6b:	83 c0 07             	add    $0x7,%eax$/;"	l
a6c	grep.asm	/^ a6c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a6d	usertests.asm	/^     a6d:	c9                   	leave  $/;"	l
a6e	ls.asm	/^ a6e:	c1 e8 03             	shr    $0x3,%eax$/;"	l
a6e	usertests.asm	/^     a6e:	c3                   	ret    $/;"	l
a6f	grep.asm	/^ a6f:	83 c0 07             	add    $0x7,%eax$/;"	l
a6f	sh.asm	/^     a6f:	00 $/;"	l
a6f	usertests.asm	/^     a6f:	55                   	push   %ebp$/;"	l
a7	cat.asm	/^  a7:	03 42 04             	add    0x4(%edx),%eax$/;"	l
a7	init.asm	/^  a7:	e8 d4 02 00 00       	call   380 <exit>$/;"	l
a7	sh.asm	/^      a7:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a70	sh.asm	/^     a70:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)$/;"	l
a70	usertests.asm	/^     a70:	89 e5                	mov    %esp,%ebp$/;"	l
a71	ls.asm	/^ a71:	83 c0 01             	add    $0x1,%eax$/;"	l
a72	grep.asm	/^ a72:	c1 e8 03             	shr    $0x3,%eax$/;"	l
a72	usertests.asm	/^     a72:	83 ec 18             	sub    $0x18,%esp$/;"	l
a74	ls.asm	/^ a74:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a75	grep.asm	/^ a75:	83 c0 01             	add    $0x1,%eax$/;"	l
a75	usertests.asm	/^     a75:	e8 c6 24 00 00       	call   2f40 <fork>$/;"	l
a77	ls.asm	/^ a77:	a1 d0 0b 00 00       	mov    0xbd0,%eax$/;"	l
a77	sh.asm	/^     a77:	00 $/;"	l
a78	grep.asm	/^ a78:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a78	sh.asm	/^     a78:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a7a	usertests.asm	/^     a7a:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a7b	grep.asm	/^ a7b:	a1 c8 0b 00 00       	mov    0xbc8,%eax$/;"	l
a7b	sh.asm	/^     a7b:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a7c	ls.asm	/^ a7c:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
a7d	usertests.asm	/^     a7d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)$/;"	l
a7f	ls.asm	/^ a7f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)$/;"	l
a7f	sh.asm	/^     a7f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a8	args.asm	/^  a8:	74 10                	je     ba <strcmp+0x27>$/;"	l
a8	echo.asm	/^  a8:	75 de                	jne    88 <strcpy+0xc>$/;"	l
a8	kill.asm	/^  a8:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
a8	ls.asm	/^  a8:	c7 45 e8 b8 0b 00 00 	movl   $0xbb8,-0x18(%ebp)$/;"	l
a80	grep.asm	/^ a80:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
a81	usertests.asm	/^     a81:	0f 85 9f 00 00 00    	jne    b26 <mem+0xb7>$/;"	l
a82	sh.asm	/^     a82:	89 04 24             	mov    %eax,(%esp)$/;"	l
a83	grep.asm	/^ a83:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)$/;"	l
a83	ls.asm	/^ a83:	75 23                	jne    aa8 <malloc+0x46>$/;"	l
a85	ls.asm	/^ a85:	c7 45 f8 c8 0b 00 00 	movl   $0xbc8,-0x8(%ebp)$/;"	l
a85	sh.asm	/^     a85:	e8 d5 fa ff ff       	call   55f <gettoken>$/;"	l
a87	grep.asm	/^ a87:	75 23                	jne    aac <malloc+0x46>$/;"	l
a87	usertests.asm	/^     a87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a89	grep.asm	/^ a89:	c7 45 f8 c0 0b 00 00 	movl   $0xbc0,-0x8(%ebp)$/;"	l
a8a	sh.asm	/^     a8a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a8c	ls.asm	/^ a8c:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a8d	sh.asm	/^     a8d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
a8e	usertests.asm	/^     a8e:	eb 0e                	jmp    a9e <mem+0x2f>$/;"	l
a8f	ls.asm	/^ a8f:	a3 d0 0b 00 00       	mov    %eax,0xbd0$/;"	l
a9	ln.asm	/^  a9:	88 10                	mov    %dl,(%eax)$/;"	l
a9	mkdir.asm	/^  a9:	88 10                	mov    %dl,(%eax)$/;"	l
a9	rm.asm	/^  a9:	88 10                	mov    %dl,(%eax)$/;"	l
a9	usertests.asm	/^      a9:	c9                   	leave  $/;"	l
a90	grep.asm	/^ a90:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a90	usertests.asm	/^     a90:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a91	sh.asm	/^     a91:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a93	grep.asm	/^ a93:	a3 c8 0b 00 00       	mov    %eax,0xbc8$/;"	l
a93	usertests.asm	/^     a93:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
a94	ls.asm	/^ a94:	a1 d0 0b 00 00       	mov    0xbd0,%eax$/;"	l
a94	sh.asm	/^     a94:	89 04 24             	mov    %eax,(%esp)$/;"	l
a96	usertests.asm	/^     a96:	89 10                	mov    %edx,(%eax)$/;"	l
a97	sh.asm	/^     a97:	e8 17 fd ff ff       	call   7b3 <parseline>$/;"	l
a98	grep.asm	/^ a98:	a1 c8 0b 00 00       	mov    0xbc8,%eax$/;"	l
a98	usertests.asm	/^     a98:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a99	ls.asm	/^ a99:	a3 c8 0b 00 00       	mov    %eax,0xbc8$/;"	l
a9b	usertests.asm	/^     a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a9c	sh.asm	/^     a9c:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a9d	grep.asm	/^ a9d:	a3 c0 0b 00 00       	mov    %eax,0xbc0$/;"	l
a9e	ls.asm	/^ a9e:	c7 05 cc 0b 00 00 00 	movl   $0x0,0xbcc$/;"	l
a9e	usertests.asm	/^     a9e:	c7 04 24 11 27 00 00 	movl   $0x2711,(%esp)$/;"	l
a9f	sh.asm	/^     a9f:	c7 44 24 08 e0 15 00 	movl   $0x15e0,0x8(%esp)$/;"	l
aa	args.asm	/^  aa:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
aa	cat.asm	/^  aa:	8b 00                	mov    (%eax),%eax$/;"	l
aa	echo.asm	/^  aa:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
aa	sh.asm	/^      aa:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
aa	usertests.asm	/^      aa:	c3                   	ret    $/;"	l
aa	wc.asm	/^  aa:	0f 8f 72 ff ff ff    	jg     22 <wc+0x22>$/;"	l
aa2	grep.asm	/^ aa2:	c7 05 c4 0b 00 00 00 	movl   $0x0,0xbc4$/;"	l
aa5	ls.asm	/^ aa5:	00 00 00 $/;"	l
aa5	usertests.asm	/^     aa5:	e8 1c 29 00 00       	call   33c6 <malloc>$/;"	l
aa6	sh.asm	/^     aa6:	00 $/;"	l
aa7	sh.asm	/^     aa7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
aa8	ls.asm	/^ aa8:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
aa9	grep.asm	/^ aa9:	00 00 00 $/;"	l
aaa	sh.asm	/^     aaa:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
aaa	usertests.asm	/^     aaa:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
aab	ls.asm	/^ aab:	8b 00                	mov    (%eax),%eax$/;"	l
aac	grep.asm	/^ aac:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
aad	ls.asm	/^ aad:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aad	usertests.asm	/^     aad:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)$/;"	l
aae	sh.asm	/^     aae:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
aaf	grep.asm	/^ aaf:	8b 00                	mov    (%eax),%eax$/;"	l
ab	grep.asm	/^  ab:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ab	ln.asm	/^  ab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab	mkdir.asm	/^  ab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab	rm.asm	/^  ab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab	usertests.asm	/^      ab:	55                   	push   %ebp$/;"	l
ab0	ls.asm	/^ ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab1	grep.asm	/^ ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ab1	sh.asm	/^     ab1:	89 04 24             	mov    %eax,(%esp)$/;"	l
ab1	usertests.asm	/^     ab1:	75 dd                	jne    a90 <mem+0x21>$/;"	l
ab3	ls.asm	/^ ab3:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ab3	usertests.asm	/^     ab3:	eb 19                	jmp    ace <mem+0x5f>$/;"	l
ab4	grep.asm	/^ ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab4	sh.asm	/^     ab4:	e8 f1 fb ff ff       	call   6aa <peek>$/;"	l
ab5	usertests.asm	/^     ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab6	ls.asm	/^ ab6:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
ab7	grep.asm	/^ ab7:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ab8	usertests.asm	/^     ab8:	8b 00                	mov    (%eax),%eax$/;"	l
ab9	ls.asm	/^ ab9:	72 50                	jb     b0b <malloc+0xa9>$/;"	l
ab9	sh.asm	/^     ab9:	85 c0                	test   %eax,%eax$/;"	l
aba	grep.asm	/^ aba:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
aba	usertests.asm	/^     aba:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
abb	ls.asm	/^ abb:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
abb	sh.asm	/^     abb:	75 0c                	jne    ac9 <parseblock+0x91>$/;"	l
abd	grep.asm	/^ abd:	72 50                	jb     b0f <malloc+0xa9>$/;"	l
abd	sh.asm	/^     abd:	c7 04 24 e2 15 00 00 	movl   $0x15e2,(%esp)$/;"	l
abd	usertests.asm	/^     abd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
abe	ls.asm	/^ abe:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
abf	grep.asm	/^ abf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ac	cat.asm	/^  ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
ac	forktest.asm	/^  ac:	e8 4f ff ff ff       	call   0 <printf>$/;"	l
ac	init.asm	/^  ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ac	kill.asm	/^  ac:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ac	usertests.asm	/^      ac:	89 e5                	mov    %esp,%ebp$/;"	l
ac0	usertests.asm	/^     ac0:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac1	ls.asm	/^ ac1:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
ac2	grep.asm	/^ ac2:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ac3	usertests.asm	/^     ac3:	e8 ac 27 00 00       	call   3274 <free>$/;"	l
ac4	ls.asm	/^ ac4:	75 0c                	jne    ad2 <malloc+0x70>$/;"	l
ac4	sh.asm	/^     ac4:	e8 bb f8 ff ff       	call   384 <panic>$/;"	l
ac5	grep.asm	/^ ac5:	3b 45 fc             	cmp    -0x4(%ebp),%eax$/;"	l
ac6	ls.asm	/^ ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ac8	grep.asm	/^ ac8:	75 0c                	jne    ad6 <malloc+0x70>$/;"	l
ac8	usertests.asm	/^     ac8:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ac9	ls.asm	/^ ac9:	8b 10                	mov    (%eax),%edx$/;"	l
ac9	sh.asm	/^     ac9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
aca	grep.asm	/^ aca:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
acb	ls.asm	/^ acb:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
acb	usertests.asm	/^     acb:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
accessed	page.h	/^	unsigned int accessed: 1;$/;"	m	struct:page
acd	grep.asm	/^ acd:	8b 10                	mov    (%eax),%edx$/;"	l
ace	ls.asm	/^ ace:	89 10                	mov    %edx,(%eax)$/;"	l
ace	usertests.asm	/^     ace:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
acf	grep.asm	/^ acf:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
ad	args.asm	/^  ad:	0f b6 10             	movzbl (%eax),%edx$/;"	l
ad	echo.asm	/^  ad:	c9                   	leave  $/;"	l
ad	hello.asm	/^  ad:	eb 04                	jmp    b3 <strlen+0x13>$/;"	l
ad	sh.asm	/^      ad:	8b 40 14             	mov    0x14(%eax),%eax$/;"	l
ad	zombie.asm	/^  ad:	eb 04                	jmp    b3 <strlen+0x13>$/;"	l
ad0	ls.asm	/^ ad0:	eb 26                	jmp    af8 <malloc+0x96>$/;"	l
ad0	sh.asm	/^     ad0:	00 $/;"	l
ad1	sh.asm	/^     ad1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)$/;"	l
ad2	grep.asm	/^ ad2:	89 10                	mov    %edx,(%eax)$/;"	l
ad2	ls.asm	/^ ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ad2	usertests.asm	/^     ad2:	75 e1                	jne    ab5 <mem+0x46>$/;"	l
ad4	grep.asm	/^ ad4:	eb 26                	jmp    afc <malloc+0x96>$/;"	l
ad4	usertests.asm	/^     ad4:	c7 04 24 00 50 00 00 	movl   $0x5000,(%esp)$/;"	l
ad5	ls.asm	/^ ad5:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ad6	grep.asm	/^ ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ad8	ls.asm	/^ ad8:	89 c2                	mov    %eax,%edx$/;"	l
ad8	sh.asm	/^     ad8:	00 $/;"	l
ad9	grep.asm	/^ ad9:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ad9	sh.asm	/^     ad9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ada	ls.asm	/^ ada:	2b 55 fc             	sub    -0x4(%ebp),%edx$/;"	l
adb	usertests.asm	/^     adb:	e8 e6 28 00 00       	call   33c6 <malloc>$/;"	l
adc	grep.asm	/^ adc:	89 c2                	mov    %eax,%edx$/;"	l
adc	sh.asm	/^     adc:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
add	ls.asm	/^ add:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
addrs	fsvar.h	/^  uint addrs[NADDRS];$/;"	m	struct:inode
ade	grep.asm	/^ ade:	2b 55 fc             	sub    -0x4(%ebp),%edx$/;"	l
ae	echo.asm	/^  ae:	c3                   	ret    $/;"	l
ae	grep.asm	/^  ae:	89 d1                	mov    %edx,%ecx$/;"	l
ae	ln.asm	/^  ae:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ae	mkdir.asm	/^  ae:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ae	rm.asm	/^  ae:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ae	usertests.asm	/^      ae:	83 ec 28             	sub    $0x28,%esp$/;"	l
ae0	ls.asm	/^ ae0:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ae0	sh.asm	/^     ae0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ae0	usertests.asm	/^     ae0:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ae1	grep.asm	/^ ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ae3	ls.asm	/^ ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ae3	sh.asm	/^     ae3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ae3	usertests.asm	/^     ae3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ae4	grep.asm	/^ ae4:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ae6	ls.asm	/^ ae6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ae6	sh.asm	/^     ae6:	e8 74 fa ff ff       	call   55f <gettoken>$/;"	l
ae7	grep.asm	/^ ae7:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ae7	usertests.asm	/^     ae7:	75 19                	jne    b02 <mem+0x93>$/;"	l
ae9	ls.asm	/^ ae9:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ae9	usertests.asm	/^     ae9:	c7 44 24 04 c7 38 00 	movl   $0x38c7,0x4(%esp)$/;"	l
aea	grep.asm	/^ aea:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
aeb	sh.asm	/^     aeb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
aec	ls.asm	/^ aec:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
aed	grep.asm	/^ aed:	c1 e0 03             	shl    $0x3,%eax$/;"	l
aee	sh.asm	/^     aee:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
aef	ls.asm	/^ aef:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
af	echo.asm	/^  af:	55                   	push   %ebp$/;"	l
af	hello.asm	/^  af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
af	ls.asm	/^  af:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
af	zombie.asm	/^  af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
af0	grep.asm	/^ af0:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
af0	usertests.asm	/^     af0:	00 $/;"	l
af1	usertests.asm	/^     af1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
af2	ls.asm	/^ af2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
af2	sh.asm	/^     af2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
af3	grep.asm	/^ af3:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
af5	ls.asm	/^ af5:	89 42 04             	mov    %eax,0x4(%edx)$/;"	l
af5	sh.asm	/^     af5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
af6	grep.asm	/^ af6:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
af8	ls.asm	/^ af8:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
af8	usertests.asm	/^     af8:	e8 c4 25 00 00       	call   30c1 <printf>$/;"	l
af9	grep.asm	/^ af9:	89 42 04             	mov    %eax,0x4(%edx)$/;"	l
af9	sh.asm	/^     af9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
afb	ls.asm	/^ afb:	a3 d0 0b 00 00       	mov    %eax,0xbd0$/;"	l
afc	grep.asm	/^ afc:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
afc	sh.asm	/^     afc:	89 04 24             	mov    %eax,(%esp)$/;"	l
afd	usertests.asm	/^     afd:	e8 46 24 00 00       	call   2f48 <exit>$/;"	l
aff	grep.asm	/^ aff:	a3 c8 0b 00 00       	mov    %eax,0xbc8$/;"	l
aff	sh.asm	/^     aff:	e8 07 fe ff ff       	call   90b <parseredirs>$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocate_page_for_swap	swap.c	/^int allocate_page_for_swap(){$/;"	f
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
alltraps	trapasm.S	/^alltraps:$/;"	l
ap	args.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	hello.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
arglen	kernel.asm	/^  arglen = (arglen+3) & ~3;$/;"	d
arglen	kernel.asm	/^  arglen = 0;$/;"	d
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argp	kernel.asm	/^  argp = sz - arglen - 4*(argc+1);$/;"	d
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avail_space_in_swap	kernel.asm	/^	avail_space_in_swap = SWAP_SIZE < PAGE ? SWAP_SIZE : PAGE;$/;"	d
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	args.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	cat.asm	/^   b:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b	echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	hello.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	kernel.asm	/^  b = bget(dev, sector);$/;"	d
b	kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ln.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	sh.asm	/^       b:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b	usertests.asm	/^       b:	c7 44 24 04 c6 34 00 	movl   $0x34c6,0x4(%esp)$/;"	l
b	zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	args.asm	/^  b0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b0	echo.asm	/^  b0:	89 e5                	mov    %esp,%ebp$/;"	l
b0	grep.asm	/^  b0:	29 c1                	sub    %eax,%ecx$/;"	l
b0	init.asm	/^  b0:	75 41                	jne    f3 <main+0xf3>$/;"	l
b0	kill.asm	/^  b0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b0	sh.asm	/^      b0:	89 04 24             	mov    %eax,(%esp)$/;"	l
b0	wc.asm	/^  b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b00	ls.asm	/^ b00:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b02	usertests.asm	/^     b02:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b03	ls.asm	/^ b03:	83 c0 08             	add    $0x8,%eax$/;"	l
b04	grep.asm	/^ b04:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b04	sh.asm	/^     b04:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
b05	usertests.asm	/^     b05:	89 04 24             	mov    %eax,(%esp)$/;"	l
b06	ls.asm	/^ b06:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b07	grep.asm	/^ b07:	83 c0 08             	add    $0x8,%eax$/;"	l
b07	sh.asm	/^     b07:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b08	usertests.asm	/^     b08:	e8 67 27 00 00       	call   3274 <free>$/;"	l
b09	ls.asm	/^ b09:	eb 3a                	jmp    b45 <malloc+0xe3>$/;"	l
b0a	grep.asm	/^ b0a:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b0a	sh.asm	/^     b0a:	c9                   	leave  $/;"	l
b0b	ls.asm	/^ b0b:	a1 d0 0b 00 00       	mov    0xbd0,%eax$/;"	l
b0b	sh.asm	/^     b0b:	c3                   	ret    $/;"	l
b0c	sh.asm	/^     b0c:	55                   	push   %ebp$/;"	l
b0d	grep.asm	/^ b0d:	eb 3a                	jmp    b49 <malloc+0xe3>$/;"	l
b0d	sh.asm	/^     b0d:	89 e5                	mov    %esp,%ebp$/;"	l
b0d	usertests.asm	/^     b0d:	c7 44 24 04 e1 38 00 	movl   $0x38e1,0x4(%esp)$/;"	l
b0f	grep.asm	/^ b0f:	a1 c8 0b 00 00       	mov    0xbc8,%eax$/;"	l
b0f	sh.asm	/^     b0f:	83 ec 38             	sub    $0x38,%esp$/;"	l
b1	forktest.asm	/^  b1:	e8 ca 02 00 00       	call   380 <exit>$/;"	l
b1	ln.asm	/^  b1:	84 c0                	test   %al,%al$/;"	l
b1	mkdir.asm	/^  b1:	84 c0                	test   %al,%al$/;"	l
b1	rm.asm	/^  b1:	84 c0                	test   %al,%al$/;"	l
b1	usertests.asm	/^      b1:	a1 74 47 00 00       	mov    0x4774,%eax$/;"	l
b10	ls.asm	/^ b10:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
b12	sh.asm	/^     b12:	c7 44 24 08 d3 15 00 	movl   $0x15d3,0x8(%esp)$/;"	l
b13	ls.asm	/^ b13:	75 1d                	jne    b32 <malloc+0xd0>$/;"	l
b14	grep.asm	/^ b14:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
b14	usertests.asm	/^     b14:	00 $/;"	l
b15	ls.asm	/^ b15:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b15	usertests.asm	/^     b15:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b17	grep.asm	/^ b17:	75 1d                	jne    b36 <malloc+0xd0>$/;"	l
b18	ls.asm	/^ b18:	89 04 24             	mov    %eax,(%esp)$/;"	l
b19	grep.asm	/^ b19:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b19	sh.asm	/^     b19:	00 $/;"	l
b1a	sh.asm	/^     b1a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b1b	ls.asm	/^ b1b:	e8 c7 fe ff ff       	call   9e7 <morecore>$/;"	l
b1c	grep.asm	/^ b1c:	89 04 24             	mov    %eax,(%esp)$/;"	l
b1c	usertests.asm	/^     b1c:	e8 a0 25 00 00       	call   30c1 <printf>$/;"	l
b1d	sh.asm	/^     b1d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b1f	grep.asm	/^ b1f:	e8 c7 fe ff ff       	call   9eb <morecore>$/;"	l
b2	echo.asm	/^  b2:	eb 08                	jmp    bc <strcmp+0xd>$/;"	l
b2	grep.asm	/^  b2:	89 c8                	mov    %ecx,%eax$/;"	l
b2	init.asm	/^  b2:	c7 44 24 04 44 09 00 	movl   $0x944,0x4(%esp)$/;"	l
b2	ls.asm	/^  b2:	83 c4 24             	add    $0x24,%esp$/;"	l
b20	ls.asm	/^ b20:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b21	sh.asm	/^     b21:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b21	usertests.asm	/^     b21:	e8 22 24 00 00       	call   2f48 <exit>$/;"	l
b23	ls.asm	/^ b23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b24	grep.asm	/^ b24:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b24	sh.asm	/^     b24:	89 04 24             	mov    %eax,(%esp)$/;"	l
b26	usertests.asm	/^     b26:	e8 25 24 00 00       	call   2f50 <wait>$/;"	l
b27	grep.asm	/^ b27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b27	ls.asm	/^ b27:	75 09                	jne    b32 <malloc+0xd0>$/;"	l
b27	sh.asm	/^     b27:	e8 7e fb ff ff       	call   6aa <peek>$/;"	l
b29	ls.asm	/^ b29:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b2b	grep.asm	/^ b2b:	75 09                	jne    b36 <malloc+0xd0>$/;"	l
b2b	usertests.asm	/^     b2b:	c9                   	leave  $/;"	l
b2c	sh.asm	/^     b2c:	85 c0                	test   %eax,%eax$/;"	l
b2c	usertests.asm	/^     b2c:	c3                   	ret    $/;"	l
b2d	grep.asm	/^ b2d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
b2d	usertests.asm	/^     b2d:	55                   	push   %ebp$/;"	l
b2e	sh.asm	/^     b2e:	74 1a                	je     b4a <parseexec+0x3e>$/;"	l
b2e	usertests.asm	/^     b2e:	89 e5                	mov    %esp,%ebp$/;"	l
b3	args.asm	/^  b3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b3	cat.asm	/^  b3:	00 $/;"	l
b3	hello.asm	/^  b3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b3	kill.asm	/^  b3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b3	ln.asm	/^  b3:	0f 95 c0             	setne  %al$/;"	l
b3	mkdir.asm	/^  b3:	0f 95 c0             	setne  %al$/;"	l
b3	rm.asm	/^  b3:	0f 95 c0             	setne  %al$/;"	l
b3	sh.asm	/^      b3:	e8 28 0f 00 00       	call   fe0 <close>$/;"	l
b3	zombie.asm	/^  b3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b30	ls.asm	/^ b30:	eb 13                	jmp    b45 <malloc+0xe3>$/;"	l
b30	sh.asm	/^     b30:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b30	usertests.asm	/^     b30:	83 ec 48             	sub    $0x48,%esp$/;"	l
b32	ls.asm	/^ b32:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b33	sh.asm	/^     b33:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b33	usertests.asm	/^     b33:	c7 04 24 e9 38 00 00 	movl   $0x38e9,(%esp)$/;"	l
b34	grep.asm	/^ b34:	eb 13                	jmp    b49 <malloc+0xe3>$/;"	l
b35	ls.asm	/^ b35:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
b36	grep.asm	/^ b36:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b37	sh.asm	/^     b37:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b38	ls.asm	/^ b38:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b39	grep.asm	/^ b39:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
b3a	sh.asm	/^     b3a:	89 04 24             	mov    %eax,(%esp)$/;"	l
b3a	usertests.asm	/^     b3a:	e8 59 24 00 00       	call   2f98 <unlink>$/;"	l
b3b	ls.asm	/^ b3b:	8b 00                	mov    (%eax),%eax$/;"	l
b3c	grep.asm	/^ b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b3d	ls.asm	/^ b3d:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b3d	sh.asm	/^     b3d:	e8 f6 fe ff ff       	call   a38 <parseblock>$/;"	l
b3f	grep.asm	/^ b3f:	8b 00                	mov    (%eax),%eax$/;"	l
b3f	usertests.asm	/^     b3f:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
b4	cat.asm	/^  b4:	89 04 24             	mov    %eax,(%esp)$/;"	l
b4	echo.asm	/^  b4:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
b4	grep.asm	/^  b4:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
b4	wc.asm	/^  b4:	79 19                	jns    cf <wc+0xcf>$/;"	l
b40	ls.asm	/^ b40:	e9 6b ff ff ff       	jmp    ab0 <malloc+0x4e>$/;"	l
b41	grep.asm	/^ b41:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b42	sh.asm	/^     b42:	89 45 dc             	mov    %eax,-0x24(%ebp)$/;"	l
b44	grep.asm	/^ b44:	e9 6b ff ff ff       	jmp    ab4 <malloc+0x4e>$/;"	l
b45	ls.asm	/^ b45:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b45	sh.asm	/^     b45:	e9 0b 01 00 00       	jmp    c55 <parseexec+0x149>$/;"	l
b46	usertests.asm	/^     b46:	00 $/;"	l
b47	usertests.asm	/^     b47:	c7 04 24 e9 38 00 00 	movl   $0x38e9,(%esp)$/;"	l
b48	ls.asm	/^ b48:	c9                   	leave  $/;"	l
b49	grep.asm	/^ b49:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b49	ls.asm	/^ b49:	c3                   	ret    $/;"	l
b4a	sh.asm	/^     b4a:	e8 80 f8 ff ff       	call   3cf <execcmd>$/;"	l
b4c	grep.asm	/^ b4c:	c9                   	leave  $/;"	l
b4d	grep.asm	/^ b4d:	c3                   	ret    $/;"	l
b4e	usertests.asm	/^     b4e:	e8 35 24 00 00       	call   2f88 <open>$/;"	l
b4f	sh.asm	/^     b4f:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
b5	ls.asm	/^  b5:	5b                   	pop    %ebx$/;"	l
b52	sh.asm	/^     b52:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b53	usertests.asm	/^     b53:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b55	sh.asm	/^     b55:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
b56	usertests.asm	/^     b56:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
b58	sh.asm	/^     b58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
b5a	usertests.asm	/^     b5a:	79 19                	jns    b75 <sharedfd+0x48>$/;"	l
b5c	usertests.asm	/^     b5c:	c7 44 24 04 f4 38 00 	movl   $0x38f4,0x4(%esp)$/;"	l
b5f	sh.asm	/^     b5f:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b6	args.asm	/^  b6:	38 c2                	cmp    %al,%dl$/;"	l
b6	forktest.asm	/^  b6:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)$/;"	l
b6	hello.asm	/^  b6:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
b6	kill.asm	/^  b6:	84 c0                	test   %al,%al$/;"	l
b6	ln.asm	/^  b6:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
b6	ls.asm	/^  b6:	5d                   	pop    %ebp$/;"	l
b6	mkdir.asm	/^  b6:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
b6	rm.asm	/^  b6:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
b6	usertests.asm	/^      b6:	c7 44 24 04 1d 35 00 	movl   $0x351d,0x4(%esp)$/;"	l
b6	wc.asm	/^  b6:	c7 44 24 04 a8 09 00 	movl   $0x9a8,0x4(%esp)$/;"	l
b6	zombie.asm	/^  b6:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
b62	sh.asm	/^     b62:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b63	usertests.asm	/^     b63:	00 $/;"	l
b64	usertests.asm	/^     b64:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b66	sh.asm	/^     b66:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b69	sh.asm	/^     b69:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b6b	usertests.asm	/^     b6b:	e8 51 25 00 00       	call   30c1 <printf>$/;"	l
b6d	sh.asm	/^     b6d:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b7	cat.asm	/^  b7:	e8 0c 03 00 00       	call   3c8 <open>$/;"	l
b7	grep.asm	/^  b7:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b7	ls.asm	/^  b7:	c3                   	ret    $/;"	l
b70	sh.asm	/^     b70:	89 04 24             	mov    %eax,(%esp)$/;"	l
b70	usertests.asm	/^     b70:	e9 9c 01 00 00       	jmp    d11 <sharedfd+0x1e4>$/;"	l
b73	sh.asm	/^     b73:	e8 93 fd ff ff       	call   90b <parseredirs>$/;"	l
b75	usertests.asm	/^     b75:	e8 c6 23 00 00       	call   2f40 <fork>$/;"	l
b78	sh.asm	/^     b78:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
b7a	usertests.asm	/^     b7a:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b7b	sh.asm	/^     b7b:	e9 8e 00 00 00       	jmp    c0e <parseexec+0x102>$/;"	l
b7d	usertests.asm	/^     b7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b8	args.asm	/^  b8:	74 de                	je     98 <strcmp+0x5>$/;"	l
b8	echo.asm	/^  b8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
b8	kill.asm	/^  b8:	74 10                	je     ca <strcmp+0x27>$/;"	l
b8	ls.asm	/^  b8:	55                   	push   %ebp$/;"	l
b8	sh.asm	/^      b8:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b80	sh.asm	/^     b80:	8d 45 e8             	lea    -0x18(%ebp),%eax$/;"	l
b81	usertests.asm	/^     b81:	75 09                	jne    b8c <sharedfd+0x5f>$/;"	l
b83	sh.asm	/^     b83:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
b83	usertests.asm	/^     b83:	c7 45 cc 63 00 00 00 	movl   $0x63,-0x34(%ebp)$/;"	l
b87	sh.asm	/^     b87:	8d 45 ec             	lea    -0x14(%ebp),%eax$/;"	l
b8a	sh.asm	/^     b8a:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b8a	usertests.asm	/^     b8a:	eb 07                	jmp    b93 <sharedfd+0x66>$/;"	l
b8c	usertests.asm	/^     b8c:	c7 45 cc 70 00 00 00 	movl   $0x70,-0x34(%ebp)$/;"	l
b8e	sh.asm	/^     b8e:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b9	hello.asm	/^  b9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b9	init.asm	/^  b9:	00 $/;"	l
b9	ls.asm	/^  b9:	89 e5                	mov    %esp,%ebp$/;"	l
b9	zombie.asm	/^  b9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b91	sh.asm	/^     b91:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
b93	usertests.asm	/^     b93:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
b95	sh.asm	/^     b95:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b98	sh.asm	/^     b98:	89 04 24             	mov    %eax,(%esp)$/;"	l
b9a	usertests.asm	/^     b9a:	00 $/;"	l
b9b	sh.asm	/^     b9b:	e8 bf f9 ff ff       	call   55f <gettoken>$/;"	l
b9b	usertests.asm	/^     b9b:	8b 45 cc             	mov    -0x34(%ebp),%eax$/;"	l
b9e	usertests.asm	/^     b9e:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ba	args.asm	/^  ba:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba	forktest.asm	/^  ba:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)$/;"	l
ba	grep.asm	/^  ba:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
ba	init.asm	/^  ba:	c7 04 24 e6 08 00 00 	movl   $0x8e6,(%esp)$/;"	l
ba	kill.asm	/^  ba:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba	ln.asm	/^  ba:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ba	mkdir.asm	/^  ba:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ba	rm.asm	/^  ba:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ba0	sh.asm	/^     ba0:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ba2	usertests.asm	/^     ba2:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
ba3	sh.asm	/^     ba3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ba5	usertests.asm	/^     ba5:	89 04 24             	mov    %eax,(%esp)$/;"	l
ba7	sh.asm	/^     ba7:	0f 84 83 00 00 00    	je     c30 <parseexec+0x124>$/;"	l
ba8	usertests.asm	/^     ba8:	e8 c8 21 00 00       	call   2d75 <memset>$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	sh.asm	/^     bad:	83 7d f0 61          	cmpl   $0x61,-0x10(%ebp)$/;"	l
bad	usertests.asm	/^     bad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	kalloc.c	/^static Header base;$/;"	v	file:
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	ls.asm	/^  bb:	57                   	push   %edi$/;"	l
bb	sh.asm	/^      bb:	8b 50 10             	mov    0x10(%eax),%edx$/;"	l
bb1	sh.asm	/^     bb1:	74 0c                	je     bbf <parseexec+0xb3>$/;"	l
bb3	sh.asm	/^     bb3:	c7 04 24 a6 15 00 00 	movl   $0x15a6,(%esp)$/;"	l
bb4	usertests.asm	/^     bb4:	eb 39                	jmp    bef <sharedfd+0xc2>$/;"	l
bb6	usertests.asm	/^     bb6:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
bba	sh.asm	/^     bba:	e8 c5 f7 ff ff       	call   384 <panic>$/;"	l
bbd	usertests.asm	/^     bbd:	00 $/;"	l
bbe	usertests.asm	/^     bbe:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
bbf	sh.asm	/^     bbf:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
bc	cat.asm	/^  bc:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
bc	echo.asm	/^  bc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc	hello.asm	/^  bc:	84 c0                	test   %al,%al$/;"	l
bc	ls.asm	/^  bc:	56                   	push   %esi$/;"	l
bc	zombie.asm	/^  bc:	84 c0                	test   %al,%al$/;"	l
bc1	usertests.asm	/^     bc1:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bc2	sh.asm	/^     bc2:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
bc5	sh.asm	/^     bc5:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
bc5	usertests.asm	/^     bc5:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bc8	sh.asm	/^     bc8:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)$/;"	l
bc8	usertests.asm	/^     bc8:	89 04 24             	mov    %eax,(%esp)$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon1
bcb	usertests.asm	/^     bcb:	e8 98 23 00 00       	call   2f68 <write>$/;"	l
bcc	sh.asm	/^     bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
bcf	sh.asm	/^     bcf:	8b 4d e8             	mov    -0x18(%ebp),%ecx$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bcpu	kernel.asm	/^        bcpu = &cpus[ncpu];$/;"	d
bcpu	kernel.asm	/^  bcpu = &cpus[0];$/;"	d
bcpu	mp.c	/^static struct cpu *bcpu;$/;"	v	typeref:struct:cpu	file:
bd	args.asm	/^  bd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
bd	kill.asm	/^  bd:	0f b6 10             	movzbl (%eax),%edx$/;"	l
bd	ls.asm	/^  bd:	53                   	push   %ebx$/;"	l
bd	usertests.asm	/^      bd:	00 $/;"	l
bd	wc.asm	/^  bd:	00 $/;"	l
bd0	usertests.asm	/^     bd0:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
bd2	sh.asm	/^     bd2:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
bd3	usertests.asm	/^     bd3:	74 16                	je     beb <sharedfd+0xbe>$/;"	l
bd5	sh.asm	/^     bd5:	83 c0 08             	add    $0x8,%eax$/;"	l
bd5	usertests.asm	/^     bd5:	c7 44 24 04 20 39 00 	movl   $0x3920,0x4(%esp)$/;"	l
bd8	sh.asm	/^     bd8:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)$/;"	l
bda	kernel.asm	/^  bda = (uchar*)0x400;$/;"	d
bdc	sh.asm	/^     bdc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
bdc	usertests.asm	/^     bdc:	00 $/;"	l
bdd	usertests.asm	/^     bdd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
be	forktest.asm	/^  be:	7f d4                	jg     94 <forktest+0x6b>$/;"	l
be	grep.asm	/^  be:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
be	hello.asm	/^  be:	75 ef                	jne    af <strlen+0xf>$/;"	l
be	ln.asm	/^  be:	84 c0                	test   %al,%al$/;"	l
be	ls.asm	/^  be:	81 ec 4c 02 00 00    	sub    $0x24c,%esp$/;"	l
be	mkdir.asm	/^  be:	84 c0                	test   %al,%al$/;"	l
be	rm.asm	/^  be:	84 c0                	test   %al,%al$/;"	l
be	sh.asm	/^      be:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
be	usertests.asm	/^      be:	89 04 24             	mov    %eax,(%esp)$/;"	l
be	wc.asm	/^  be:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
be	zombie.asm	/^  be:	75 ef                	jne    af <strlen+0xf>$/;"	l
be0	sh.asm	/^     be0:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
be4	sh.asm	/^     be4:	7e 0c                	jle    bf2 <parseexec+0xe6>$/;"	l
be4	usertests.asm	/^     be4:	e8 d8 24 00 00       	call   30c1 <printf>$/;"	l
be6	sh.asm	/^     be6:	c7 04 24 f5 15 00 00 	movl   $0x15f5,(%esp)$/;"	l
be9	usertests.asm	/^     be9:	eb 0d                	jmp    bf8 <sharedfd+0xcb>$/;"	l
beb	usertests.asm	/^     beb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
bed	sh.asm	/^     bed:	e8 92 f7 ff ff       	call   384 <panic>$/;"	l
bef	usertests.asm	/^     bef:	81 7d f0 e7 03 00 00 	cmpl   $0x3e7,-0x10(%ebp)$/;"	l
bf	cat.asm	/^  bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bf	echo.asm	/^  bf:	0f b6 00             	movzbl (%eax),%eax$/;"	l
bf2	sh.asm	/^     bf2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
bf5	sh.asm	/^     bf5:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
bf6	usertests.asm	/^     bf6:	7e be                	jle    bb6 <sharedfd+0x89>$/;"	l
bf8	usertests.asm	/^     bf8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
bf9	sh.asm	/^     bf9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bfc	sh.asm	/^     bfc:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
bfc	usertests.asm	/^     bfc:	75 05                	jne    c03 <sharedfd+0xd6>$/;"	l
bfe	usertests.asm	/^     bfe:	e8 45 23 00 00       	call   2f48 <exit>$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint sector)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
bit_set_or_not	bitmap.c	/^int bit_set_or_not(unsigned char *bitmap,int bit){$/;"	f
bitblocks	mkfs.c	/^uint bitblocks;$/;"	v
bitmap	swap.c	/^	unsigned char bitmap[4096];$/;"	m	struct:swap	file:
bitmap_scan	bitmap.c	/^int bitmap_scan(unsigned char *bitmap,int size){$/;"	f
block	kernel.asm	/^	block = bitmap_scan(state.bitmap,sizeof(state.bitmap));$/;"	d
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
booted	proc.h	/^  volatile uint booted;        \/\/ Has the CPU started?$/;"	m	struct:cpu
bootmain	bootmain.c	/^bootmain(int memsize)$/;"	f
bootothers	main.c	/^bootothers(void)$/;"	f	file:
bp	args.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	cat.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	hello.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum));$/;"	d
bp	kernel.asm	/^    bp = bread(dp->dev, bmap(dp, off \/ BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kernel.asm	/^ bp = (Header*) ap - 1;$/;"	d
bp	kill.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*) ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*) ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint sector)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon3	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	usertests.c	/^char buf[2048];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	args.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	bootother.asm	/^   c:	64 00 0f             	add    %cl,%fs:(%edi)$/;"	l
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	forktest.asm	/^   c:	e8 77 01 00 00       	call   188 <strlen>$/;"	l
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	hello.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	args.asm	/^  c0:	0f b6 d0             	movzbl %al,%edx$/;"	l
c0	forktest.asm	/^  c0:	e8 c3 02 00 00       	call   388 <wait>$/;"	l
c0	hello.asm	/^  c0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c0	kill.asm	/^  c0:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c0	ln.asm	/^  c0:	75 de                	jne    a0 <strcpy+0xc>$/;"	l
c0	mkdir.asm	/^  c0:	75 de                	jne    a0 <strcpy+0xc>$/;"	l
c0	rm.asm	/^  c0:	75 de                	jne    a0 <strcpy+0xc>$/;"	l
c0	zombie.asm	/^  c0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c00	sh.asm	/^     c00:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c03	sh.asm	/^     c03:	89 04 24             	mov    %eax,(%esp)$/;"	l
c03	usertests.asm	/^     c03:	e8 48 23 00 00       	call   2f50 <wait>$/;"	l
c06	sh.asm	/^     c06:	e8 00 fd ff ff       	call   90b <parseredirs>$/;"	l
c08	usertests.asm	/^     c08:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c0b	sh.asm	/^     c0b:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
c0b	usertests.asm	/^     c0b:	89 04 24             	mov    %eax,(%esp)$/;"	l
c0e	sh.asm	/^     c0e:	c7 44 24 08 03 16 00 	movl   $0x1603,0x8(%esp)$/;"	l
c0e	usertests.asm	/^     c0e:	e8 5d 23 00 00       	call   2f70 <close>$/;"	l
c1	grep.asm	/^  c1:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c1	init.asm	/^  c1:	e8 f2 02 00 00       	call   3b8 <exec>$/;"	l
c1	sh.asm	/^      c1:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
c1	usertests.asm	/^      c1:	e8 fb 2f 00 00       	call   30c1 <printf>$/;"	l
c13	usertests.asm	/^     c13:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
c15	sh.asm	/^     c15:	00 $/;"	l
c16	sh.asm	/^     c16:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c19	sh.asm	/^     c19:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c1a	usertests.asm	/^     c1a:	00 $/;"	l
c1b	usertests.asm	/^     c1b:	c7 04 24 e9 38 00 00 	movl   $0x38e9,(%esp)$/;"	l
c1d	sh.asm	/^     c1d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c2	echo.asm	/^  c2:	84 c0                	test   %al,%al$/;"	l
c2	ln.asm	/^  c2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c2	mkdir.asm	/^  c2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c2	rm.asm	/^  c2:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c20	sh.asm	/^     c20:	89 04 24             	mov    %eax,(%esp)$/;"	l
c22	usertests.asm	/^     c22:	e8 61 23 00 00       	call   2f88 <open>$/;"	l
c23	sh.asm	/^     c23:	e8 82 fa ff ff       	call   6aa <peek>$/;"	l
c27	usertests.asm	/^     c27:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c28	sh.asm	/^     c28:	85 c0                	test   %eax,%eax$/;"	l
c2a	sh.asm	/^     c2a:	0f 84 50 ff ff ff    	je     b80 <parseexec+0x74>$/;"	l
c2a	usertests.asm	/^     c2a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
c2e	usertests.asm	/^     c2e:	79 19                	jns    c49 <sharedfd+0x11c>$/;"	l
c3	args.asm	/^  c3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c3	cat.asm	/^  c3:	79 2b                	jns    f0 <main+0x88>$/;"	l
c3	hello.asm	/^  c3:	c9                   	leave  $/;"	l
c3	kill.asm	/^  c3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c3	zombie.asm	/^  c3:	c9                   	leave  $/;"	l
c30	sh.asm	/^     c30:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
c30	usertests.asm	/^     c30:	c7 44 24 04 40 39 00 	movl   $0x3940,0x4(%esp)$/;"	l
c33	sh.asm	/^     c33:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
c36	sh.asm	/^     c36:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)$/;"	l
c37	usertests.asm	/^     c37:	00 $/;"	l
c38	usertests.asm	/^     c38:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c3d	sh.asm	/^     c3d:	00 $/;"	l
c3e	sh.asm	/^     c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c3f	usertests.asm	/^     c3f:	e8 7d 24 00 00       	call   30c1 <printf>$/;"	l
c4	echo.asm	/^  c4:	74 10                	je     d6 <strcmp+0x27>$/;"	l
c4	hello.asm	/^  c4:	c3                   	ret    $/;"	l
c4	ls.asm	/^  c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
c4	sh.asm	/^      c4:	89 54 24 04          	mov    %edx,0x4(%esp)$/;"	l
c4	zombie.asm	/^  c4:	c3                   	ret    $/;"	l
c41	sh.asm	/^     c41:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
c44	sh.asm	/^     c44:	83 c0 08             	add    $0x8,%eax$/;"	l
c44	usertests.asm	/^     c44:	e9 c8 00 00 00       	jmp    d11 <sharedfd+0x1e4>$/;"	l
c47	sh.asm	/^     c47:	c7 44 82 0c 00 00 00 	movl   $0x0,0xc(%edx,%eax,4)$/;"	l
c49	usertests.asm	/^     c49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
c4e	sh.asm	/^     c4e:	00 $/;"	l
c4f	sh.asm	/^     c4f:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c5	cat.asm	/^  c5:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
c5	forktest.asm	/^  c5:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
c5	grep.asm	/^  c5:	c7 04 24 e0 0b 00 00 	movl   $0xbe0,(%esp)$/;"	l
c5	hello.asm	/^  c5:	55                   	push   %ebp$/;"	l
c5	ln.asm	/^  c5:	c9                   	leave  $/;"	l
c5	mkdir.asm	/^  c5:	c9                   	leave  $/;"	l
c5	rm.asm	/^  c5:	c9                   	leave  $/;"	l
c5	wc.asm	/^  c5:	e8 eb 04 00 00       	call   5b5 <printf>$/;"	l
c5	zombie.asm	/^  c5:	55                   	push   %ebp$/;"	l
c50	usertests.asm	/^     c50:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c52	sh.asm	/^     c52:	89 45 dc             	mov    %eax,-0x24(%ebp)$/;"	l
c53	usertests.asm	/^     c53:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
c55	sh.asm	/^     c55:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
c56	usertests.asm	/^     c56:	eb 35                	jmp    c8d <sharedfd+0x160>$/;"	l
c58	sh.asm	/^     c58:	c9                   	leave  $/;"	l
c58	usertests.asm	/^     c58:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
c59	sh.asm	/^     c59:	c3                   	ret    $/;"	l
c5a	sh.asm	/^     c5a:	55                   	push   %ebp$/;"	l
c5b	sh.asm	/^     c5b:	89 e5                	mov    %esp,%ebp$/;"	l
c5d	sh.asm	/^     c5d:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
c5f	usertests.asm	/^     c5f:	eb 24                	jmp    c85 <sharedfd+0x158>$/;"	l
c6	args.asm	/^  c6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c6	echo.asm	/^  c6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c6	hello.asm	/^  c6:	89 e5                	mov    %esp,%ebp$/;"	l
c6	init.asm	/^  c6:	c7 44 24 04 17 09 00 	movl   $0x917,0x4(%esp)$/;"	l
c6	kill.asm	/^  c6:	38 c2                	cmp    %al,%dl$/;"	l
c6	ln.asm	/^  c6:	c3                   	ret    $/;"	l
c6	mkdir.asm	/^  c6:	c3                   	ret    $/;"	l
c6	rm.asm	/^  c6:	c3                   	ret    $/;"	l
c6	usertests.asm	/^      c6:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
c6	zombie.asm	/^  c6:	89 e5                	mov    %esp,%ebp$/;"	l
c60	sh.asm	/^     c60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
c61	usertests.asm	/^     c61:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c64	sh.asm	/^     c64:	75 0c                	jne    c72 <nulterminate+0x18>$/;"	l
c64	usertests.asm	/^     c64:	0f b6 44 05 de       	movzbl -0x22(%ebp,%eax,1),%eax$/;"	l
c66	sh.asm	/^     c66:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)$/;"	l
c69	usertests.asm	/^     c69:	3c 63                	cmp    $0x63,%al$/;"	l
c6b	usertests.asm	/^     c6b:	75 04                	jne    c71 <sharedfd+0x144>$/;"	l
c6d	sh.asm	/^     c6d:	e9 d2 00 00 00       	jmp    d44 <nulterminate+0xea>$/;"	l
c6d	usertests.asm	/^     c6d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)$/;"	l
c7	ln.asm	/^  c7:	55                   	push   %ebp$/;"	l
c7	mkdir.asm	/^  c7:	55                   	push   %ebp$/;"	l
c7	rm.asm	/^  c7:	55                   	push   %ebp$/;"	l
c71	usertests.asm	/^     c71:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c72	sh.asm	/^     c72:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c74	usertests.asm	/^     c74:	0f b6 44 05 de       	movzbl -0x22(%ebp,%eax,1),%eax$/;"	l
c75	sh.asm	/^     c75:	8b 00                	mov    (%eax),%eax$/;"	l
c77	sh.asm	/^     c77:	89 45 dc             	mov    %eax,-0x24(%ebp)$/;"	l
c79	usertests.asm	/^     c79:	3c 70                	cmp    $0x70,%al$/;"	l
c7a	sh.asm	/^     c7a:	83 7d dc 05          	cmpl   $0x5,-0x24(%ebp)$/;"	l
c7b	usertests.asm	/^     c7b:	75 04                	jne    c81 <sharedfd+0x154>$/;"	l
c7d	usertests.asm	/^     c7d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
c7e	sh.asm	/^     c7e:	0f 87 ba 00 00 00    	ja     d3e <nulterminate+0xe4>$/;"	l
c8	cat.asm	/^  c8:	c1 e0 02             	shl    $0x2,%eax$/;"	l
c8	forktest.asm	/^  c8:	74 19                	je     e3 <forktest+0xba>$/;"	l
c8	hello.asm	/^  c8:	83 ec 18             	sub    $0x18,%esp$/;"	l
c8	kill.asm	/^  c8:	74 de                	je     a8 <strcmp+0x5>$/;"	l
c8	ln.asm	/^  c8:	89 e5                	mov    %esp,%ebp$/;"	l
c8	mkdir.asm	/^  c8:	89 e5                	mov    %esp,%ebp$/;"	l
c8	rm.asm	/^  c8:	89 e5                	mov    %esp,%ebp$/;"	l
c8	sh.asm	/^      c8:	89 04 24             	mov    %eax,(%esp)$/;"	l
c8	zombie.asm	/^  c8:	83 ec 18             	sub    $0x18,%esp$/;"	l
c81	usertests.asm	/^     c81:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
c84	sh.asm	/^     c84:	8b 55 dc             	mov    -0x24(%ebp),%edx$/;"	l
c85	usertests.asm	/^     c85:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
c87	sh.asm	/^     c87:	8b 04 95 08 16 00 00 	mov    0x1608(,%edx,4),%eax$/;"	l
c88	usertests.asm	/^     c88:	83 f8 09             	cmp    $0x9,%eax$/;"	l
c8b	usertests.asm	/^     c8b:	76 d4                	jbe    c61 <sharedfd+0x134>$/;"	l
c8d	usertests.asm	/^     c8d:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
c8e	sh.asm	/^     c8e:	ff e0                	jmp    *%eax$/;"	l
c9	args.asm	/^  c9:	0f b6 c0             	movzbl %al,%eax$/;"	l
c9	echo.asm	/^  c9:	0f b6 10             	movzbl (%eax),%edx$/;"	l
c90	sh.asm	/^     c90:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c93	sh.asm	/^     c93:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
c94	usertests.asm	/^     c94:	00 $/;"	l
c95	usertests.asm	/^     c95:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
c96	sh.asm	/^     c96:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)$/;"	l
c98	usertests.asm	/^     c98:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
c9c	usertests.asm	/^     c9c:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c9d	sh.asm	/^     c9d:	eb 14                	jmp    cb3 <nulterminate+0x59>$/;"	l
c9f	sh.asm	/^     c9f:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c9f	usertests.asm	/^     c9f:	89 04 24             	mov    %eax,(%esp)$/;"	l
ca	forktest.asm	/^  ca:	c7 44 24 04 5a 04 00 	movl   $0x45a,0x4(%esp)$/;"	l
ca	kill.asm	/^  ca:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ca	ln.asm	/^  ca:	eb 08                	jmp    d4 <strcmp+0xd>$/;"	l
ca	mkdir.asm	/^  ca:	eb 08                	jmp    d4 <strcmp+0xd>$/;"	l
ca	rm.asm	/^  ca:	eb 08                	jmp    d4 <strcmp+0xd>$/;"	l
ca	wc.asm	/^  ca:	e8 6d 03 00 00       	call   43c <exit>$/;"	l
ca2	sh.asm	/^     ca2:	8b 55 f0             	mov    -0x10(%ebp),%edx$/;"	l
ca2	usertests.asm	/^     ca2:	e8 b9 22 00 00       	call   2f60 <read>$/;"	l
ca5	sh.asm	/^     ca5:	83 c0 08             	add    $0x8,%eax$/;"	l
ca7	usertests.asm	/^     ca7:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ca8	sh.asm	/^     ca8:	8b 44 82 0c          	mov    0xc(%edx,%eax,4),%eax$/;"	l
caa	usertests.asm	/^     caa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
cac	sh.asm	/^     cac:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
cae	usertests.asm	/^     cae:	7f a8                	jg     c58 <sharedfd+0x12b>$/;"	l
caf	sh.asm	/^     caf:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	cat.asm	/^  cb:	8b 55 e8             	mov    -0x18(%ebp),%edx$/;"	l
cb	hello.asm	/^  cb:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
cb	ls.asm	/^  cb:	00 $/;"	l
cb	sh.asm	/^      cb:	e8 28 0f 00 00       	call   ff8 <open>$/;"	l
cb	zombie.asm	/^  cb:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
cb0	usertests.asm	/^     cb0:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cb3	sh.asm	/^     cb3:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
cb3	usertests.asm	/^     cb3:	89 04 24             	mov    %eax,(%esp)$/;"	l
cb6	sh.asm	/^     cb6:	8b 55 f0             	mov    -0x10(%ebp),%edx$/;"	l
cb6	usertests.asm	/^     cb6:	e8 b5 22 00 00       	call   2f70 <close>$/;"	l
cb9	sh.asm	/^     cb9:	8b 44 82 04          	mov    0x4(%edx,%eax,4),%eax$/;"	l
cbb	usertests.asm	/^     cbb:	c7 04 24 e9 38 00 00 	movl   $0x38e9,(%esp)$/;"	l
cbd	sh.asm	/^     cbd:	85 c0                	test   %eax,%eax$/;"	l
cbf	sh.asm	/^     cbf:	75 de                	jne    c9f <nulterminate+0x45>$/;"	l
cc	args.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	args.asm	/^  cc:	89 d1                	mov    %edx,%ecx$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^  cc:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	e8 d4 04 00 00       	call   5a5 <memmove>$/;"	l
cc	hello.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^  cc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^  cc:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^  cc:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc1	sh.asm	/^     cc1:	eb 7b                	jmp    d3e <nulterminate+0xe4>$/;"	l
cc2	usertests.asm	/^     cc2:	e8 d1 22 00 00       	call   2f98 <unlink>$/;"	l
cc3	sh.asm	/^     cc3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc6	sh.asm	/^     cc6:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
cc7	usertests.asm	/^     cc7:	81 7d f8 10 27 00 00 	cmpl   $0x2710,-0x8(%ebp)$/;"	l
cc9	sh.asm	/^     cc9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ccc	sh.asm	/^     ccc:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
cce	usertests.asm	/^     cce:	75 1f                	jne    cef <sharedfd+0x1c2>$/;"	l
ccf	sh.asm	/^     ccf:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd	init.asm	/^  cd:	00 $/;"	l
cd	kill.asm	/^  cd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cd	usertests.asm	/^      cd:	00 $/;"	l
cd0	usertests.asm	/^     cd0:	81 7d fc 10 27 00 00 	cmpl   $0x2710,-0x4(%ebp)$/;"	l
cd2	sh.asm	/^     cd2:	e8 83 ff ff ff       	call   c5a <nulterminate>$/;"	l
cd7	sh.asm	/^     cd7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
cd7	usertests.asm	/^     cd7:	75 16                	jne    cef <sharedfd+0x1c2>$/;"	l
cd9	usertests.asm	/^     cd9:	c7 44 24 04 6b 39 00 	movl   $0x396b,0x4(%esp)$/;"	l
cda	sh.asm	/^     cda:	8b 40 0c             	mov    0xc(%eax),%eax$/;"	l
cdd	sh.asm	/^     cdd:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
ce	args.asm	/^  ce:	29 c1                	sub    %eax,%ecx$/;"	l
ce	cat.asm	/^  ce:	03 42 04             	add    0x4(%edx),%eax$/;"	l
ce	hello.asm	/^  ce:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
ce	init.asm	/^  ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
ce	usertests.asm	/^      ce:	c7 04 24 2e 35 00 00 	movl   $0x352e,(%esp)$/;"	l
ce	zombie.asm	/^  ce:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
ce0	sh.asm	/^     ce0:	eb 5c                	jmp    d3e <nulterminate+0xe4>$/;"	l
ce0	usertests.asm	/^     ce0:	00 $/;"	l
ce1	usertests.asm	/^     ce1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
ce2	sh.asm	/^     ce2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce5	sh.asm	/^     ce5:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
ce8	sh.asm	/^     ce8:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ce8	usertests.asm	/^     ce8:	e8 d4 23 00 00       	call   30c1 <printf>$/;"	l
ceb	sh.asm	/^     ceb:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ced	usertests.asm	/^     ced:	eb 22                	jmp    d11 <sharedfd+0x1e4>$/;"	l
cee	sh.asm	/^     cee:	89 04 24             	mov    %eax,(%esp)$/;"	l
cef	usertests.asm	/^     cef:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
cf	echo.asm	/^  cf:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cf	ls.asm	/^  cf:	89 04 24             	mov    %eax,(%esp)$/;"	l
cf	wc.asm	/^  cf:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
cf1	sh.asm	/^     cf1:	e8 64 ff ff ff       	call   c5a <nulterminate>$/;"	l
cf2	usertests.asm	/^     cf2:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
cf6	sh.asm	/^     cf6:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
cf6	usertests.asm	/^     cf6:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
cf9	sh.asm	/^     cf9:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
cf9	usertests.asm	/^     cf9:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
cfc	sh.asm	/^     cfc:	89 04 24             	mov    %eax,(%esp)$/;"	l
cfd	usertests.asm	/^     cfd:	c7 44 24 04 78 39 00 	movl   $0x3978,0x4(%esp)$/;"	l
cff	sh.asm	/^     cff:	e8 56 ff ff ff       	call   c5a <nulterminate>$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clear_bit	bitmap.c	/^void clear_bit(unsigned char *bitmap,int bit){$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
code	kernel.asm	/^  code = (uchar*)0x7000;$/;"	d
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*)mp->physaddr;$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon2	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ Switch here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^  struct cpu *cpu;$/;"	m	struct:cpu	typeref:struct:cpu::cpu
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)0xb8000;  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	args.asm	/^   d:	51                   	push   %ecx$/;"	l
d	echo.asm	/^   d:	51                   	push   %ecx$/;"	l
d	grep.asm	/^   d:	e9 bf 00 00 00       	jmp    d1 <grep+0xd1>$/;"	l
d	hello.asm	/^   d:	51                   	push   %ecx$/;"	l
d	init.asm	/^   d:	51                   	push   %ecx$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	51                   	push   %ecx$/;"	l
d	ln.asm	/^   d:	51                   	push   %ecx$/;"	l
d	ls.asm	/^   d:	e8 da 03 00 00       	call   3ec <strlen>$/;"	l
d	mkdir.asm	/^   d:	51                   	push   %ecx$/;"	l
d	rm.asm	/^   d:	51                   	push   %ecx$/;"	l
d	wc.asm	/^   d:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d	zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	args.asm	/^  d0:	89 c8                	mov    %ecx,%eax$/;"	l
d0	kill.asm	/^  d0:	0f b6 d0             	movzbl %al,%edx$/;"	l
d0	ln.asm	/^  d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d0	mkdir.asm	/^  d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d0	rm.asm	/^  d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d0	sh.asm	/^      d0:	85 c0                	test   %eax,%eax$/;"	l
d04	sh.asm	/^     d04:	eb 38                	jmp    d3e <nulterminate+0xe4>$/;"	l
d04	usertests.asm	/^     d04:	00 $/;"	l
d05	usertests.asm	/^     d05:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d06	sh.asm	/^     d06:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d09	sh.asm	/^     d09:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
d0c	sh.asm	/^     d0c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d0c	usertests.asm	/^     d0c:	e8 b0 23 00 00       	call   30c1 <printf>$/;"	l
d0f	sh.asm	/^     d0f:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d1	cat.asm	/^  d1:	8b 00                	mov    (%eax),%eax$/;"	l
d1	forktest.asm	/^  d1:	00 $/;"	l
d1	grep.asm	/^  d1:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
d11	usertests.asm	/^     d11:	c9                   	leave  $/;"	l
d12	sh.asm	/^     d12:	89 04 24             	mov    %eax,(%esp)$/;"	l
d12	usertests.asm	/^     d12:	c3                   	ret    $/;"	l
d13	usertests.asm	/^     d13:	55                   	push   %ebp$/;"	l
d14	usertests.asm	/^     d14:	89 e5                	mov    %esp,%ebp$/;"	l
d15	sh.asm	/^     d15:	e8 40 ff ff ff       	call   c5a <nulterminate>$/;"	l
d16	usertests.asm	/^     d16:	83 ec 48             	sub    $0x48,%esp$/;"	l
d19	usertests.asm	/^     d19:	c7 44 24 04 8d 39 00 	movl   $0x398d,0x4(%esp)$/;"	l
d1a	sh.asm	/^     d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d1d	sh.asm	/^     d1d:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
d2	args.asm	/^  d2:	5d                   	pop    %ebp$/;"	l
d2	echo.asm	/^  d2:	38 c2                	cmp    %al,%dl$/;"	l
d2	forktest.asm	/^  d2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d2	hello.asm	/^  d2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d2	ls.asm	/^  d2:	e8 4d 05 00 00       	call   624 <open>$/;"	l
d2	sh.asm	/^      d2:	79 23                	jns    f7 <runcmd+0xf7>$/;"	l
d2	wc.asm	/^  d2:	89 44 24 14          	mov    %eax,0x14(%esp)$/;"	l
d2	zombie.asm	/^  d2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d20	sh.asm	/^     d20:	89 04 24             	mov    %eax,(%esp)$/;"	l
d20	usertests.asm	/^     d20:	00 $/;"	l
d21	usertests.asm	/^     d21:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d23	sh.asm	/^     d23:	e8 32 ff ff ff       	call   c5a <nulterminate>$/;"	l
d28	sh.asm	/^     d28:	eb 14                	jmp    d3e <nulterminate+0xe4>$/;"	l
d28	usertests.asm	/^     d28:	e8 94 23 00 00       	call   30c1 <printf>$/;"	l
d2a	sh.asm	/^     d2a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2d	sh.asm	/^     d2d:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
d2d	usertests.asm	/^     d2d:	c7 04 24 9c 39 00 00 	movl   $0x399c,(%esp)$/;"	l
d3	args.asm	/^  d3:	c3                   	ret    $/;"	l
d3	cat.asm	/^  d3:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
d3	kill.asm	/^  d3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d30	sh.asm	/^     d30:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
d33	sh.asm	/^     d33:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d34	usertests.asm	/^     d34:	e8 5f 22 00 00       	call   2f98 <unlink>$/;"	l
d36	sh.asm	/^     d36:	89 04 24             	mov    %eax,(%esp)$/;"	l
d39	sh.asm	/^     d39:	e8 1c ff ff ff       	call   c5a <nulterminate>$/;"	l
d39	usertests.asm	/^     d39:	c7 04 24 9f 39 00 00 	movl   $0x399f,(%esp)$/;"	l
d3e	sh.asm	/^     d3e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d4	args.asm	/^  d4:	55                   	push   %ebp$/;"	l
d4	echo.asm	/^  d4:	74 de                	je     b4 <strcmp+0x5>$/;"	l
d4	grep.asm	/^  d4:	b8 00 04 00 00       	mov    $0x400,%eax$/;"	l
d4	ln.asm	/^  d4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d4	mkdir.asm	/^  d4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d4	rm.asm	/^  d4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d4	sh.asm	/^      d4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d40	usertests.asm	/^     d40:	e8 53 22 00 00       	call   2f98 <unlink>$/;"	l
d41	sh.asm	/^     d41:	89 45 d8             	mov    %eax,-0x28(%ebp)$/;"	l
d44	sh.asm	/^     d44:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
d45	usertests.asm	/^     d45:	e8 f6 21 00 00       	call   2f40 <fork>$/;"	l
d47	sh.asm	/^     d47:	c9                   	leave  $/;"	l
d48	sh.asm	/^     d48:	c3                   	ret    $/;"	l
d49	sh.asm	/^     d49:	90                   	nop    $/;"	l
d4a	sh.asm	/^     d4a:	90                   	nop    $/;"	l
d4a	usertests.asm	/^     d4a:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
d4b	sh.asm	/^     d4b:	90                   	nop    $/;"	l
d4c	sh.asm	/^     d4c:	55                   	push   %ebp$/;"	l
d4d	sh.asm	/^     d4d:	89 e5                	mov    %esp,%ebp$/;"	l
d4d	usertests.asm	/^     d4d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
d4f	sh.asm	/^     d4f:	83 ec 10             	sub    $0x10,%esp$/;"	l
d5	args.asm	/^  d5:	89 e5                	mov    %esp,%ebp$/;"	l
d5	hello.asm	/^  d5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d5	init.asm	/^  d5:	e8 1f 04 00 00       	call   4f9 <printf>$/;"	l
d5	usertests.asm	/^      d5:	e8 ae 2e 00 00       	call   2f88 <open>$/;"	l
d5	zombie.asm	/^  d5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d51	usertests.asm	/^     d51:	79 19                	jns    d6c <twofiles+0x59>$/;"	l
d52	sh.asm	/^     d52:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d53	usertests.asm	/^     d53:	c7 44 24 04 9d 38 00 	movl   $0x389d,0x4(%esp)$/;"	l
d55	sh.asm	/^     d55:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d58	sh.asm	/^     d58:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d5a	usertests.asm	/^     d5a:	00 $/;"	l
d5b	sh.asm	/^     d5b:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d5b	usertests.asm	/^     d5b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d5e	sh.asm	/^     d5e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d6	echo.asm	/^  d6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d6	kill.asm	/^  d6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d6	wc.asm	/^  d6:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
d61	sh.asm	/^     d61:	88 10                	mov    %dl,(%eax)$/;"	l
d62	usertests.asm	/^     d62:	e8 5a 23 00 00       	call   30c1 <printf>$/;"	l
d63	sh.asm	/^     d63:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d66	sh.asm	/^     d66:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d67	usertests.asm	/^     d67:	e9 30 02 00 00       	jmp    f9c <twofiles+0x289>$/;"	l
d69	sh.asm	/^     d69:	84 c0                	test   %al,%al$/;"	l
d6b	sh.asm	/^     d6b:	0f 95 c0             	setne  %al$/;"	l
d6c	usertests.asm	/^     d6c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
d6e	sh.asm	/^     d6e:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d7	args.asm	/^  d7:	83 ec 10             	sub    $0x10,%esp$/;"	l
d7	cat.asm	/^  d7:	c7 44 24 04 ff 08 00 	movl   $0x8ff,0x4(%esp)$/;"	l
d7	ln.asm	/^  d7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d7	ls.asm	/^  d7:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
d7	mkdir.asm	/^  d7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d7	rm.asm	/^  d7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d7	sh.asm	/^      d7:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
d70	usertests.asm	/^     d70:	74 09                	je     d7b <twofiles+0x68>$/;"	l
d72	sh.asm	/^     d72:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d72	usertests.asm	/^     d72:	c7 45 cc 9c 39 00 00 	movl   $0x399c,-0x34(%ebp)$/;"	l
d76	sh.asm	/^     d76:	84 c0                	test   %al,%al$/;"	l
d78	sh.asm	/^     d78:	75 de                	jne    d58 <strcpy+0xc>$/;"	l
d79	usertests.asm	/^     d79:	eb 07                	jmp    d82 <twofiles+0x6f>$/;"	l
d7a	sh.asm	/^     d7a:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d7b	usertests.asm	/^     d7b:	c7 45 cc 9f 39 00 00 	movl   $0x399f,-0x34(%ebp)$/;"	l
d7d	sh.asm	/^     d7d:	c9                   	leave  $/;"	l
d7e	sh.asm	/^     d7e:	c3                   	ret    $/;"	l
d7f	sh.asm	/^     d7f:	55                   	push   %ebp$/;"	l
d80	sh.asm	/^     d80:	89 e5                	mov    %esp,%ebp$/;"	l
d82	sh.asm	/^     d82:	eb 08                	jmp    d8c <strcmp+0xd>$/;"	l
d82	usertests.asm	/^     d82:	8b 45 cc             	mov    -0x34(%ebp),%eax$/;"	l
d84	sh.asm	/^     d84:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d85	usertests.asm	/^     d85:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
d88	sh.asm	/^     d88:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d88	usertests.asm	/^     d88:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
d8c	sh.asm	/^     d8c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d8f	sh.asm	/^     d8f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d8f	usertests.asm	/^     d8f:	00 $/;"	l
d9	echo.asm	/^  d9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d9	forktest.asm	/^  d9:	e8 22 ff ff ff       	call   0 <printf>$/;"	l
d9	grep.asm	/^  d9:	29 d0                	sub    %edx,%eax$/;"	l
d9	hello.asm	/^  d9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d9	kill.asm	/^  d9:	0f b6 c0             	movzbl %al,%eax$/;"	l
d9	wc.asm	/^  d9:	89 44 24 10          	mov    %eax,0x10(%esp)$/;"	l
d9	zombie.asm	/^  d9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d90	usertests.asm	/^     d90:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d92	sh.asm	/^     d92:	84 c0                	test   %al,%al$/;"	l
d93	usertests.asm	/^     d93:	89 04 24             	mov    %eax,(%esp)$/;"	l
d94	sh.asm	/^     d94:	74 10                	je     da6 <strcmp+0x27>$/;"	l
d96	sh.asm	/^     d96:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d96	usertests.asm	/^     d96:	e8 ed 21 00 00       	call   2f88 <open>$/;"	l
d99	sh.asm	/^     d99:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d9b	usertests.asm	/^     d9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
d9c	sh.asm	/^     d9c:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d9e	usertests.asm	/^     d9e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
d9f	sh.asm	/^     d9f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da	args.asm	/^  da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
da	init.asm	/^  da:	e8 a1 02 00 00       	call   380 <exit>$/;"	l
da	ln.asm	/^  da:	84 c0                	test   %al,%al$/;"	l
da	ls.asm	/^  da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
da	mkdir.asm	/^  da:	84 c0                	test   %al,%al$/;"	l
da	rm.asm	/^  da:	84 c0                	test   %al,%al$/;"	l
da	sh.asm	/^      da:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
da	usertests.asm	/^      da:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
da2	sh.asm	/^     da2:	38 c2                	cmp    %al,%dl$/;"	l
da2	usertests.asm	/^     da2:	79 19                	jns    dbd <twofiles+0xaa>$/;"	l
da4	sh.asm	/^     da4:	74 de                	je     d84 <strcmp+0x5>$/;"	l
da4	usertests.asm	/^     da4:	c7 44 24 04 a2 39 00 	movl   $0x39a2,0x4(%esp)$/;"	l
da6	sh.asm	/^     da6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
da9	sh.asm	/^     da9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dab	usertests.asm	/^     dab:	00 $/;"	l
dac	sh.asm	/^     dac:	0f b6 d0             	movzbl %al,%edx$/;"	l
dac	usertests.asm	/^     dac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
daf	sh.asm	/^     daf:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
data	buf.h	/^  uchar data[512];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
db	grep.asm	/^  db:	89 c2                	mov    %eax,%edx$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db2	sh.asm	/^     db2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
db3	usertests.asm	/^     db3:	e8 09 23 00 00       	call   30c1 <printf>$/;"	l
db5	sh.asm	/^     db5:	0f b6 c0             	movzbl %al,%eax$/;"	l
db8	sh.asm	/^     db8:	89 d1                	mov    %edx,%ecx$/;"	l
db8	usertests.asm	/^     db8:	e8 8b 21 00 00       	call   2f48 <exit>$/;"	l
dba	sh.asm	/^     dba:	29 c1                	sub    %eax,%ecx$/;"	l
dbc	sh.asm	/^     dbc:	89 c8                	mov    %ecx,%eax$/;"	l
dbd	usertests.asm	/^     dbd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
dbe	sh.asm	/^     dbe:	5d                   	pop    %ebp$/;"	l
dbf	sh.asm	/^     dbf:	c3                   	ret    $/;"	l
dc	echo.asm	/^  dc:	0f b6 d0             	movzbl %al,%edx$/;"	l
dc	hello.asm	/^  dc:	89 04 24             	mov    %eax,(%esp)$/;"	l
dc	kill.asm	/^  dc:	89 d1                	mov    %edx,%ecx$/;"	l
dc	ln.asm	/^  dc:	74 10                	je     ee <strcmp+0x27>$/;"	l
dc	mkdir.asm	/^  dc:	74 10                	je     ee <strcmp+0x27>$/;"	l
dc	rm.asm	/^  dc:	74 10                	je     ee <strcmp+0x27>$/;"	l
dc	zombie.asm	/^  dc:	89 04 24             	mov    %eax,(%esp)$/;"	l
dc0	sh.asm	/^     dc0:	55                   	push   %ebp$/;"	l
dc1	sh.asm	/^     dc1:	89 e5                	mov    %esp,%ebp$/;"	l
dc1	usertests.asm	/^     dc1:	74 09                	je     dcc <twofiles+0xb9>$/;"	l
dc3	sh.asm	/^     dc3:	83 ec 10             	sub    $0x10,%esp$/;"	l
dc3	usertests.asm	/^     dc3:	c7 45 d0 70 00 00 00 	movl   $0x70,-0x30(%ebp)$/;"	l
dc6	sh.asm	/^     dc6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
dca	usertests.asm	/^     dca:	eb 07                	jmp    dd3 <twofiles+0xc0>$/;"	l
dcc	usertests.asm	/^     dcc:	c7 45 d0 63 00 00 00 	movl   $0x63,-0x30(%ebp)$/;"	l
dcd	sh.asm	/^     dcd:	eb 04                	jmp    dd3 <strlen+0x13>$/;"	l
dcf	sh.asm	/^     dcf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
dd	grep.asm	/^  dd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dd	usertests.asm	/^      dd:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)$/;"	l
dd	wc.asm	/^  dd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dd3	sh.asm	/^     dd3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
dd3	usertests.asm	/^     dd3:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)$/;"	l
dd6	sh.asm	/^     dd6:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
dd9	sh.asm	/^     dd9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dda	usertests.asm	/^     dda:	00 $/;"	l
ddb	usertests.asm	/^     ddb:	8b 45 d0             	mov    -0x30(%ebp),%eax$/;"	l
ddc	sh.asm	/^     ddc:	84 c0                	test   %al,%al$/;"	l
dde	sh.asm	/^     dde:	75 ef                	jne    dcf <strlen+0xf>$/;"	l
dde	usertests.asm	/^     dde:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
de	cat.asm	/^  de:	00 $/;"	l
de	forktest.asm	/^  de:	e8 9d 02 00 00       	call   380 <exit>$/;"	l
de	kill.asm	/^  de:	29 c1                	sub    %eax,%ecx$/;"	l
de	ln.asm	/^  de:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
de	ls.asm	/^  de:	79 20                	jns    100 <ls+0x48>$/;"	l
de	mkdir.asm	/^  de:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
de	rm.asm	/^  de:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
de	sh.asm	/^      de:	c7 44 24 04 44 15 00 	movl   $0x1544,0x4(%esp)$/;"	l
de0	sh.asm	/^     de0:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
de2	usertests.asm	/^     de2:	c7 04 24 c0 47 00 00 	movl   $0x47c0,(%esp)$/;"	l
de3	sh.asm	/^     de3:	c9                   	leave  $/;"	l
de4	sh.asm	/^     de4:	c3                   	ret    $/;"	l
de5	sh.asm	/^     de5:	55                   	push   %ebp$/;"	l
de6	sh.asm	/^     de6:	89 e5                	mov    %esp,%ebp$/;"	l
de8	sh.asm	/^     de8:	83 ec 18             	sub    $0x18,%esp$/;"	l
de9	usertests.asm	/^     de9:	e8 87 1f 00 00       	call   2d75 <memset>$/;"	l
deb	sh.asm	/^     deb:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
dee	sh.asm	/^     dee:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
dee	usertests.asm	/^     dee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	fsvar.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	stat.h	/^  int dev;     \/\/ Device number$/;"	m	struct:stat
devsw	dev.h	/^struct devsw {$/;"	s
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	cat.asm	/^  df:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
df	echo.asm	/^  df:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
df	hello.asm	/^  df:	e8 05 00 00 00       	call   e9 <stosb>$/;"	l
df	init.asm	/^  df:	c7 44 24 04 2d 09 00 	movl   $0x92d,0x4(%esp)$/;"	l
df	zombie.asm	/^  df:	e8 05 00 00 00       	call   e9 <stosb>$/;"	l
df2	sh.asm	/^     df2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
df5	sh.asm	/^     df5:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
df5	usertests.asm	/^     df5:	eb 4b                	jmp    e42 <twofiles+0x12f>$/;"	l
df7	usertests.asm	/^     df7:	c7 44 24 08 f4 01 00 	movl   $0x1f4,0x8(%esp)$/;"	l
df9	sh.asm	/^     df9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dfc	sh.asm	/^     dfc:	89 04 24             	mov    %eax,(%esp)$/;"	l
dfe	usertests.asm	/^     dfe:	00 $/;"	l
dff	sh.asm	/^     dff:	e8 05 00 00 00       	call   e09 <stosb>$/;"	l
dff	usertests.asm	/^     dff:	c7 44 24 04 c0 47 00 	movl   $0x47c0,0x4(%esp)$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dir	kernel.asm	/^	dir = (page_dir_t *) kalloc(sizeof(page_dir_t));	$/;"	d
dir	proc.h	/^  struct page_dir *dir;		   \/\/ Page directory$/;"	m	struct:cpu	typeref:struct:cpu::page_dir
dir	proc.h	/^  struct page_dir *dir;	   	   \/\/ Page directory physical address$/;"	m	struct:proc	typeref:struct:proc::page_dir
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirs	page.h	/^	uint dirs[1024];		\/\/ the array of directory entries$/;"	m	struct:page_dir
dirtest	usertests.c	/^void dirtest(void)$/;"	f
dirty	page.h	/^	unsigned int dirty	 : 1;$/;"	m	struct:page
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	args.asm	/^  dst = vdst;$/;"	d
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	hello.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	args.asm	/^   e:	83 ec 24             	sub    $0x24,%esp$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon3	file:
e	echo.asm	/^   e:	83 ec 34             	sub    $0x34,%esp$/;"	l
e	hello.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	init.asm	/^   e:	83 ec 24             	sub    $0x24,%esp$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	kill.asm	/^   e:	83 ec 24             	sub    $0x24,%esp$/;"	l
e	ln.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	mkdir.asm	/^   e:	83 ec 24             	sub    $0x24,%esp$/;"	l
e	rm.asm	/^   e:	83 ec 24             	sub    $0x24,%esp$/;"	l
e	zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	grep.asm	/^  e0:	05 e0 0b 00 00       	add    $0xbe0,%eax$/;"	l
e0	kill.asm	/^  e0:	89 c8                	mov    %ecx,%eax$/;"	l
e0	ls.asm	/^  e0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e0	wc.asm	/^  e0:	89 44 24 0c          	mov    %eax,0xc(%esp)$/;"	l
e04	sh.asm	/^     e04:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e06	usertests.asm	/^     e06:	00 $/;"	l
e07	sh.asm	/^     e07:	c9                   	leave  $/;"	l
e07	usertests.asm	/^     e07:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e08	sh.asm	/^     e08:	c3                   	ret    $/;"	l
e09	sh.asm	/^     e09:	55                   	push   %ebp$/;"	l
e0a	sh.asm	/^     e0a:	89 e5                	mov    %esp,%ebp$/;"	l
e0a	usertests.asm	/^     e0a:	89 04 24             	mov    %eax,(%esp)$/;"	l
e0c	sh.asm	/^     e0c:	57                   	push   %edi$/;"	l
e0d	sh.asm	/^     e0d:	53                   	push   %ebx$/;"	l
e0d	usertests.asm	/^     e0d:	e8 56 21 00 00       	call   2f68 <write>$/;"	l
e0e	sh.asm	/^     e0e:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e1	args.asm	/^  e1:	eb 04                	jmp    e7 <strlen+0x13>$/;"	l
e1	ln.asm	/^  e1:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e1	mkdir.asm	/^  e1:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e1	rm.asm	/^  e1:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e1	usertests.asm	/^      e1:	78 21                	js     104 <writetest+0x59>$/;"	l
e11	sh.asm	/^     e11:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
e12	usertests.asm	/^     e12:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e14	sh.asm	/^     e14:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
e15	usertests.asm	/^     e15:	81 7d f4 f4 01 00 00 	cmpl   $0x1f4,-0xc(%ebp)$/;"	l
e17	sh.asm	/^     e17:	89 c7                	mov    %eax,%edi$/;"	l
e19	sh.asm	/^     e19:	89 d1                	mov    %edx,%ecx$/;"	l
e1b	sh.asm	/^     e1b:	89 d8                	mov    %ebx,%eax$/;"	l
e1c	usertests.asm	/^     e1c:	74 20                	je     e3e <twofiles+0x12b>$/;"	l
e1d	sh.asm	/^     e1d:	fc                   	cld    $/;"	l
e1e	sh.asm	/^     e1e:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e1e	usertests.asm	/^     e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e2	echo.asm	/^  e2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e2	kill.asm	/^  e2:	5d                   	pop    %ebp$/;"	l
e20	sh.asm	/^     e20:	89 7d 08             	mov    %edi,0x8(%ebp)$/;"	l
e21	usertests.asm	/^     e21:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e23	sh.asm	/^     e23:	89 4d 10             	mov    %ecx,0x10(%ebp)$/;"	l
e25	usertests.asm	/^     e25:	c7 44 24 04 b1 39 00 	movl   $0x39b1,0x4(%esp)$/;"	l
e26	sh.asm	/^     e26:	5b                   	pop    %ebx$/;"	l
e27	sh.asm	/^     e27:	5f                   	pop    %edi$/;"	l
e28	sh.asm	/^     e28:	5d                   	pop    %ebp$/;"	l
e29	sh.asm	/^     e29:	c3                   	ret    $/;"	l
e2a	sh.asm	/^     e2a:	55                   	push   %ebp$/;"	l
e2b	sh.asm	/^     e2b:	89 e5                	mov    %esp,%ebp$/;"	l
e2c	usertests.asm	/^     e2c:	00 $/;"	l
e2d	sh.asm	/^     e2d:	83 ec 08             	sub    $0x8,%esp$/;"	l
e2d	usertests.asm	/^     e2d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e3	args.asm	/^  e3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
e3	forktest.asm	/^  e3:	c7 44 24 04 6d 04 00 	movl   $0x46d,0x4(%esp)$/;"	l
e3	kill.asm	/^  e3:	c3                   	ret    $/;"	l
e3	ls.asm	/^  e3:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e3	usertests.asm	/^      e3:	a1 74 47 00 00       	mov    0x4774,%eax$/;"	l
e30	sh.asm	/^     e30:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e33	sh.asm	/^     e33:	88 45 fc             	mov    %al,-0x4(%ebp)$/;"	l
e34	usertests.asm	/^     e34:	e8 88 22 00 00       	call   30c1 <printf>$/;"	l
e36	sh.asm	/^     e36:	eb 17                	jmp    e4f <strchr+0x25>$/;"	l
e38	sh.asm	/^     e38:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e39	usertests.asm	/^     e39:	e8 0a 21 00 00       	call   2f48 <exit>$/;"	l
e3b	sh.asm	/^     e3b:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e3e	sh.asm	/^     e3e:	3a 45 fc             	cmp    -0x4(%ebp),%al$/;"	l
e3e	usertests.asm	/^     e3e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)$/;"	l
e4	hello.asm	/^  e4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e4	kill.asm	/^  e4:	55                   	push   %ebp$/;"	l
e4	ln.asm	/^  e4:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e4	mkdir.asm	/^  e4:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e4	rm.asm	/^  e4:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e4	wc.asm	/^  e4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e4	zombie.asm	/^  e4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e41	sh.asm	/^     e41:	75 08                	jne    e4b <strchr+0x21>$/;"	l
e42	usertests.asm	/^     e42:	83 7d ec 0b          	cmpl   $0xb,-0x14(%ebp)$/;"	l
e43	sh.asm	/^     e43:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e46	sh.asm	/^     e46:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
e46	usertests.asm	/^     e46:	7e af                	jle    df7 <twofiles+0xe4>$/;"	l
e48	usertests.asm	/^     e48:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
e49	sh.asm	/^     e49:	eb 15                	jmp    e60 <strchr+0x36>$/;"	l
e4b	sh.asm	/^     e4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
e4b	usertests.asm	/^     e4b:	89 04 24             	mov    %eax,(%esp)$/;"	l
e4e	usertests.asm	/^     e4e:	e8 1d 21 00 00       	call   2f70 <close>$/;"	l
e4f	sh.asm	/^     e4f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e5	echo.asm	/^  e5:	0f b6 c0             	movzbl %al,%eax$/;"	l
e5	grep.asm	/^  e5:	89 54 24 08          	mov    %edx,0x8(%esp)$/;"	l
e5	kill.asm	/^  e5:	89 e5                	mov    %esp,%ebp$/;"	l
e5	sh.asm	/^      e5:	00 $/;"	l
e52	sh.asm	/^     e52:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e53	usertests.asm	/^     e53:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
e55	sh.asm	/^     e55:	84 c0                	test   %al,%al$/;"	l
e57	sh.asm	/^     e57:	75 df                	jne    e38 <strchr+0xe>$/;"	l
e57	usertests.asm	/^     e57:	74 11                	je     e6a <twofiles+0x157>$/;"	l
e59	sh.asm	/^     e59:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)$/;"	l
e59	usertests.asm	/^     e59:	e8 f2 20 00 00       	call   2f50 <wait>$/;"	l
e5e	usertests.asm	/^     e5e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
e6	cat.asm	/^  e6:	e8 16 04 00 00       	call   501 <printf>$/;"	l
e6	init.asm	/^  e6:	00 $/;"	l
e6	sh.asm	/^      e6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
e60	sh.asm	/^     e60:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e63	sh.asm	/^     e63:	c9                   	leave  $/;"	l
e64	sh.asm	/^     e64:	c3                   	ret    $/;"	l
e65	sh.asm	/^     e65:	55                   	push   %ebp$/;"	l
e65	usertests.asm	/^     e65:	e9 fc 00 00 00       	jmp    f66 <twofiles+0x253>$/;"	l
e66	sh.asm	/^     e66:	89 e5                	mov    %esp,%ebp$/;"	l
e68	sh.asm	/^     e68:	83 ec 28             	sub    $0x28,%esp$/;"	l
e6a	usertests.asm	/^     e6a:	e8 d9 20 00 00       	call   2f48 <exit>$/;"	l
e6b	sh.asm	/^     e6b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)$/;"	l
e6f	usertests.asm	/^     e6f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
e7	args.asm	/^  e7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e7	hello.asm	/^  e7:	c9                   	leave  $/;"	l
e7	init.asm	/^  e7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e7	kill.asm	/^  e7:	83 ec 10             	sub    $0x10,%esp$/;"	l
e7	ln.asm	/^  e7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e7	ls.asm	/^  e7:	c7 44 24 04 4a 0b 00 	movl   $0xb4a,0x4(%esp)$/;"	l
e7	mkdir.asm	/^  e7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e7	rm.asm	/^  e7:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e7	wc.asm	/^  e7:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
e7	zombie.asm	/^  e7:	c9                   	leave  $/;"	l
e72	sh.asm	/^     e72:	eb 46                	jmp    eba <gets+0x55>$/;"	l
e73	usertests.asm	/^     e73:	74 09                	je     e7e <twofiles+0x16b>$/;"	l
e74	sh.asm	/^     e74:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
e75	usertests.asm	/^     e75:	c7 45 d4 9c 39 00 00 	movl   $0x399c,-0x2c(%ebp)$/;"	l
e7b	sh.asm	/^     e7b:	00 $/;"	l
e7c	sh.asm	/^     e7c:	8d 45 f7             	lea    -0x9(%ebp),%eax$/;"	l
e7c	usertests.asm	/^     e7c:	eb 07                	jmp    e85 <twofiles+0x172>$/;"	l
e7e	usertests.asm	/^     e7e:	c7 45 d4 9f 39 00 00 	movl   $0x399f,-0x2c(%ebp)$/;"	l
e7f	sh.asm	/^     e7f:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e8	echo.asm	/^  e8:	89 d1                	mov    %edx,%ecx$/;"	l
e8	hello.asm	/^  e8:	c3                   	ret    $/;"	l
e8	usertests.asm	/^      e8:	c7 44 24 04 34 35 00 	movl   $0x3534,0x4(%esp)$/;"	l
e8	zombie.asm	/^  e8:	c3                   	ret    $/;"	l
e83	sh.asm	/^     e83:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)$/;"	l
e85	usertests.asm	/^     e85:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
e8a	sh.asm	/^     e8a:	e8 41 01 00 00       	call   fd0 <read>$/;"	l
e8c	usertests.asm	/^     e8c:	00 $/;"	l
e8d	usertests.asm	/^     e8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax$/;"	l
e8f	sh.asm	/^     e8f:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e9	grep.asm	/^  e9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
e9	hello.asm	/^  e9:	55                   	push   %ebp$/;"	l
e9	zombie.asm	/^  e9:	55                   	push   %ebp$/;"	l
e90	usertests.asm	/^     e90:	89 04 24             	mov    %eax,(%esp)$/;"	l
e92	sh.asm	/^     e92:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)$/;"	l
e93	usertests.asm	/^     e93:	e8 f0 20 00 00       	call   2f88 <open>$/;"	l
e96	sh.asm	/^     e96:	7e 2d                	jle    ec5 <gets+0x60>$/;"	l
e98	sh.asm	/^     e98:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e98	usertests.asm	/^     e98:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
e9b	sh.asm	/^     e9b:	89 c2                	mov    %eax,%edx$/;"	l
e9b	usertests.asm	/^     e9b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)$/;"	l
e9d	sh.asm	/^     e9d:	03 55 08             	add    0x8(%ebp),%edx$/;"	l
ea	args.asm	/^  ea:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
ea	echo.asm	/^  ea:	29 c1                	sub    %eax,%ecx$/;"	l
ea	forktest.asm	/^  ea:	00 $/;"	l
ea	hello.asm	/^  ea:	89 e5                	mov    %esp,%ebp$/;"	l
ea	kill.asm	/^  ea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
ea	ln.asm	/^  ea:	38 c2                	cmp    %al,%dl$/;"	l
ea	mkdir.asm	/^  ea:	38 c2                	cmp    %al,%dl$/;"	l
ea	rm.asm	/^  ea:	38 c2                	cmp    %al,%dl$/;"	l
ea	zombie.asm	/^  ea:	89 e5                	mov    %esp,%ebp$/;"	l
ea0	sh.asm	/^     ea0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax$/;"	l
ea2	usertests.asm	/^     ea2:	eb 62                	jmp    f06 <twofiles+0x1f3>$/;"	l
ea4	sh.asm	/^     ea4:	88 02                	mov    %al,(%edx)$/;"	l
ea4	usertests.asm	/^     ea4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
ea6	sh.asm	/^     ea6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)$/;"	l
eaa	sh.asm	/^     eaa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax$/;"	l
eab	usertests.asm	/^     eab:	eb 4b                	jmp    ef8 <twofiles+0x1e5>$/;"	l
ead	usertests.asm	/^     ead:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
eae	sh.asm	/^     eae:	3c 0a                	cmp    $0xa,%al$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	cat.asm	/^  eb:	e8 98 02 00 00       	call   388 <exit>$/;"	l
eb	forktest.asm	/^  eb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
eb	wc.asm	/^  eb:	c7 44 24 04 b8 09 00 	movl   $0x9b8,0x4(%esp)$/;"	l
eb0	sh.asm	/^     eb0:	74 13                	je     ec5 <gets+0x60>$/;"	l
eb0	usertests.asm	/^     eb0:	0f b6 80 c0 47 00 00 	movzbl 0x47c0(%eax),%eax$/;"	l
eb2	sh.asm	/^     eb2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax$/;"	l
eb6	sh.asm	/^     eb6:	3c 0d                	cmp    $0xd,%al$/;"	l
eb7	usertests.asm	/^     eb7:	0f be c0             	movsbl %al,%eax$/;"	l
eb8	sh.asm	/^     eb8:	74 0b                	je     ec5 <gets+0x60>$/;"	l
eba	sh.asm	/^     eba:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
eba	usertests.asm	/^     eba:	89 45 d8             	mov    %eax,-0x28(%ebp)$/;"	l
ebd	sh.asm	/^     ebd:	83 c0 01             	add    $0x1,%eax$/;"	l
ebd	usertests.asm	/^     ebd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	echo.asm	/^  ec:	89 c8                	mov    %ecx,%eax$/;"	l
ec	hello.asm	/^  ec:	57                   	push   %edi$/;"	l
ec	ln.asm	/^  ec:	74 de                	je     cc <strcmp+0x5>$/;"	l
ec	mkdir.asm	/^  ec:	74 de                	je     cc <strcmp+0x5>$/;"	l
ec	rm.asm	/^  ec:	74 de                	je     cc <strcmp+0x5>$/;"	l
ec	zombie.asm	/^  ec:	57                   	push   %edi$/;"	l
ec0	sh.asm	/^     ec0:	3b 45 0c             	cmp    0xc(%ebp),%eax$/;"	l
ec1	usertests.asm	/^     ec1:	74 09                	je     ecc <twofiles+0x1b9>$/;"	l
ec3	sh.asm	/^     ec3:	7c af                	jl     e74 <gets+0xf>$/;"	l
ec3	usertests.asm	/^     ec3:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%ebp)$/;"	l
ec5	sh.asm	/^     ec5:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
ec8	sh.asm	/^     ec8:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
eca	usertests.asm	/^     eca:	eb 07                	jmp    ed3 <twofiles+0x1c0>$/;"	l
ecb	sh.asm	/^     ecb:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
ecc	usertests.asm	/^     ecc:	c7 45 dc 63 00 00 00 	movl   $0x63,-0x24(%ebp)$/;"	l
ece	sh.asm	/^     ece:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	args.asm	/^  ed:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ed	grep.asm	/^  ed:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ed	hello.asm	/^  ed:	53                   	push   %ebx$/;"	l
ed	sh.asm	/^      ed:	e8 3f 10 00 00       	call   1131 <printf>$/;"	l
ed	zombie.asm	/^  ed:	53                   	push   %ebx$/;"	l
ed1	sh.asm	/^     ed1:	c9                   	leave  $/;"	l
ed2	sh.asm	/^     ed2:	c3                   	ret    $/;"	l
ed3	sh.asm	/^     ed3:	55                   	push   %ebp$/;"	l
ed3	usertests.asm	/^     ed3:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
ed4	sh.asm	/^     ed4:	89 e5                	mov    %esp,%ebp$/;"	l
ed6	sh.asm	/^     ed6:	83 ec 28             	sub    $0x28,%esp$/;"	l
ed6	usertests.asm	/^     ed6:	39 45 d8             	cmp    %eax,-0x28(%ebp)$/;"	l
ed9	sh.asm	/^     ed9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
ed9	usertests.asm	/^     ed9:	74 19                	je     ef4 <twofiles+0x1e1>$/;"	l
edb	usertests.asm	/^     edb:	c7 44 24 04 c2 39 00 	movl   $0x39c2,0x4(%esp)$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	echo.asm	/^  ee:	5d                   	pop    %ebp$/;"	l
ee	hello.asm	/^  ee:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee	init.asm	/^  ee:	e8 06 04 00 00       	call   4f9 <printf>$/;"	l
ee	ln.asm	/^  ee:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee	ls.asm	/^  ee:	00 $/;"	l
ee	mkdir.asm	/^  ee:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee	rm.asm	/^  ee:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee	zombie.asm	/^  ee:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee0	sh.asm	/^     ee0:	00 $/;"	l
ee1	sh.asm	/^     ee1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee2	usertests.asm	/^     ee2:	00 $/;"	l
ee3	usertests.asm	/^     ee3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
ee4	sh.asm	/^     ee4:	89 04 24             	mov    %eax,(%esp)$/;"	l
ee7	sh.asm	/^     ee7:	e8 0c 01 00 00       	call   ff8 <open>$/;"	l
eea	usertests.asm	/^     eea:	e8 d2 21 00 00       	call   30c1 <printf>$/;"	l
eec	sh.asm	/^     eec:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
eef	sh.asm	/^     eef:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)$/;"	l
eef	usertests.asm	/^     eef:	e8 54 20 00 00       	call   2f48 <exit>$/;"	l
ef	echo.asm	/^  ef:	c3                   	ret    $/;"	l
ef	ls.asm	/^  ef:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
ef	usertests.asm	/^      ef:	00 $/;"	l
ef3	sh.asm	/^     ef3:	79 09                	jns    efe <stat+0x2b>$/;"	l
ef4	usertests.asm	/^     ef4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
ef5	sh.asm	/^     ef5:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)$/;"	l
ef8	usertests.asm	/^     ef8:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
efb	usertests.asm	/^     efb:	3b 45 f4             	cmp    -0xc(%ebp),%eax$/;"	l
efc	sh.asm	/^     efc:	eb 26                	jmp    f24 <stat+0x51>$/;"	l
efe	sh.asm	/^     efe:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
efe	usertests.asm	/^     efe:	7c ad                	jl     ead <twofiles+0x19a>$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
enable_page	page.c	/^void enable_page(page_dir_t *dir) $/;"	f
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry & 0xFFFFFF);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
ep	kernel.asm	/^  ep = p->mem + p->sz;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
eva	bootblock.asm	/^  eva = va + count;$/;"	d
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
extern	kernel.asm	/^extern void forkret(void);$/;"	l
extern	kernel.asm	/^extern void trapret(void);$/;"	l
f	bootother.asm	/^   f:	20 c0                	and    %al,%al$/;"	l
f	cat.asm	/^   f:	c7 44 24 04 60 09 00 	movl   $0x960,0x4(%esp)$/;"	l
f	sh.asm	/^       f:	c7 44 24 04 20 15 00 	movl   $0x1520,0x4(%esp)$/;"	l
f0	args.asm	/^  f0:	84 c0                	test   %al,%al$/;"	l
f0	cat.asm	/^  f0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f0	echo.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	grep.asm	/^  f0:	89 04 24             	mov    %eax,(%esp)$/;"	l
f0	usertests.asm	/^      f0:	89 04 24             	mov    %eax,(%esp)$/;"	l
f00	usertests.asm	/^     f00:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f01	sh.asm	/^     f01:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f03	usertests.asm	/^     f03:	01 45 f8             	add    %eax,-0x8(%ebp)$/;"	l
f05	sh.asm	/^     f05:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f06	usertests.asm	/^     f06:	c7 44 24 08 00 08 00 	movl   $0x800,0x8(%esp)$/;"	l
f08	sh.asm	/^     f08:	89 04 24             	mov    %eax,(%esp)$/;"	l
f0b	sh.asm	/^     f0b:	e8 00 01 00 00       	call   1010 <fstat>$/;"	l
f0d	usertests.asm	/^     f0d:	00 $/;"	l
f0e	usertests.asm	/^     f0e:	c7 44 24 04 c0 47 00 	movl   $0x47c0,0x4(%esp)$/;"	l
f1	echo.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	hello.asm	/^  f1:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
f1	kill.asm	/^  f1:	eb 04                	jmp    f7 <strlen+0x13>$/;"	l
f1	ln.asm	/^  f1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f1	mkdir.asm	/^  f1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f1	rm.asm	/^  f1:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f1	zombie.asm	/^  f1:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
f10	sh.asm	/^     f10:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f13	sh.asm	/^     f13:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f15	usertests.asm	/^     f15:	00 $/;"	l
f16	sh.asm	/^     f16:	89 04 24             	mov    %eax,(%esp)$/;"	l
f16	usertests.asm	/^     f16:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
f19	sh.asm	/^     f19:	e8 c2 00 00 00       	call   fe0 <close>$/;"	l
f19	usertests.asm	/^     f19:	89 04 24             	mov    %eax,(%esp)$/;"	l
f1c	usertests.asm	/^     f1c:	e8 3f 20 00 00       	call   2f60 <read>$/;"	l
f1e	sh.asm	/^     f1e:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f2	args.asm	/^  f2:	75 ef                	jne    e3 <strlen+0xf>$/;"	l
f2	forktest.asm	/^  f2:	e8 09 ff ff ff       	call   0 <printf>$/;"	l
f2	sh.asm	/^      f2:	e8 c1 0e 00 00       	call   fb8 <exit>$/;"	l
f2	wc.asm	/^  f2:	00 $/;"	l
f21	sh.asm	/^     f21:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
f21	usertests.asm	/^     f21:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
f24	sh.asm	/^     f24:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f24	usertests.asm	/^     f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
f27	sh.asm	/^     f27:	c9                   	leave  $/;"	l
f28	sh.asm	/^     f28:	c3                   	ret    $/;"	l
f28	usertests.asm	/^     f28:	0f 8f 76 ff ff ff    	jg     ea4 <twofiles+0x191>$/;"	l
f29	sh.asm	/^     f29:	55                   	push   %ebp$/;"	l
f2a	sh.asm	/^     f2a:	89 e5                	mov    %esp,%ebp$/;"	l
f2c	sh.asm	/^     f2c:	83 ec 10             	sub    $0x10,%esp$/;"	l
f2e	usertests.asm	/^     f2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
f2f	sh.asm	/^     f2f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
f3	cat.asm	/^  f3:	89 04 24             	mov    %eax,(%esp)$/;"	l
f3	echo.asm	/^  f3:	83 ec 10             	sub    $0x10,%esp$/;"	l
f3	grep.asm	/^  f3:	e8 08 05 00 00       	call   600 <read>$/;"	l
f3	init.asm	/^  f3:	e8 90 02 00 00       	call   388 <wait>$/;"	l
f3	kill.asm	/^  f3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
f3	usertests.asm	/^      f3:	e8 c9 2f 00 00       	call   30c1 <printf>$/;"	l
f3	wc.asm	/^  f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f31	usertests.asm	/^     f31:	89 04 24             	mov    %eax,(%esp)$/;"	l
f34	usertests.asm	/^     f34:	e8 37 20 00 00       	call   2f70 <close>$/;"	l
f36	sh.asm	/^     f36:	eb 24                	jmp    f5c <atoi+0x33>$/;"	l
f38	sh.asm	/^     f38:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
f39	usertests.asm	/^     f39:	81 7d f8 70 17 00 00 	cmpl   $0x1770,-0x8(%ebp)$/;"	l
f3b	sh.asm	/^     f3b:	89 d0                	mov    %edx,%eax$/;"	l
f3d	sh.asm	/^     f3d:	c1 e0 02             	shl    $0x2,%eax$/;"	l
f4	args.asm	/^  f4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f4	hello.asm	/^  f4:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f4	ln.asm	/^  f4:	0f b6 d0             	movzbl %al,%edx$/;"	l
f4	mkdir.asm	/^  f4:	0f b6 d0             	movzbl %al,%edx$/;"	l
f4	rm.asm	/^  f4:	0f b6 d0             	movzbl %al,%edx$/;"	l
f4	zombie.asm	/^  f4:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f40	sh.asm	/^     f40:	01 d0                	add    %edx,%eax$/;"	l
f40	usertests.asm	/^     f40:	74 20                	je     f62 <twofiles+0x24f>$/;"	l
f42	sh.asm	/^     f42:	01 c0                	add    %eax,%eax$/;"	l
f42	usertests.asm	/^     f42:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f44	sh.asm	/^     f44:	89 c2                	mov    %eax,%edx$/;"	l
f45	usertests.asm	/^     f45:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
f46	sh.asm	/^     f46:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f49	sh.asm	/^     f49:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f49	usertests.asm	/^     f49:	c7 44 24 04 ce 39 00 	movl   $0x39ce,0x4(%esp)$/;"	l
f4c	sh.asm	/^     f4c:	0f be c0             	movsbl %al,%eax$/;"	l
f4f	sh.asm	/^     f4f:	8d 04 02             	lea    (%edx,%eax,1),%eax$/;"	l
f50	usertests.asm	/^     f50:	00 $/;"	l
f51	usertests.asm	/^     f51:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f52	sh.asm	/^     f52:	83 e8 30             	sub    $0x30,%eax$/;"	l
f55	sh.asm	/^     f55:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f58	sh.asm	/^     f58:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
f58	usertests.asm	/^     f58:	e8 64 21 00 00       	call   30c1 <printf>$/;"	l
f5c	sh.asm	/^     f5c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f5d	usertests.asm	/^     f5d:	e8 e6 1f 00 00       	call   2f48 <exit>$/;"	l
f5f	sh.asm	/^     f5f:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f6	cat.asm	/^  f6:	e8 05 ff ff ff       	call   0 <cat>$/;"	l
f6	echo.asm	/^  f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
f6	ls.asm	/^  f6:	e8 62 06 00 00       	call   75d <printf>$/;"	l
f62	sh.asm	/^     f62:	3c 2f                	cmp    $0x2f,%al$/;"	l
f62	usertests.asm	/^     f62:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)$/;"	l
f64	sh.asm	/^     f64:	7e 0a                	jle    f70 <atoi+0x47>$/;"	l
f66	sh.asm	/^     f66:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f66	usertests.asm	/^     f66:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)$/;"	l
f69	sh.asm	/^     f69:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f6a	usertests.asm	/^     f6a:	0f 8e ff fe ff ff    	jle    e6f <twofiles+0x15c>$/;"	l
f6c	sh.asm	/^     f6c:	3c 39                	cmp    $0x39,%al$/;"	l
f6e	sh.asm	/^     f6e:	7e c8                	jle    f38 <atoi+0xf>$/;"	l
f7	args.asm	/^  f7:	c9                   	leave  $/;"	l
f7	forktest.asm	/^  f7:	c9                   	leave  $/;"	l
f7	hello.asm	/^  f7:	89 c7                	mov    %eax,%edi$/;"	l
f7	kill.asm	/^  f7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f7	ln.asm	/^  f7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f7	mkdir.asm	/^  f7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f7	rm.asm	/^  f7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f7	sh.asm	/^      f7:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f7	zombie.asm	/^  f7:	89 c7                	mov    %eax,%edi$/;"	l
f70	sh.asm	/^     f70:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f70	usertests.asm	/^     f70:	c7 04 24 9c 39 00 00 	movl   $0x399c,(%esp)$/;"	l
f73	sh.asm	/^     f73:	c9                   	leave  $/;"	l
f74	sh.asm	/^     f74:	c3                   	ret    $/;"	l
f75	sh.asm	/^     f75:	55                   	push   %ebp$/;"	l
f76	sh.asm	/^     f76:	89 e5                	mov    %esp,%ebp$/;"	l
f77	usertests.asm	/^     f77:	e8 1c 20 00 00       	call   2f98 <unlink>$/;"	l
f78	sh.asm	/^     f78:	83 ec 10             	sub    $0x10,%esp$/;"	l
f7b	sh.asm	/^     f7b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f7c	usertests.asm	/^     f7c:	c7 04 24 9f 39 00 00 	movl   $0x399f,(%esp)$/;"	l
f7e	sh.asm	/^     f7e:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
f8	args.asm	/^  f8:	c3                   	ret    $/;"	l
f8	forktest.asm	/^  f8:	c3                   	ret    $/;"	l
f8	grep.asm	/^  f8:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f8	init.asm	/^  f8:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
f8	usertests.asm	/^      f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
f81	sh.asm	/^     f81:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f83	usertests.asm	/^     f83:	e8 10 20 00 00       	call   2f98 <unlink>$/;"	l
f84	sh.asm	/^     f84:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
f87	sh.asm	/^     f87:	eb 13                	jmp    f9c <memmove+0x27>$/;"	l
f88	usertests.asm	/^     f88:	c7 44 24 04 df 39 00 	movl   $0x39df,0x4(%esp)$/;"	l
f89	sh.asm	/^     f89:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
f8c	sh.asm	/^     f8c:	0f b6 10             	movzbl (%eax),%edx$/;"	l
f8f	sh.asm	/^     f8f:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
f8f	usertests.asm	/^     f8f:	00 $/;"	l
f9	args.asm	/^  f9:	55                   	push   %ebp$/;"	l
f9	forktest.asm	/^  f9:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
f9	hello.asm	/^  f9:	89 d1                	mov    %edx,%ecx$/;"	l
f9	zombie.asm	/^  f9:	89 d1                	mov    %edx,%ecx$/;"	l
f90	usertests.asm	/^     f90:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f92	sh.asm	/^     f92:	88 10                	mov    %dl,(%eax)$/;"	l
f94	sh.asm	/^     f94:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)$/;"	l
f97	usertests.asm	/^     f97:	e8 25 21 00 00       	call   30c1 <printf>$/;"	l
f98	sh.asm	/^     f98:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
f9c	sh.asm	/^     f9c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)$/;"	l
f9c	usertests.asm	/^     f9c:	c9                   	leave  $/;"	l
f9d	usertests.asm	/^     f9d:	c3                   	ret    $/;"	l
f9e	usertests.asm	/^     f9e:	55                   	push   %ebp$/;"	l
f9f	usertests.asm	/^     f9f:	89 e5                	mov    %esp,%ebp$/;"	l
fa	args.asm	/^  fa:	89 e5                	mov    %esp,%ebp$/;"	l
fa	kill.asm	/^  fa:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
fa	ln.asm	/^  fa:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fa	mkdir.asm	/^  fa:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fa	rm.asm	/^  fa:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fa	sh.asm	/^      fa:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fa	wc.asm	/^  fa:	e8 b6 04 00 00       	call   5b5 <printf>$/;"	l
fa0	sh.asm	/^     fa0:	0f 9f c0             	setg   %al$/;"	l
fa1	usertests.asm	/^     fa1:	83 ec 48             	sub    $0x48,%esp$/;"	l
fa3	sh.asm	/^     fa3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)$/;"	l
fa4	usertests.asm	/^     fa4:	c7 44 24 04 ec 39 00 	movl   $0x39ec,0x4(%esp)$/;"	l
fa7	sh.asm	/^     fa7:	84 c0                	test   %al,%al$/;"	l
fa9	sh.asm	/^     fa9:	75 de                	jne    f89 <memmove+0x14>$/;"	l
fab	sh.asm	/^     fab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fab	usertests.asm	/^     fab:	00 $/;"	l
fac	usertests.asm	/^     fac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fae	sh.asm	/^     fae:	c9                   	leave  $/;"	l
faf	sh.asm	/^     faf:	c3                   	ret    $/;"	l
fb	cat.asm	/^  fb:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fb	grep.asm	/^  fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
fb	hello.asm	/^  fb:	89 d8                	mov    %ebx,%eax$/;"	l
fb	init.asm	/^  fb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)$/;"	l
fb	ls.asm	/^  fb:	e9 0d 02 00 00       	jmp    30d <ls+0x255>$/;"	l
fb	zombie.asm	/^  fb:	89 d8                	mov    %ebx,%eax$/;"	l
fb0	sh.asm	/^     fb0:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
fb3	usertests.asm	/^     fb3:	e8 09 21 00 00       	call   30c1 <printf>$/;"	l
fb5	sh.asm	/^     fb5:	cd 40                	int    $0x40$/;"	l
fb7	sh.asm	/^     fb7:	c3                   	ret    $/;"	l
fb8	sh.asm	/^     fb8:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
fb8	usertests.asm	/^     fb8:	e8 83 1f 00 00       	call   2f40 <fork>$/;"	l
fbd	sh.asm	/^     fbd:	cd 40                	int    $0x40$/;"	l
fbd	usertests.asm	/^     fbd:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
fbf	sh.asm	/^     fbf:	c3                   	ret    $/;"	l
fc	args.asm	/^  fc:	83 ec 18             	sub    $0x18,%esp$/;"	l
fc0	sh.asm	/^     fc0:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
fc0	usertests.asm	/^     fc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
fc4	usertests.asm	/^     fc4:	79 19                	jns    fdf <createdelete+0x41>$/;"	l
fc5	sh.asm	/^     fc5:	cd 40                	int    $0x40$/;"	l
fc6	usertests.asm	/^     fc6:	c7 44 24 04 9d 38 00 	movl   $0x389d,0x4(%esp)$/;"	l
fc7	sh.asm	/^     fc7:	c3                   	ret    $/;"	l
fc8	sh.asm	/^     fc8:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
fcd	sh.asm	/^     fcd:	cd 40                	int    $0x40$/;"	l
fcd	usertests.asm	/^     fcd:	00 $/;"	l
fce	usertests.asm	/^     fce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fcf	sh.asm	/^     fcf:	c3                   	ret    $/;"	l
fd	args.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd:	eb 04                	jmp    103 <strlen+0x13>$/;"	l
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	hello.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	hello.asm	/^  fd:	fc                   	cld    $/;"	l
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	0f b6 c0             	movzbl %al,%eax$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd:	0f b6 c0             	movzbl %al,%eax$/;"	l
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd:	0f b6 c0             	movzbl %al,%eax$/;"	l
fd	sh.asm	/^      fd:	89 04 24             	mov    %eax,(%esp)$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	usertests.asm	/^      fd = open(file, 0);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(i?"f1":"f2", 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	fc                   	cld    $/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	sh.asm	/^     fd0:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd5	sh.asm	/^     fd5:	cd 40                	int    $0x40$/;"	l
fd5	usertests.asm	/^     fd5:	e8 e7 20 00 00       	call   30c1 <printf>$/;"	l
fd7	sh.asm	/^     fd7:	c3                   	ret    $/;"	l
fd8	sh.asm	/^     fd8:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
fda	usertests.asm	/^     fda:	e8 69 1f 00 00       	call   2f48 <exit>$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdd	sh.asm	/^     fdd:	cd 40                	int    $0x40$/;"	l
fdf	sh.asm	/^     fdf:	c3                   	ret    $/;"	l
fdf	usertests.asm	/^     fdf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
fe	cat.asm	/^  fe:	89 04 24             	mov    %eax,(%esp)$/;"	l
fe	hello.asm	/^  fe:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
fe	zombie.asm	/^  fe:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
fe0	sh.asm	/^     fe0:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
fe3	usertests.asm	/^     fe3:	74 06                	je     feb <createdelete+0x4d>$/;"	l
fe5	sh.asm	/^     fe5:	cd 40                	int    $0x40$/;"	l
fe5	usertests.asm	/^     fe5:	c6 45 cf 70          	movb   $0x70,-0x31(%ebp)$/;"	l
fe7	sh.asm	/^     fe7:	c3                   	ret    $/;"	l
fe8	sh.asm	/^     fe8:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
fe9	usertests.asm	/^     fe9:	eb 04                	jmp    fef <createdelete+0x51>$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	usertests.asm	/^     feb:	c6 45 cf 63          	movb   $0x63,-0x31(%ebp)$/;"	l
fed	sh.asm	/^     fed:	cd 40                	int    $0x40$/;"	l
fef	sh.asm	/^     fef:	c3                   	ret    $/;"	l
fef	usertests.asm	/^     fef:	0f b6 45 cf          	movzbl -0x31(%ebp),%eax$/;"	l
fetchint	syscall.c	/^fetchint(struct proc *p, uint addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(struct proc *p, uint addr, char **pp)$/;"	f
ff	args.asm	/^  ff:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
ff	echo.asm	/^  ff:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
ff	grep.asm	/^  ff:	0f 8f 0d ff ff ff    	jg     12 <grep+0x12>$/;"	l
ff	init.asm	/^  ff:	0f 88 6c ff ff ff    	js     71 <main+0x71>$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	usertests.asm	/^      ff:	e9 a2 00 00 00       	jmp    1a6 <writetest+0xfb>$/;"	l
ff	wc.asm	/^  ff:	c9                   	leave  $/;"	l
ff0	sh.asm	/^     ff0:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
ff3	usertests.asm	/^     ff3:	88 45 d4             	mov    %al,-0x2c(%ebp)$/;"	l
ff5	sh.asm	/^     ff5:	cd 40                	int    $0x40$/;"	l
ff6	usertests.asm	/^     ff6:	c6 45 d6 00          	movb   $0x0,-0x2a(%ebp)$/;"	l
ff7	sh.asm	/^     ff7:	c3                   	ret    $/;"	l
ff8	sh.asm	/^     ff8:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
ffa	usertests.asm	/^     ffa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)$/;"	l
ffd	sh.asm	/^     ffd:	cd 40                	int    $0x40$/;"	l
fff	sh.asm	/^     fff:	c3                   	ret    $/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon4	typeref:struct:__anon4::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
flags	fsvar.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^  fname = pid ? "f1" : "f2";$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourteen	usertests.c	/^fourteen(void)$/;"	f
frame	page.h	/^	unsigned int frame	 : 20; 	\/\/ Physical address$/;"	m	struct:page
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon7	typeref:struct:__anon7::run	file:
freep	args.asm	/^      freep = prevp;$/;"	d
freep	args.asm	/^  freep = p;$/;"	d
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	hello.asm	/^      freep = prevp;$/;"	d
freep	hello.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kalloc.c	/^static Header *freep;$/;"	v	file:
freep	kernel.asm	/^		freep = 0;$/;"	d
freep	kernel.asm	/^     freep = prevp;$/;"	d
freep	kernel.asm	/^ freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon4
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	bootother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	bootother.S	/^gdtdesc:$/;"	l
get_page	page.c	/^uint get_page(page_dir_t *dir, uint vaddress) $/;"	f
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
header	kalloc.c	/^union header {$/;"	u	file:
header	umalloc.c	/^union header {$/;"	u	file:
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
hp	args.asm	/^  hp = (Header*)p;$/;"	d
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	hello.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kernel.asm	/^ hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	args.asm	/^  i = 0;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	hello.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
i2b	mkfs.c	/^i2b(uint inum)$/;"	f
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon6
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;                    \/\/ Local APIC ID; index into cpus[] below$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fs.c	/^iinit(void)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
init_dir	page.c	/^page_dir_t *init_dir(void) $/;"	f
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
ino	stat.h	/^  uint ino;    \/\/ Inode number on device$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon6	typeref:struct:__anon6::inode	file:
inode	fsvar.h	/^struct inode {$/;"	s
input	console.c	/^} input;$/;"	v	typeref:struct:__anon3
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
int	args.asm	/^int$/;"	l
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	hello.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int allocate_page_for_swap(){$/;"	l
int	kernel.asm	/^int bit_set_or_not(unsigned char *bitmap,int bit){$/;"	l
int	kernel.asm	/^int bitmap_scan(unsigned char *bitmap,int size){$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int readswapblock(int blockid, char *c) {$/;"	l
int	kernel.asm	/^int ticks;$/;"	l
int	kernel.asm	/^int writeswapblock(int blockid, char *c) {$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	fsvar.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	kernel.asm	/^        inum = de->inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
irqmask	kernel.asm	/^  irqmask = mask;$/;"	d
irqmask	picirq.c	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	v	file:
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	kernel.asm	/^  ismp = 1;$/;"	d
ismp	mp.c	/^int ismp;$/;"	v
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(int n)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kernel_dir	kernel.asm	/^	kernel_dir = (page_dir_t *) kalloc(sizeof(page_dir_t));	$/;"	d
kernel_dir	page.h	/^page_dir_t *kernel_dir;$/;"	v
kfree	kalloc.c	/^kfree(char *v, int len)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit	kalloc.c	/^kinit(int len)$/;"	f
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon7
ksegment	proc.c	/^ksegment(void)$/;"	f
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(int c)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kalloc.c	/^  int len; \/\/ bytes$/;"	m	struct:run	file:
len	kernel.asm	/^    len = strlen(argv[i]) + 1;$/;"	d
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	console.c	/^	struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon3	typeref:struct:__anon3::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
lock	swap.c	/^	struct spinlock lock;$/;"	m	struct:swap	typeref:struct:swap::spinlock	file:
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^	int locking;$/;"	m	struct:__anon2	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
loop	kernel.asm	/^ loop:$/;"	l
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	args.c	/^main(int argc, char *argv[])$/;"	f
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	hello.c	/^main(int argc, char *argv[])$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(int memsize)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
major	fsvar.h	/^  short major;$/;"	m	struct:inode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^  mem = 0;$/;"	d
mem	kernel.asm	/^  mem = kalloc(sz);$/;"	d
mem	proc.h	/^  char *mem;                   \/\/ Start of process memory (kernel address)$/;"	m	struct:proc
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsize	bootblock.asm	/^  memsize = memsize & 0x0000FFFF;$/;"	d
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	240;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minor	fsvar.h	/^  short minor;$/;"	m	struct:inode
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
morecore	kalloc.c	/^morecore(uint nu)$/;"	f	file:
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpbcpu	mp.c	/^mpbcpu(void)$/;"	f
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uchar *addr, int len)$/;"	f	file:
n	args.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	args.asm	/^  n = 0;$/;"	d
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	hello.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	hello.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^    n = MAXFILE*BSIZE - off;$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks = 995;$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	args.asm	/^    neg = 1;$/;"	d
neg	args.asm	/^  neg = 0;$/;"	d
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	hello.asm	/^    neg = 1;$/;"	d
neg	hello.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kernel.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
new_pages	page.c	/^uint new_pages(page_dir_t *dir, uint phyaddr, uint vaddr, uint size,$/;"	f
newmem	kernel.asm	/^  newmem = kalloc(proc->sz + n);$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
ninodes	mkfs.c	/^int ninodes = 200;$/;"	v
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	fsvar.h	/^  short nlink;$/;"	m	struct:inode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	args.asm	/^    nu = PAGE;$/;"	d
nu	cat.asm	/^    nu = PAGE;$/;"	d
nu	echo.asm	/^    nu = PAGE;$/;"	d
nu	grep.asm	/^    nu = PAGE;$/;"	d
nu	hello.asm	/^    nu = PAGE;$/;"	d
nu	init.asm	/^    nu = PAGE;$/;"	d
nu	kernel.asm	/^   nu = PAGE;$/;"	d
nu	kill.asm	/^    nu = PAGE;$/;"	d
nu	ln.asm	/^    nu = PAGE;$/;"	d
nu	ls.asm	/^    nu = PAGE;$/;"	d
nu	mkdir.asm	/^    nu = PAGE;$/;"	d
nu	rm.asm	/^    nu = PAGE;$/;"	d
nu	sh.asm	/^    nu = PAGE;$/;"	d
nu	usertests.asm	/^    nu = PAGE;$/;"	d
nu	wc.asm	/^    nu = PAGE;$/;"	d
nu	zombie.asm	/^    nu = PAGE;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = proc->tf->eax;$/;"	d
nunits	args.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	hello.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kernel.asm	/^ nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
offset	elf.h	/^  uint offset;$/;"	m	struct:proghdr
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
opentest	usertests.c	/^opentest(void)$/;"	f
os	args.asm	/^  os = s;$/;"	d
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	hello.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
out	kernel.asm	/^ out:$/;"	l
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	args.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	hello.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^		p = get_page(dir, vaddr+i);$/;"	d
p	kernel.asm	/^      p = (char*)r + r->len;$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)(((uint)end + PAGE) & ~(PAGE-1));$/;"	d
p	kernel.asm	/^  p = (struct run*)v;$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kernel.asm	/^ p = kalloc(nu * sizeof(Header));$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	elf.h	/^  uint pa;$/;"	m	struct:proghdr
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
page	page.h	/^struct page {$/;"	s
page_dir	page.h	/^struct page_dir {$/;"	s
page_dir_t	kernel.asm	/^page_dir_t *init_dir(void) $/;"	l
page_dir_t	page.h	/^typedef struct page_dir page_dir_t;$/;"	t	typeref:struct:page_dir
page_t	page.h	/^typedef struct page page_t; $/;"	t	typeref:struct:page
page_table	page.h	/^struct page_table {$/;"	s
page_table_t	page.h	/^typedef struct page_table page_table_t; $/;"	t	typeref:struct:page_table
pageinit	page.c	/^void pageinit() $/;"	f
pageintr	page.c	/^void pageintr() {$/;"	f
pages	page.h	/^	page_t pages[1024];$/;"	m	struct:page_table
pagetables	page.h	/^	page_table_t *pagetables[1024];$/;"	m	struct:page_dir
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
pend	kernel.asm	/^  pend = (struct run*)(v + len);$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picenable	picirq.c	/^picenable(int irq)$/;"	f
picinit	picirq.c	/^picinit(void)$/;"	f
picsetmask	picirq.c	/^picsetmask(ushort mask)$/;"	f	file:
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  volatile int pid;            \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pinned	page.h	/^	unsigned int pinned  : 1;	\/\/ Can it be swapped out?$/;"	m	struct:page
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
popcli	spinlock.c	/^popcli(void)$/;"	f
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
present	page.h	/^	unsigned int present : 1;	$/;"	m	struct:page
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sgn)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon9	typeref:struct:__anon9::proc	file:
proc	proc.h	/^  struct proc *proc;$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon9
ptaddr	kernel.asm	/^		ptaddr = (page_table_t *) kalloc(sizeof(page_table_t));$/;"	d
ptr	kalloc.c	/^   union header *ptr;$/;"	m	struct:header::__anon8	typeref:union:header::__anon8::header	file:
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon10	typeref:union:header::__anon10::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	args.asm	/^  r = fstat(fd, st);$/;"	d
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon3	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	hello.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
r_w	page.h	/^	unsigned int r_w	 : 1;	\/\/ Read\/write$/;"	m	struct:page
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
read	dev.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	file:
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* va, uint count, uint offset)$/;"	f
readswapblock	ide.c	/^int readswapblock(int blockid, char *c) {$/;"	f
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
ref	fsvar.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
rend	kernel.asm	/^    rend = (struct run*)((char*)r + r->len);$/;"	d
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	args.asm	/^          s = "(null)";$/;"	d
s	args.asm	/^        s = (char*)*ap;$/;"	d
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	hello.asm	/^          s = "(null)";$/;"	d
s	hello.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kalloc.c	/^ } s;$/;"	m	union:header	typeref:struct:header::__anon8	file:
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon10	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ Switch here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
sector	buf.h	/^  uint sector;$/;"	m	struct:buf
segdesc	mmu.h	/^struct segdesc {$/;"	s
seq	usertests.asm	/^  seq = 0;$/;"	d
set_bit	bitmap.c	/^void set_bit(unsigned char *bitmap,int bit){$/;"	f
set_page	page.c	/^void set_page(uint phyaddr, page_t *p, int _r_w, int _u_s, int pin) $/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	fsvar.h	/^  uint size;$/;"	m	struct:inode
size	kalloc.c	/^   uint size;$/;"	m	struct:header::__anon8	file:
size	mkfs.c	/^int size = 1024;$/;"	v
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon10	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sp	kernel.asm	/^  sp = argp;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	bootother.S	/^spin:$/;"	l
spin	bootother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	args.asm	/^  src = vsrc;$/;"	d
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	hello.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc(KSTACKSIZE);$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	bootother.S	/^start:$/;"	l
start	bootother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	bootother.S	/^start32:$/;"	l
start32	bootother.asm	/^start32:$/;"	l
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	args.asm	/^        state = '%';$/;"	d
state	args.asm	/^      state = 0;$/;"	d
state	args.asm	/^  state = 0;$/;"	d
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	hello.asm	/^        state = '%';$/;"	d
state	hello.asm	/^      state = 0;$/;"	d
state	hello.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kernel.asm	/^  state = 0;$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	swap.c	/^}state;$/;"	v	typeref:struct:swap
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	args.asm	/^static Header *freep;$/;"	l
static	args.asm	/^static Header base;$/;"	l
static	args.asm	/^static Header*$/;"	l
static	args.asm	/^static inline void$/;"	l
static	args.asm	/^static void$/;"	l
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	hello.asm	/^static Header *freep;$/;"	l
static	hello.asm	/^static Header base;$/;"	l
static	hello.asm	/^static Header*$/;"	l
static	hello.asm	/^static inline void$/;"	l
static	hello.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static Header *freep;$/;"	l
static	kernel.asm	/^static Header base;$/;"	l
static	kernel.asm	/^static Header*$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode* iget(uint dev, uint inum);$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)0xb8000;  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void itrunc(struct inode*);$/;"	l
static	kernel.asm	/^static void mpmain(void) __attribute__((noreturn));$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
swap	swap.c	/^struct swap {$/;"	s	file:
swap_free_page	swap.c	/^void swap_free_page(int block){$/;"	f
swap_init	swap.c	/^void swap_init(void){$/;"	f
swap_page_from_disk	swap.c	/^void swap_page_from_disk(int block,char *target_page){$/;"	f
swap_page_to_disk	swap.c	/^void swap_page_to_disk(int block,char *target_page){$/;"	f
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = (sz+PAGE-1) & ~(PAGE-1);$/;"	d
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^int ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
timerinit	timer.c	/^timerinit(void)$/;"	f
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
twofiles	usertests.c	/^twofiles(void)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon5
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	fsvar.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
u_s	page.h	/^	unsigned int u_s	 : 1;	\/\/ User\/supervisor$/;"	m	struct:page
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	args.asm	/^uint$/;"	l
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	hello.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint get_page(page_dir_t *dir, uint vaddress) $/;"	l
uint	kernel.asm	/^uint new_pages(page_dir_t *dir, uint phyaddr, uint vaddr, uint size,$/;"	l
uint	kernel.asm	/^uint vm_alloc(page_dir_t *dir, uint size)$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unused	page.h	/^	unsigned int unused  : 4;$/;"	m	struct:page
unused1	page.h	/^	unsigned int unused1 : 2;$/;"	m	struct:page
usedblocks	mkfs.c	/^uint usedblocks;$/;"	v
usegment	proc.c	/^usegment(void)$/;"	f
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
va	bootblock.asm	/^    va = (uchar*)(ph->va & 0xFFFFFF);$/;"	d
va	elf.h	/^  uint va;$/;"	m	struct:proghdr
vector0	vectors.S	/^vector0:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
vfree	kalloc.c	/^vfree(void *ap) {$/;"	f
vm_alloc	page.c	/^uint vm_alloc(page_dir_t *dir, uint size)$/;"	f
vm_free	page.c	/^void vm_free(page_dir_t *dir, uint vaddr, uint size) $/;"	f
vmalloc	kalloc.c	/^vmalloc(uint nbytes)$/;"	f
vmem	proc.h	/^  uint vmem; 			       \/\/ Virtual memory address$/;"	m	struct:proc
vmem_lock	kalloc.c	/^struct spinlock vmem_lock;$/;"	v	typeref:struct:spinlock
void	args.asm	/^void$/;"	l
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	hello.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void clear_bit(unsigned char *bitmap,int bit){$/;"	l
void	kernel.asm	/^void enable_page(page_dir_t *dir) $/;"	l
void	kernel.asm	/^void pageinit() $/;"	l
void	kernel.asm	/^void pageintr() {$/;"	l
void	kernel.asm	/^void set_bit(unsigned char *bitmap,int bit){$/;"	l
void	kernel.asm	/^void set_page(uint phyaddr, page_t *p, int _r_w, int _u_s, int pin) $/;"	l
void	kernel.asm	/^void swap_free_page(int block){$/;"	l
void	kernel.asm	/^void swap_init(void){$/;"	l
void	kernel.asm	/^void swap_page_to_disk(int block,char *target_page){$/;"	l
void	kernel.asm	/^void vm_free(page_dir_t *dir, uint vaddr, uint size) $/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon3	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	dev.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writeswapblock	ide.c	/^int writeswapblock(int blockid, char *c) {$/;"	f
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)(0x40<<4 | 0x67);  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	args.asm	/^    x = -xx;$/;"	d
x	args.asm	/^    x = xx;$/;"	d
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	hello.asm	/^    x = -xx;$/;"	d
x	hello.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kalloc.c	/^ Align x;$/;"	m	union:header	file:
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[512];$/;"	v
